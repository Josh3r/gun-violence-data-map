{"version":3,"sources":["../../../src/lib/perspective-off-center-frustum-wip.js"],"names":["Vector3","Vector4","Matrix4","CullingVolume","getPlanesRight","getPlanesNearCenter","getPlanesFarCenter","getPlanesNormal","PerspectiveOffCenterFrustum","options","left","_left","undefined","right","_right","top","_top","bottom","_bottom","near","defaultValue","_near","far","_far","_cullingVolume","_perspectiveMatrix","_infinitePerspective","position","direction","up","defined","DeveloperError","planes","t","b","r","l","n","f","cross","nearCenter","multiplyByScalar","add","farCenter","normal","subtract","normalize","plane","x","y","z","w","dot","negate","update","frustum","computePerspectiveOffCenter","computeInfinitePerspectiveOffCenter"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport {Vector3, Vector4, Matrix4} from 'math.gl';\nimport CullingVolume from './culling-volume';\n\nconst getPlanesRight = new Vector3();\nconst getPlanesNearCenter = new Vector3();\nconst getPlanesFarCenter = new Vector3();\nconst getPlanesNormal = new Vector3();\n\nexport default class PerspectiveOffCenterFrustum {\n  /**\n   * The viewing frustum is defined by 6 planes.\n   * Each plane is represented by a {@link Vector4} object, where the x, y, and z components\n   * define the unit vector normal to the plane, and the w component is the distance of the\n   * plane from the origin/camera position.\n   *\n   * @alias PerspectiveOffCenterFrustum\n   * @constructor\n   *\n   * @param {Object} [options] An object with the following properties:\n   * @param {Number} [options.left] The left clipping plane distance.\n   * @param {Number} [options.right] The right clipping plane distance.\n   * @param {Number} [options.top] The top clipping plane distance.\n   * @param {Number} [options.bottom] The bottom clipping plane distance.\n   * @param {Number} [options.near=1.0] The near clipping plane distance.\n   * @param {Number} [options.far=500000000.0] The far clipping plane distance.\n   *\n   * @example\n   * const frustum = new Cesium.PerspectiveOffCenterFrustum({\n   *     left : -1.0,\n   *     right : 1.0,\n   *     top : 1.0,\n   *     bottom : -1.0,\n   *     near : 1.0,\n   *     far : 100.0\n   * });\n   *\n   * @see PerspectiveFrustum\n   */\n  constructor(options = {}) {\n    /**\n     * Defines the left clipping plane.\n     * @type {Number}\n     * @default undefined\n     */\n    this.left = options.left;\n    this._left = undefined;\n\n    /**\n     * Defines the right clipping plane.\n     * @type {Number}\n     * @default undefined\n     */\n    this.right = options.right;\n    this._right = undefined;\n\n    /**\n     * Defines the top clipping plane.\n     * @type {Number}\n     * @default undefined\n     */\n    this.top = options.top;\n    this._top = undefined;\n\n    /**\n     * Defines the bottom clipping plane.\n     * @type {Number}\n     * @default undefined\n     */\n    this.bottom = options.bottom;\n    this._bottom = undefined;\n\n    /**\n     * The distance of the near plane.\n     * @type {Number}\n     * @default 1.0\n     */\n    this.near = defaultValue(options.near, 1.0);\n    this._near = this.near;\n\n    /**\n     * The distance of the far plane.\n     * @type {Number}\n     * @default 500000000.0\n     */\n    this.far = defaultValue(options.far, 500000000.0);\n    this._far = this.far;\n\n    this._cullingVolume = new CullingVolume();\n    this._perspectiveMatrix = new Matrix4();\n    this._infinitePerspective = new Matrix4();\n  }\n\n  /**\n   * Gets the perspective projection matrix computed from the view frustum.\n   * @memberof PerspectiveOffCenterFrustum.prototype\n   * @type {Matrix4}\n   * @readonly\n   *\n   * @see PerspectiveOffCenterFrustum#infiniteProjectionMatrix\n   */\n  get projectionMatrix() {\n    update(this);\n    return this._perspectiveMatrix;\n  }\n\n  /**\n   * Gets the perspective projection matrix computed from the view frustum with an infinite far plane.\n   * @memberof PerspectiveOffCenterFrustum.prototype\n   * @type {Matrix4}\n   * @readonly\n   *\n   * @see PerspectiveOffCenterFrustum#projectionMatrix\n   */\n  get infiniteProjectionMatrix() {\n    update(this);\n    return this._infinitePerspective;\n  }\n\n  /**\n   * Creates a culling volume for this frustum.\n   *\n   * @param {Vector3} position The eye position.\n   * @param {Vector3} direction The view direction.\n   * @param {Vector3} up The up direction.\n   * @returns {CullingVolume} A culling volume at the given position and orientation.\n   *\n   * @example\n   * // Check if a bounding volume intersects the frustum.\n   * const cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\n   * const intersect = cullingVolume.computeVisibility(boundingVolume);\n   */\n  computeCullingVolume(position, direction, up) {\n    //>>includeStart('debug', pragmas.debug);\n    if (!defined(position)) {\n      throw new DeveloperError('position is required.');\n    }\n\n    if (!defined(direction)) {\n      throw new DeveloperError('direction is required.');\n    }\n\n    if (!defined(up)) {\n      throw new DeveloperError('up is required.');\n    }\n    //>>includeEnd('debug');\n\n    const planes = this._cullingVolume.planes;\n\n    const t = this.top;\n    const b = this.bottom;\n    const r = this.right;\n    const l = this.left;\n    const n = this.near;\n    const f = this.far;\n\n    const right = Vector3.cross(direction, up, getPlanesRight);\n\n    const nearCenter = getPlanesNearCenter;\n    Vector3.multiplyByScalar(direction, n, nearCenter);\n    Vector3.add(position, nearCenter, nearCenter);\n\n    const farCenter = getPlanesFarCenter;\n    Vector3.multiplyByScalar(direction, f, farCenter);\n    Vector3.add(position, farCenter, farCenter);\n\n    const normal = getPlanesNormal;\n\n    //Left plane computation\n    Vector3.multiplyByScalar(right, l, normal);\n    Vector3.add(nearCenter, normal, normal);\n    Vector3.subtract(normal, position, normal);\n    Vector3.normalize(normal, normal);\n    Vector3.cross(normal, up, normal);\n    Vector3.normalize(normal, normal);\n\n    const plane = planes[0];\n    if (!defined(plane)) {\n      plane = planes[0] = new Vector4();\n    }\n    plane.x = normal.x;\n    plane.y = normal.y;\n    plane.z = normal.z;\n    plane.w = -Vector3.dot(normal, position);\n\n    //Right plane computation\n    Vector3.multiplyByScalar(right, r, normal);\n    Vector3.add(nearCenter, normal, normal);\n    Vector3.subtract(normal, position, normal);\n    Vector3.cross(up, normal, normal);\n    Vector3.normalize(normal, normal);\n\n    plane = planes[1];\n    if (!defined(plane)) {\n      plane = planes[1] = new Vector4();\n    }\n    plane.x = normal.x;\n    plane.y = normal.y;\n    plane.z = normal.z;\n    plane.w = -Vector3.dot(normal, position);\n\n    //Bottom plane computation\n    Vector3.multiplyByScalar(up, b, normal);\n    Vector3.add(nearCenter, normal, normal);\n    Vector3.subtract(normal, position, normal);\n    Vector3.cross(right, normal, normal);\n    Vector3.normalize(normal, normal);\n\n    plane = planes[2];\n    if (!defined(plane)) {\n      plane = planes[2] = new Vector4();\n    }\n    plane.x = normal.x;\n    plane.y = normal.y;\n    plane.z = normal.z;\n    plane.w = -Vector3.dot(normal, position);\n\n    //Top plane computation\n    Vector3.multiplyByScalar(up, t, normal);\n    Vector3.add(nearCenter, normal, normal);\n    Vector3.subtract(normal, position, normal);\n    Vector3.cross(normal, right, normal);\n    Vector3.normalize(normal, normal);\n\n    plane = planes[3];\n    if (!defined(plane)) {\n      plane = planes[3] = new Vector4();\n    }\n    plane.x = normal.x;\n    plane.y = normal.y;\n    plane.z = normal.z;\n    plane.w = -Vector3.dot(normal, position);\n\n    //Near plane computation\n    plane = planes[4];\n    if (!defined(plane)) {\n      plane = planes[4] = new Vector4();\n    }\n    plane.x = direction.x;\n    plane.y = direction.y;\n    plane.z = direction.z;\n    plane.w = -Vector3.dot(direction, nearCenter);\n\n    //Far plane computation\n    Vector3.negate(direction, normal);\n\n    plane = planes[5];\n    if (!defined(plane)) {\n      plane = planes[5] = new Vector4();\n    }\n    plane.x = normal.x;\n    plane.y = normal.y;\n    plane.z = normal.z;\n    plane.w = -Vector3.dot(normal, farCenter);\n\n    return this._cullingVolume;\n  }\n\n  /**\n   * Returns the pixel's width and height in meters.\n   *\n   * @param {Number} drawingBufferWidth The width of the drawing buffer.\n   * @param {Number} drawingBufferHeight The height of the drawing buffer.\n   * @param {Number} distance The distance to the near plane in meters.\n   * @param {Vector2} result The object onto which to store the result.\n   * @returns {Vector2} The modified result parameter or a new instance of {@link Vector2} with the pixel's width and height in the x and y properties, respectively.\n   *\n   * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\n   * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\n   *\n   * @example\n   * // Example 1\n   * // Get the width and height of a pixel.\n   * const pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 1.0, new Cesium.Vector2());\n   *\n   * @example\n   * // Example 2\n   * // Get the width and height of a pixel if the near plane was set to 'distance'.\n   * // For example, get the size of a pixel of an image on a billboard.\n   * const position = camera.position;\n   * const direction = camera.direction;\n   * const toCenter = Cesium.Vector3.subtract(primitive.boundingVolume.center, position, new Cesium.Vector3());      // vector from camera to a primitive\n   * const toCenterProj = Cesium.Vector3.multiplyByScalar(direction, Cesium.Vector3.dot(direction, toCenter), new Cesium.Vector3()); // project vector onto camera direction vector\n   * const distance = Cesium.Vector3.magnitude(toCenterProj);\n   * const pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, distance, new Cesium.Vector2());\n  getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, result) {\n    update(this);\n\n    //>>includeStart('debug', pragmas.debug);\n    if (!defined(drawingBufferWidth) || !defined(drawingBufferHeight)) {\n      throw new DeveloperError('Both drawingBufferWidth and drawingBufferHeight are required.');\n    }\n    if (drawingBufferWidth <= 0) {\n      throw new DeveloperError('drawingBufferWidth must be greater than zero.');\n    }\n    if (drawingBufferHeight <= 0) {\n      throw new DeveloperError('drawingBufferHeight must be greater than zero.');\n    }\n    if (!defined(distance)) {\n      throw new DeveloperError('distance is required.');\n    }\n    if (!defined(result)) {\n      throw new DeveloperError('A result object is required.');\n    }\n    //>>includeEnd('debug');\n\n    const inverseNear = 1.0 / this.near;\n    const tanTheta = this.top * inverseNear;\n    const pixelHeight = (2.0 * distance * tanTheta) / drawingBufferHeight;\n    tanTheta = this.right * inverseNear;\n    const pixelWidth = (2.0 * distance * tanTheta) / drawingBufferWidth;\n\n    result.x = pixelWidth;\n    result.y = pixelHeight;\n    return result;\n  }\n   */\n\n  /**\n   * Returns a duplicate of a PerspectiveOffCenterFrustum instance.\n   *\n   * @param {PerspectiveOffCenterFrustum} [result] The object onto which to store the result.\n   * @returns {PerspectiveOffCenterFrustum} The modified result parameter or a new PerspectiveFrustum instance if one was not provided.\n  clone(result) {\n    if (!defined(result)) {\n      result = new PerspectiveOffCenterFrustum();\n    }\n\n    result.right = this.right;\n    result.left = this.left;\n    result.top = this.top;\n    result.bottom = this.bottom;\n    result.near = this.near;\n    result.far = this.far;\n\n    // force update of clone to compute matrices\n    result._left = undefined;\n    result._right = undefined;\n    result._top = undefined;\n    result._bottom = undefined;\n    result._near = undefined;\n    result._far = undefined;\n\n    return result;\n  }\n   */\n\n  /**\n   * Compares the provided PerspectiveOffCenterFrustum componentwise and returns\n   * <code>true</code> if they are equal, <code>false</code> otherwise.\n   *\n   * @param {PerspectiveOffCenterFrustum} [other] The right hand side PerspectiveOffCenterFrustum.\n   * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n  equals(other) {\n    return (\n      defined(other) &&\n      other instanceof PerspectiveOffCenterFrustum &&\n      this.right === other.right &&\n      this.left === other.left &&\n      this.top === other.top &&\n      this.bottom === other.bottom &&\n      this.near === other.near &&\n      this.far === other.far\n    );\n  }\n   */\n}\n\nfunction update(frustum) {\n  //>>includeStart('debug', pragmas.debug);\n  if (\n    !defined(frustum.right) ||\n    !defined(frustum.left) ||\n    !defined(frustum.top) ||\n    !defined(frustum.bottom) ||\n    !defined(frustum.near) ||\n    !defined(frustum.far)\n  ) {\n    throw new DeveloperError('right, left, top, bottom, near, or far parameters are not set.');\n  }\n  //>>includeEnd('debug');\n\n  const t = frustum.top;\n  const b = frustum.bottom;\n  const r = frustum.right;\n  const l = frustum.left;\n  const n = frustum.near;\n  const f = frustum.far;\n\n  if (\n    t !== frustum._top ||\n    b !== frustum._bottom ||\n    l !== frustum._left ||\n    r !== frustum._right ||\n    n !== frustum._near ||\n    f !== frustum._far\n  ) {\n    //>>includeStart('debug', pragmas.debug);\n    if (frustum.near <= 0 || frustum.near > frustum.far) {\n      throw new DeveloperError('near must be greater than zero and less than far.');\n    }\n    //>>includeEnd('debug');\n\n    frustum._left = l;\n    frustum._right = r;\n    frustum._top = t;\n    frustum._bottom = b;\n    frustum._near = n;\n    frustum._far = f;\n    frustum._perspectiveMatrix = Matrix4.computePerspectiveOffCenter(\n      l,\n      r,\n      b,\n      t,\n      n,\n      f,\n      frustum._perspectiveMatrix\n    );\n    frustum._infinitePerspective = Matrix4.computeInfinitePerspectiveOffCenter(\n      l,\n      r,\n      b,\n      t,\n      n,\n      frustum._infinitePerspective\n    );\n  }\n}\n"],"file":"perspective-off-center-frustum-wip.js"}