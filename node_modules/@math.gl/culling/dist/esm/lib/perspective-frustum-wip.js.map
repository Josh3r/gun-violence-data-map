{"version":3,"sources":["../../../src/lib/perspective-frustum-wip.js"],"names":["PerspectiveOffCenterFrustum","PerspectiveFrustum","options","_offCenterFrustum","fov","_fov","undefined","_fovy","_sseDenominator","aspectRatio","_aspectRatio","near","defaultValue","_near","far","_far","xOffset","_xOffset","yOffset","_yOffset","position","direction","up","update","computeCullingVolume","projectionMatrix","infiniteProjectionMatrix","frustum","defined","DeveloperError","f","Math","PI","atan","tan","top","bottom","right","left"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport PerspectiveOffCenterFrustum from './perspective-off-center-frustum-wip';\n\n/**\n * The viewing frustum is defined by 6 planes.\n * Each plane is represented by a {@link Cartesian4} object, where the x, y, and z components\n * define the unit vector normal to the plane, and the w component is the distance of the\n * plane from the origin/camera position.\n *\n * @alias PerspectiveFrustum\n * @constructor\n *\n * @param {Object} [options] An object with the following properties:\n * @param {Number} [options.fov] The angle of the field of view (FOV), in radians.\n * @param {Number} [options.aspectRatio] The aspect ratio of the frustum's width to it's height.\n * @param {Number} [options.near=1.0] The distance of the near plane.\n * @param {Number} [options.far=500000000.0] The distance of the far plane.\n * @param {Number} [options.xOffset=0.0] The offset in the x direction.\n * @param {Number} [options.yOffset=0.0] The offset in the y direction.\n *\n * @example\n * var frustum = new Cesium.PerspectiveFrustum({\n *     fov : Cesium.Math.PI_OVER_THREE,\n *     aspectRatio : canvas.clientWidth / canvas.clientHeight\n *     near : 1.0,\n *     far : 1000.0\n * });\n *\n * @see PerspectiveOffCenterFrustum\n */\nexport default class PerspectiveFrustum {\n  constructor(options = {}) {\n    this._offCenterFrustum = new PerspectiveOffCenterFrustum();\n\n    /**\n     * The angle of the field of view (FOV), in radians.  This angle will be used\n     * as the horizontal FOV if the width is greater than the height, otherwise\n     * it will be the vertical FOV.\n     * @type {Number}\n     * @default undefined\n     */\n    this.fov = options.fov;\n    this._fov = undefined;\n    this._fovy = undefined;\n\n    this._sseDenominator = undefined;\n\n    /**\n     * The aspect ratio of the frustum's width to it's height.\n     * @type {Number}\n     * @default undefined\n     */\n    this.aspectRatio = options.aspectRatio;\n    this._aspectRatio = undefined;\n\n    /**\n     * The distance of the near plane.\n     * @type {Number}\n     * @default 1.0\n     */\n    this.near = defaultValue(options.near, 1.0);\n    this._near = this.near;\n\n    /**\n     * The distance of the far plane.\n     * @type {Number}\n     * @default 500000000.0\n     */\n    this.far = defaultValue(options.far, 500000000.0);\n    this._far = this.far;\n\n    /**\n     * Offsets the frustum in the x direction.\n     * @type {Number}\n     * @default 0.0\n     */\n    this.xOffset = defaultValue(options.xOffset, 0.0);\n    this._xOffset = this.xOffset;\n\n    /**\n     * Offsets the frustum in the y direction.\n     * @type {Number}\n     * @default 0.0\n     */\n    this.yOffset = defaultValue(options.yOffset, 0.0);\n    this._yOffset = this.yOffset;\n  }\n\n  /**\n   * Gets the perspective projection matrix computed from the view frustum.\n   * @memberof PerspectiveFrustum.prototype\n   * @type {Matrix4}\n   * @readonly\n   *\n   * @see PerspectiveFrustum#infiniteProjectionMatrix\n   */\n  get projectionMatrix() {\n    update(this);\n    return this._offCenterFrustum.projectionMatrix;\n  }\n\n  /**\n   * The perspective projection matrix computed from the view frustum with an infinite far plane.\n   * @memberof PerspectiveFrustum.prototype\n   * @type {Matrix4}\n   * @readonly\n   *\n   * @see PerspectiveFrustum#projectionMatrix\n   */\n  get infiniteProjectionMatrix() {\n    update(this);\n    return this._offCenterFrustum.infiniteProjectionMatrix;\n  }\n\n  /**\n   * Gets the angle of the vertical field of view, in radians.\n   * @memberof PerspectiveFrustum.prototype\n   * @type {Number}\n   * @readonly\n   * @default undefined\n   */\n  get fovy() {\n    update(this);\n    return this._fovy;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get sseDenominator() {\n    update(this);\n    return this._sseDenominator;\n  }\n\n  /**\n   * Returns a duplicate of a PerspectiveFrustum instance.\n   *\n   * @param {PerspectiveFrustum} [result] The object onto which to store the result.\n   * @returns {PerspectiveFrustum} The modified result parameter or a new PerspectiveFrustum instance if one was not provided.\n  clone(result) {\n    if (!defined(result)) {\n      result = new PerspectiveFrustum();\n    }\n\n    result.aspectRatio = this.aspectRatio;\n    result.fov = this.fov;\n    result.near = this.near;\n    result.far = this.far;\n\n    // force update of clone to compute matrices\n    result._aspectRatio = undefined;\n    result._fov = undefined;\n    result._near = undefined;\n    result._far = undefined;\n\n    this._offCenterFrustum.clone(result._offCenterFrustum);\n\n    return result;\n  }\n\n  /**\n   * Compares the provided PerspectiveFrustum componentwise and returns\n   * <code>true</code> if they are equal, <code>false</code> otherwise.\n   *\n   * @param {PerspectiveFrustum} [other] The right hand side PerspectiveFrustum.\n   * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\n  equals(other) {\n    if (!defined(other) || !(other instanceof PerspectiveFrustum)) {\n      return false;\n    }\n\n    update(this);\n    update(other);\n\n    return (\n      this.fov === other.fov &&\n      this.aspectRatio === other.aspectRatio &&\n      this.near === other.near &&\n      this.far === other.far &&\n      this._offCenterFrustum.equals(other._offCenterFrustum)\n    );\n  }\n   */\n\n  /**\n   * Creates a culling volume for this frustum.\n   *\n   * @param {Cartesian3} position The eye position.\n   * @param {Cartesian3} direction The view direction.\n   * @param {Cartesian3} up The up direction.\n   * @returns {CullingVolume} A culling volume at the given position and orientation.\n   *\n   * @example\n   * // Check if a bounding volume intersects the frustum.\n   * var cullingVolume = frustum.computeCullingVolume(cameraPosition, cameraDirection, cameraUp);\n   * var intersect = cullingVolume.computeVisibility(boundingVolume);\n   */\n  computeCullingVolume(position, direction, up) {\n    update(this);\n    return this._offCenterFrustum.computeCullingVolume(position, direction, up);\n  }\n\n  /**\n   * Returns the pixel's width and height in meters.\n   *\n   * @param {Number} drawingBufferWidth The width of the drawing buffer.\n   * @param {Number} drawingBufferHeight The height of the drawing buffer.\n   * @param {Number} distance The distance to the near plane in meters.\n   * @param {Cartesian2} result The object onto which to store the result.\n   * @returns {Cartesian2} The modified result parameter or a new instance of {@link Cartesian2} with the pixel's width and height in the x and y properties, respectively.\n   *\n   * @exception {DeveloperError} drawingBufferWidth must be greater than zero.\n   * @exception {DeveloperError} drawingBufferHeight must be greater than zero.\n   *\n   * @example\n   * // Example 1\n   * // Get the width and height of a pixel.\n   * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, 1.0, new Cesium.Cartesian2());\n   *\n   * @example\n   * // Example 2\n   * // Get the width and height of a pixel if the near plane was set to 'distance'.\n   * // For example, get the size of a pixel of an image on a billboard.\n   * var position = camera.position;\n   * var direction = camera.direction;\n   * var toCenter = Cesium.Cartesian3.subtract(primitive.boundingVolume.center, position, new Cesium.Cartesian3());      // vector from camera to a primitive\n   * var toCenterProj = Cesium.Cartesian3.multiplyByScalar(direction, Cesium.Cartesian3.dot(direction, toCenter), new Cesium.Cartesian3()); // project vector onto camera direction vector\n   * var distance = Cesium.Cartesian3.magnitude(toCenterProj);\n   * var pixelSize = camera.frustum.getPixelDimensions(scene.drawingBufferWidth, scene.drawingBufferHeight, distance, new Cesium.Cartesian2());\n  getPixelDimensions(drawingBufferWidth, drawingBufferHeight, distance, result) {\n    update(this);\n    return this._offCenterFrustum.getPixelDimensions(\n      drawingBufferWidth,\n      drawingBufferHeight,\n      distance,\n      result\n    );\n  }\n   */\n}\n\nfunction update(frustum) {\n  //>>includeStart('debug', pragmas.debug);\n  if (\n    !defined(frustum.fov) ||\n    !defined(frustum.aspectRatio) ||\n    !defined(frustum.near) ||\n    !defined(frustum.far)\n  ) {\n    throw new DeveloperError('fov, aspectRatio, near, or far parameters are not set.');\n  }\n  //>>includeEnd('debug');\n\n  var f = frustum._offCenterFrustum;\n\n  if (\n    frustum.fov !== frustum._fov ||\n    frustum.aspectRatio !== frustum._aspectRatio ||\n    frustum.near !== frustum._near ||\n    frustum.far !== frustum._far ||\n    frustum.xOffset !== frustum._xOffset ||\n    frustum.yOffset !== frustum._yOffset\n  ) {\n    //>>includeStart('debug', pragmas.debug);\n    if (frustum.fov < 0 || frustum.fov >= Math.PI) {\n      throw new DeveloperError('fov must be in the range [0, PI).');\n    }\n\n    if (frustum.aspectRatio < 0) {\n      throw new DeveloperError('aspectRatio must be positive.');\n    }\n\n    if (frustum.near < 0 || frustum.near > frustum.far) {\n      throw new DeveloperError('near must be greater than zero and less than far.');\n    }\n    //>>includeEnd('debug');\n\n    frustum._aspectRatio = frustum.aspectRatio;\n    frustum._fov = frustum.fov;\n    frustum._fovy =\n      frustum.aspectRatio <= 1\n        ? frustum.fov\n        : Math.atan(Math.tan(frustum.fov * 0.5) / frustum.aspectRatio) * 2.0;\n    frustum._near = frustum.near;\n    frustum._far = frustum.far;\n    frustum._sseDenominator = 2.0 * Math.tan(0.5 * frustum._fovy);\n    frustum._xOffset = frustum.xOffset;\n    frustum._yOffset = frustum.yOffset;\n\n    f.top = frustum.near * Math.tan(0.5 * frustum._fovy);\n    f.bottom = -f.top;\n    f.right = frustum.aspectRatio * f.top;\n    f.left = -f.right;\n    f.near = frustum.near;\n    f.far = frustum.far;\n\n    f.right += frustum.xOffset;\n    f.left += frustum.xOffset;\n    f.top += frustum.yOffset;\n    f.bottom += frustum.yOffset;\n  }\n}\n"],"file":"perspective-frustum-wip.js"}