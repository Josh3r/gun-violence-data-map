{"version":3,"sources":["../../src/gltf-loader.js"],"names":["VERSION","GLTFLoader","id","name","version","extensions","mimeType","text","binary","test","parse","options","gltf","loadBuffers","loadImages","decompressMeshes","postProcess","uri","log","console","arrayBuffer","context","addDeprecatedGLTFOptions","byteOffset","fetchImages","createImages","fetchBuffers","fetchLinkedResources","decompress"],"mappings":";;;;;;;;;;;;;;;;AAEA;;;;;;AAEA,IAAMA,OAAO,GAAG,mBAAuB,WAAvB,aAAmD,QAAnE;AAEA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,EAAE,EAAE,MADa;AAEjBC,EAAAA,IAAI,EAAE,MAFW;AAGjBC,EAAAA,OAAO,EAAEJ,OAHQ;AAIjBK,EAAAA,UAAU,EAAE,CAAC,MAAD,EAAS,KAAT,CAJK;AAMjBC,EAAAA,QAAQ,EAAE,iBANO;AAQjBC,EAAAA,IAAI,EAAE,IARW;AASjBC,EAAAA,MAAM,EAAE,IATS;AAUjBC,EAAAA,IAAI,EAAE,MAVW;AAWjBC,EAAAA,KAAK,EAALA,KAXiB;AAajBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE;AACJC,MAAAA,WAAW,EAAE,IADT;AAEJC,MAAAA,UAAU,EAAE,IAFR;AAGJC,MAAAA,gBAAgB,EAAE,IAHd;AAIJC,MAAAA,WAAW,EAAE;AAJT,KADC;AASPC,IAAAA,GAAG,EAAE,EATE;AAUPC,IAAAA,GAAG,EAAEC;AAVE;AAbQ,CAAnB;eA2BelB,U;;;SAEOS,K;;;;;2EAAf,iBAAqBU,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAkCT,YAAAA,OAAlC,2DAA4C,EAA5C;AAAgDU,YAAAA,OAAhD;AAELV,YAAAA,OAAO,qBAAOV,UAAU,CAACU,OAAlB,MAA8BA,OAA9B,CAAP;AACAA,YAAAA,OAAO,CAACC,IAAR,qBAAmBX,UAAU,CAACU,OAAX,CAAmBC,IAAtC,MAA+CD,OAAO,CAACC,IAAvD;AACAU,YAAAA,wBAAwB,CAACX,OAAD,CAAxB;AAJK,uBAMoBA,OANpB,iCAMEY,UANF,EAMEA,UANF,oCAMe,CANf;AAOCX,YAAAA,IAPD,GAOQ,EAPR;AAAA;AAAA,mBAQQ,0BAAUA,IAAV,EAAgBQ,WAAhB,EAA6BG,UAA7B,EAAyCZ,OAAzC,EAAkDU,OAAlD,CARR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAaP,SAASC,wBAAT,CAAkCX,OAAlC,EAA2C;AACzC,MAAI,iBAAiBA,OAArB,EAA8B;AAC5BA,IAAAA,OAAO,CAACC,IAAR,CAAaE,UAAb,GAA0BH,OAAO,CAACa,WAAlC;AACD;;AACD,MAAI,kBAAkBb,OAAtB,EAA+B;AAC7BA,IAAAA,OAAO,CAACC,IAAR,CAAaE,UAAb,GAA0BH,OAAO,CAACc,YAAlC;AACD;;AACD,MAAI,0BAA0Bd,OAA9B,EAAuC;AACrCA,IAAAA,OAAO,CAACC,IAAR,CAAac,YAAb,GAA4Bf,OAAO,CAACgB,oBAApC;AACD;;AACD,MAAI,gBAAgBhB,OAApB,EAA6B;AAC3BA,IAAAA,OAAO,CAACC,IAAR,CAAaG,gBAAb,GAAgCJ,OAAO,CAACiB,UAAxC;AACD;;AACD,MAAI,gBAAgBjB,OAAO,CAACC,IAA5B,EAAkC;AAChCD,IAAAA,OAAO,CAACC,IAAR,CAAaG,gBAAb,GAAgCJ,OAAO,CAACC,IAAR,CAAagB,UAA7C;AACD;;AACD,MAAI,iBAAiBjB,OAArB,EAA8B;AAC5BA,IAAAA,OAAO,CAACC,IAAR,CAAaI,WAAb,GAA2BL,OAAO,CAACK,WAAnC;AACD;AACF","sourcesContent":["/* global __VERSION__ */ // __VERSION__ is injected by babel-plugin-version-inline\n\nimport {parseGLTF} from './lib/parse-gltf';\n\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nconst GLTFLoader = {\n  id: 'gltf',\n  name: 'glTF',\n  version: VERSION,\n  extensions: ['gltf', 'glb'],\n  // mimeType: 'model/gltf-binary',\n  mimeType: 'model/gltf+json',\n\n  text: true,\n  binary: true,\n  test: 'glTF',\n  parse,\n\n  options: {\n    gltf: {\n      loadBuffers: true, // Fetch any linked .BIN buffers, decode base64\n      loadImages: true, // Create image objects\n      decompressMeshes: true, // Decompress Draco encoded meshes\n      postProcess: true // Postprocess glTF and return json structure directly\n    },\n\n    // common?\n    uri: '', // base URI\n    log: console // eslint-disable-line\n  }\n};\n\nexport default GLTFLoader;\n\nexport async function parse(arrayBuffer, options = {}, context) {\n  // Apps can call the parse method directly, we so apply default options here\n  options = {...GLTFLoader.options, ...options};\n  options.gltf = {...GLTFLoader.options.gltf, ...options.gltf};\n  addDeprecatedGLTFOptions(options);\n\n  const {byteOffset = 0} = options;\n  const gltf = {};\n  return await parseGLTF(gltf, arrayBuffer, byteOffset, options, context);\n}\n\n// DEPRECATED\n\nfunction addDeprecatedGLTFOptions(options) {\n  if ('fetchImages' in options) {\n    options.gltf.loadImages = options.fetchImages;\n  }\n  if ('createImages' in options) {\n    options.gltf.loadImages = options.createImages;\n  }\n  if ('fetchLinkedResources' in options) {\n    options.gltf.fetchBuffers = options.fetchLinkedResources;\n  }\n  if ('decompress' in options) {\n    options.gltf.decompressMeshes = options.decompress;\n  }\n  if ('decompress' in options.gltf) {\n    options.gltf.decompressMeshes = options.gltf.decompress;\n  }\n  if ('postProcess' in options) {\n    options.gltf.postProcess = options.postProcess;\n  }\n}\n"],"file":"gltf-loader.js"}