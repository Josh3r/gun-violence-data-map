{"version":3,"sources":["../../../src/lib/parse-in-batches.js"],"names":["isLoaderObject","mergeOptions","getAsyncIteratorFromData","getLoaderContext","selectLoader","textDecoderAsyncIterator","parseInBatches","data","loaders","options","url","Array","isArray","loader","context","parseWithLoaderInBatches","inputIterator","text","outputIterator","Error"],"mappings":";;AAAA,SAAQA,cAAR,QAA6B,iCAA7B;AACA,SAAQC,YAAR,QAA2B,8BAA3B;AACA,SAAQC,wBAAR,QAAuC,yBAAvC;AACA,SAAQC,gBAAR,QAA+B,mCAA/B;AACA,SAAQC,YAAR,QAA2B,iBAA3B;AACA,SAAQC,wBAAR,QAAuC,0CAAvC;AAEA,gBAAsBC,cAAtB;AAAA;AAAA;;;+DAAO,iBAA8BC,IAA9B,EAAoCC,OAApC,EAA6CC,OAA7C,EAAsDC,GAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAGL,gBAAI,CAACC,KAAK,CAACC,OAAN,CAAcJ,OAAd,CAAD,IAA2B,CAACR,cAAc,CAACQ,OAAD,CAA9C,EAAyD;AACvDE,cAAAA,GAAG,GAAGD,OAAN;AACAA,cAAAA,OAAO,GAAGD,OAAV;AACAA,cAAAA,OAAO,GAAG,IAAV;AACD;;AAIKK,YAAAA,MAXD,GAWUT,YAAY,CAACI,OAAD,EAAUE,GAAV,EAAe,IAAf,CAXtB;AAcLD,YAAAA,OAAO,GAAGR,YAAY,CAACY,MAAD,EAASJ,OAAT,EAAkBC,GAAlB,CAAtB;AAEMI,YAAAA,OAhBD,GAgBWX,gBAAgB,CAAC;AAACO,cAAAA,GAAG,EAAHA,GAAD;AAAMF,cAAAA,OAAO,EAAPA;AAAN,aAAD,EAAiBC,OAAjB,CAhB3B;AAAA,6CAkBEM,wBAAwB,CAACF,MAAD,EAASN,IAAT,EAAeE,OAAf,EAAwBK,OAAxB,CAlB1B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAqBP,SAASC,wBAAT,CAAkCF,MAAlC,EAA0CN,IAA1C,EAAgDE,OAAhD,EAAyDK,OAAzD,EAAkE;AAEhE,MAAID,MAAM,CAACP,cAAX,EAA2B;AACzB,QAAIU,aAAa,GAAGd,wBAAwB,CAACK,IAAD,CAA5C;;AAEA,QAAIM,MAAM,CAACI,IAAX,EAAiB;AACfD,MAAAA,aAAa,GAAGX,wBAAwB,CAACW,aAAD,CAAxC;AACD;;AACD,QAAME,cAAc,GAAGL,MAAM,CAACP,cAAP,CAAsBU,aAAtB,EAAqCP,OAArC,EAA8CK,OAA9C,EAAuDD,MAAvD,CAAvB;AACA,WAAOK,cAAP;AACD;;AAED,QAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACD","sourcesContent":["import {isLoaderObject} from './loader-utils/normalize-loader';\nimport {mergeOptions} from './loader-utils/merge-options';\nimport {getAsyncIteratorFromData} from './loader-utils/get-data';\nimport {getLoaderContext} from './loader-utils/get-loader-context';\nimport {selectLoader} from './select-loader';\nimport {textDecoderAsyncIterator} from '../javascript-utils/async-iterator-utils';\n\nexport async function parseInBatches(data, loaders, options, url) {\n  // Signature: parseInBatches(data, options, url)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    url = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  // Chooses a loader and normalizes it\n  // TODO - only uses URL, need a selectLoader variant that peeks at first stream chunk...\n  const loader = selectLoader(loaders, url, null);\n\n  // Normalize options\n  options = mergeOptions(loader, options, url);\n\n  const context = getLoaderContext({url, loaders}, options);\n\n  return parseWithLoaderInBatches(loader, data, options, context);\n}\n\nfunction parseWithLoaderInBatches(loader, data, options, context) {\n  // Create async iterator adapter for data, and concatenate result\n  if (loader.parseInBatches) {\n    let inputIterator = getAsyncIteratorFromData(data);\n    // Converts ArrayBuffer chunks to text chunks (leaves text chunks alone)\n    if (loader.text) {\n      inputIterator = textDecoderAsyncIterator(inputIterator);\n    }\n    const outputIterator = loader.parseInBatches(inputIterator, options, context, loader);\n    return outputIterator;\n  }\n\n  throw new Error('parseWithLoaderInBatchesSync not available');\n}\n"],"file":"parse-in-batches.js"}