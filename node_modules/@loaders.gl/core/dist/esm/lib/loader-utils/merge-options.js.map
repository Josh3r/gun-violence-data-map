{"version":3,"sources":["../../../../src/lib/loader-utils/merge-options.js"],"names":["DEFAULT_LOADER_OPTIONS","NullLog","isPureObject","value","constructor","globalOptions","setGlobalOptions","options","mergeOptions","loader","url","loaderDefaultOptions","defaultOptions","mergedOptions","addUrlOptions","log","mergeNestedFields","key","baseUri"],"mappings":";;;;;;;AAAA,SAAQA,sBAAR,QAAqC,cAArC;AACA,SAAQC,OAAR,QAAsB,WAAtB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK;AAAA,SACxBA,KAAK,IAAI,QAAOA,KAAP,MAAiB,QAA1B,IAAsCA,KAAK,CAACC,WAAN,KAAsB,GAAGA,WADvC;AAAA,CAA1B;;AAGA,IAAIC,aAAa,qBAAOL,sBAAP,CAAjB;;AAGA,OAAO,SAASM,gBAAT,CAA0BC,OAA1B,EAAmC;AACxCF,EAAAA,aAAa,GAAGG,YAAY,CAACH,aAAD,EAAgBE,OAAhB,CAA5B;AACD;AAGD,OAAO,SAASC,YAAT,CAAsBC,MAAtB,EAA8BF,OAA9B,EAAuCG,GAAvC,EAA4C;AACjD,MAAMC,oBAAoB,GACxBF,MAAM,KAAKA,MAAM,CAACT,sBAAP,IAAiCS,MAAM,CAACG,cAAxC,IAA0DH,MAAM,CAACF,OAAjE,IAA4E,EAAjF,CADR;;AAGA,MAAMM,aAAa,qBAAOF,oBAAP,CAAnB;;AAEAG,EAAAA,aAAa,CAACD,aAAD,EAAgBH,GAAhB,CAAb;;AAGA,MAAIG,aAAa,CAACE,GAAd,KAAsB,IAA1B,EAAgC;AAC9BF,IAAAA,aAAa,CAACE,GAAd,GAAoB,IAAId,OAAJ,EAApB;AACD;;AAEDe,EAAAA,iBAAiB,CAACH,aAAD,EAAgBR,aAAhB,CAAjB;AACAW,EAAAA,iBAAiB,CAACH,aAAD,EAAgBN,OAAhB,CAAjB;AAEA,SAAOM,aAAP;AACD;;AAGD,SAASG,iBAAT,CAA2BH,aAA3B,EAA0CN,OAA1C,EAAmD;AACjD,OAAK,IAAMU,GAAX,IAAkBV,OAAlB,EAA2B;AAGzB,QAAIU,GAAG,IAAIV,OAAX,EAAoB;AAClB,UAAMJ,KAAK,GAAGI,OAAO,CAACU,GAAD,CAArB;;AACA,UAAIf,YAAY,CAACC,KAAD,CAAZ,IAAuBD,YAAY,CAACW,aAAa,CAACI,GAAD,CAAd,CAAvC,EAA6D;AAC3DJ,QAAAA,aAAa,CAACI,GAAD,CAAb,qBACKJ,aAAa,CAACI,GAAD,CADlB,MAEKV,OAAO,CAACU,GAAD,CAFZ;AAID,OALD,MAKO;AACLJ,QAAAA,aAAa,CAACI,GAAD,CAAb,GAAqBV,OAAO,CAACU,GAAD,CAA5B;AACD;AACF;AAEF;AACF;;AAOD,SAASH,aAAT,CAAuBP,OAAvB,EAAgCG,GAAhC,EAAqC;AACnC,MAAIA,GAAG,IAAI,EAAE,aAAaH,OAAf,CAAX,EAAoC;AAClCA,IAAAA,OAAO,CAACW,OAAR,GAAkBR,GAAlB;AACD;AACF","sourcesContent":["import {DEFAULT_LOADER_OPTIONS} from '../constants';\nimport {NullLog} from './loggers';\n\nconst isPureObject = value =>\n  value && typeof value === 'object' && value.constructor === {}.constructor;\n\nlet globalOptions = {...DEFAULT_LOADER_OPTIONS};\n\n// Set global loader options\nexport function setGlobalOptions(options) {\n  globalOptions = mergeOptions(globalOptions, options);\n}\n\n// Merges options with global opts and loader defaults, also injects baseUri\nexport function mergeOptions(loader, options, url) {\n  const loaderDefaultOptions =\n    loader && (loader.DEFAULT_LOADER_OPTIONS || loader.defaultOptions || loader.options || {});\n\n  const mergedOptions = {...loaderDefaultOptions};\n\n  addUrlOptions(mergedOptions, url);\n\n  // LOGGING: options.log can be set to `null` to defeat logging\n  if (mergedOptions.log === null) {\n    mergedOptions.log = new NullLog();\n  }\n\n  mergeNestedFields(mergedOptions, globalOptions);\n  mergeNestedFields(mergedOptions, options);\n\n  return mergedOptions;\n}\n\n// Merge nested options objects\nfunction mergeNestedFields(mergedOptions, options) {\n  for (const key in options) {\n    // Check for nested options\n    // object in options => either no key in defaultOptions or object in defaultOptions\n    if (key in options) {\n      const value = options[key];\n      if (isPureObject(value) && isPureObject(mergedOptions[key])) {\n        mergedOptions[key] = {\n          ...mergedOptions[key],\n          ...options[key]\n        };\n      } else {\n        mergedOptions[key] = options[key];\n      }\n    }\n    // else: No need to merge nested opts, and the initial merge already copied over the nested options\n  }\n}\n\n// Harvest information from the url\n// TODO - baseUri should be a directory, i.e. remove file component from baseUri\n// TODO - extract extension?\n// TODO - extract query parameters?\n// TODO - should these be injected on context instead of options?\nfunction addUrlOptions(options, url) {\n  if (url && !('baseUri' in options)) {\n    options.baseUri = url;\n  }\n}\n"],"file":"merge-options.js"}