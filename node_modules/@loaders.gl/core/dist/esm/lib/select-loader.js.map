{"version":3,"sources":["../../../src/lib/select-loader.js"],"names":["getRegisteredLoaders","normalizeLoader","isFetchResponse","EXT_PATTERN","DATA_URL_PATTERN","selectLoader","loaders","url","data","nothrow","Array","isArray","loader","normalizeLoaders","replace","findLoaderByUrl","findLoaderByContentType","findLoaderByExamingInitialData","message","getFirstCharacters","Error","match","mimeType","findLoaderByMimeType","extension","findLoaderByExtension","mimeTypes","includes","toLowerCase","extensions","loaderExtension","headers","contentType","get","testText","ArrayBuffer","isView","testBinary","buffer","byteOffset","type","test","tests","some","magic","getMagicString","length","slice","arrayBuffer","byteLength","dataView","DataView","i","String","fromCharCode","getUint8"],"mappings":"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","sourcesContent":["import {getRegisteredLoaders} from './register-loaders';\nimport {normalizeLoader} from './loader-utils/normalize-loader';\nimport {isFetchResponse} from '../javascript-utils/is-type';\n\nconst EXT_PATTERN = /\\.([^.]+)$/;\nconst DATA_URL_PATTERN = /^data:(.*?)(;|,)/;\n\n// Find a loader that matches file extension and/or initial file content\n// Search the loaders array argument for a loader that matches url extension or initial data\n// Returns: a normalized loader\n\n// TODO - Need a variant that peeks at streams for parseInBatches\n// TODO - Detect multiple matching loaders? Use heuristics to grade matches?\n// TODO - Allow apps to pass context to disambiguate between multiple matches (e.g. multiple .json formats)?\n\n// eslint-disable-next-line complexity\nexport function selectLoader(loaders, url = '', data = null, {nothrow = false} = {}) {\n  url = url || '';\n\n  // if only a single loader was provided (not as array), force its use\n  // TODO - Should this behaviour be kept and documented?\n  if (loaders && !Array.isArray(loaders)) {\n    const loader = loaders;\n    normalizeLoader(loader);\n    return loader;\n  }\n\n  // If no loaders provided, get the registered loaders\n  loaders = [...(loaders || []), ...getRegisteredLoaders()];\n  normalizeLoaders(loaders);\n\n  url = url.replace(/\\?.*/, '');\n  let loader = findLoaderByUrl(loaders, url);\n  loader = loader || findLoaderByContentType(loaders, data);\n  loader = loader || findLoaderByExamingInitialData(loaders, data);\n\n  // no loader available\n  if (!loader) {\n    if (nothrow) {\n      return null;\n    }\n    let message = 'No valid loader found';\n    if (data) {\n      message += ` for data starting with \"${getFirstCharacters(data)}\"`;\n    }\n    if (url) {\n      message += ` for ${url}`;\n    }\n    throw new Error(message);\n  }\n\n  return loader;\n}\n\nfunction normalizeLoaders(loaders) {\n  for (const loader of loaders) {\n    normalizeLoader(loader);\n  }\n}\n\n// TODO - Would be nice to support http://example.com/file.glb?parameter=1\n// E.g: x = new URL('http://example.com/file.glb?load=1'; x.pathname\nfunction findLoaderByUrl(loaders, url) {\n  // Check for data url\n  let match = url.match(DATA_URL_PATTERN);\n  const mimeType = match && match[1];\n  if (mimeType) {\n    return findLoaderByMimeType(loaders, mimeType);\n  }\n  // Get extension\n  match = url.match(EXT_PATTERN);\n  const extension = match && match[1];\n  return extension && findLoaderByExtension(loaders, extension);\n}\n\nfunction findLoaderByMimeType(loaders, mimeType) {\n  for (const loader of loaders) {\n    if (loader.mimeTypes && loader.mimeTypes.includes(mimeType)) {\n      return loader;\n    }\n  }\n  return null;\n}\n\nfunction findLoaderByExtension(loaders, extension) {\n  extension = extension.toLowerCase();\n\n  for (const loader of loaders) {\n    for (const loaderExtension of loader.extensions) {\n      if (loaderExtension.toLowerCase() === extension) {\n        return loader;\n      }\n    }\n  }\n  return null;\n}\n\n// data should be a Response object\nfunction findLoaderByContentType(loaders, data) {\n  if (!data || !isFetchResponse(data) || !data.headers) {\n    return null;\n  }\n\n  const contentType = data.headers.get('content-type');\n  return findLoaderByMimeType(loaders, contentType);\n}\n\nfunction findLoaderByExamingInitialData(loaders, data) {\n  if (!data) {\n    return null;\n  }\n\n  for (const loader of loaders) {\n    if (typeof data === 'string') {\n      if (testText(data, loader)) {\n        return loader;\n      }\n    } else if (ArrayBuffer.isView(data)) {\n      // Typed Arrays can have offsets into underlying buffer\n      if (testBinary(data.buffer, data.byteOffset, loader)) {\n        return loader;\n      }\n    } else if (data instanceof ArrayBuffer) {\n      const byteOffset = 0;\n      if (testBinary(data, byteOffset, loader)) {\n        return loader;\n      }\n    }\n    // TODO Handle streaming case (requires creating a new AsyncIterator)\n  }\n  return null;\n}\n\nfunction testText(data, loader) {\n  return loader.testText && loader.testText(data);\n}\n\nfunction testBinary(data, byteOffset, loader) {\n  const type = Array.isArray(loader.test) ? 'array' : typeof loader.test;\n  switch (type) {\n    case 'function':\n      return loader.test(data, loader);\n\n    case 'string':\n    case 'array':\n      // Magic bytes check: If `loader.test` is a string or array of strings,\n      // check if binary data starts with one of those strings\n      const tests = Array.isArray(loader.test) ? loader.test : [loader.test];\n      return tests.some(test => {\n        const magic = getMagicString(data, byteOffset, test.length);\n        return test === magic;\n      });\n\n    default:\n      return false;\n  }\n}\n\nfunction getFirstCharacters(data, length = 5) {\n  if (typeof data === 'string') {\n    return data.slice(0, length);\n  } else if (ArrayBuffer.isView(data)) {\n    // Typed Arrays can have offsets into underlying buffer\n    return getMagicString(data.buffer, data.byteOffset, length);\n  } else if (data instanceof ArrayBuffer) {\n    const byteOffset = 0;\n    return getMagicString(data, byteOffset, length);\n  }\n  return '';\n}\n\nfunction getMagicString(arrayBuffer, byteOffset, length) {\n  if (arrayBuffer.byteLength <= byteOffset + length) {\n    return '';\n  }\n  const dataView = new DataView(arrayBuffer);\n  let magic = '';\n  for (let i = 0; i < length; i++) {\n    magic += String.fromCharCode(dataView.getUint8(byteOffset + i));\n  }\n  return magic;\n}\n"],"file":"select-loader.js"}