{"version":3,"sources":["../../../../src/lib/fetch/fetch-file.js"],"names":["resolvePath","isFileReadable","fetchFileReadable","fetchFile","url","options","fetch"],"mappings":";;AACA,SAAQA,WAAR,QAA0B,0BAA1B;AACA,SAAQC,cAAR,QAA6B,gCAA7B;AACA,OAAOC,iBAAP,MAA8B,sBAA9B;AAOA,gBAAsBC,SAAtB;AAAA;AAAA;;;0DAAO,iBAAyBC,GAAzB,EAA8BC,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,iBACDJ,cAAc,CAACG,GAAD,CADb;AAAA;AAAA;AAAA;;AAAA,6CAEIF,iBAAiB,CAACE,GAAD,EAAMC,OAAN,CAFrB;;AAAA;AAILD,YAAAA,GAAG,GAAGJ,WAAW,CAACI,GAAD,CAAjB;AAJK,6CAMEE,KAAK,CAACF,GAAD,EAAMC,OAAN,CANP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/* global fetch */\nimport {resolvePath} from '@loaders.gl/loader-utils';\nimport {isFileReadable} from '../../javascript-utils/is-type';\nimport fetchFileReadable from './fetch-file.browser';\n\n// As fetch but respects pathPrefix and file aliases\n// Reads file data from:\n// * data urls\n// * http/http urls\n// * File/Blob objects\nexport async function fetchFile(url, options) {\n  if (isFileReadable(url)) {\n    return fetchFileReadable(url, options);\n  }\n  url = resolvePath(url);\n  // TODO - SUPPORT reading from `File` objects\n  return fetch(url, options);\n}\n"],"file":"fetch-file.js"}