{"version":3,"sources":["../../../../src/lib/ion/ion.js"],"names":["CESIUM_ION_URL","getIonTilesetMetadata","accessToken","assetId","getIonAssets","assets","items","item","type","id","getIonAssetMetadata","ionAssetMetadata","url","headers","Authorization","fetch","response","ok","Error","json","metadata","tilesetInfo"],"mappings":"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","sourcesContent":["// Minimal support to load tilsets from the Cesium ION services\n\n/* global fetch */\nimport {_getErrorMessageFromResponse} from '@loaders.gl/core';\nimport assert from '../utils/assert';\n\nconst CESIUM_ION_URL = 'https://api.cesium.com/v1/assets';\n\n// Returns `{url, headers, type, attributions}` for an ion tileset\nexport async function getIonTilesetMetadata(accessToken, assetId) {\n  // Step 1, if no asset id, look for first 3DTILES asset associated with this token.\n  if (!assetId) {\n    const assets = await getIonAssets(accessToken);\n    for (const item of assets.items) {\n      if (item.type === '3DTILES') {\n        assetId = item.id;\n      }\n    }\n  }\n\n  // Step 2: Query metdatadata for this asset.\n  const ionAssetMetadata = await getIonAssetMetadata(accessToken, assetId);\n  const {type, url} = ionAssetMetadata;\n  assert(type === '3DTILES' && url);\n\n  // Prepare a headers object for fetch\n  ionAssetMetadata.headers = {\n    Authorization: `Bearer ${ionAssetMetadata.accessToken}`\n  };\n  return ionAssetMetadata;\n}\n\n// Return a list of all assets associated with accessToken\nexport async function getIonAssets(accessToken) {\n  assert(accessToken);\n  const url = CESIUM_ION_URL;\n  const headers = {Authorization: `Bearer ${accessToken}`};\n  const response = await fetch(url, {headers});\n  if (!response.ok) {\n    throw new Error(await _getErrorMessageFromResponse(response));\n  }\n  return await response.json();\n}\n\n// Return metadata for a specific asset assocated with token\nexport async function getIonAssetMetadata(accessToken, assetId) {\n  assert(accessToken, assetId);\n  const headers = {Authorization: `Bearer ${accessToken}`};\n\n  const url = `${CESIUM_ION_URL}/${assetId}`;\n  // https://cesium.com/docs/rest-api/#operation/getAsset\n  // Retrieves metadata information about a specific asset.\n  let response = await fetch(`${url}`, {headers});\n  if (!response.ok) {\n    throw new Error(await _getErrorMessageFromResponse(response));\n  }\n  let metadata = await response.json();\n\n  // https://cesium.com/docs/rest-api/#operation/getAssetEndpoint\n  // Retrieves information and credentials that allow you to access the tiled asset data for visualization and analysis.\n  response = await fetch(`${url}/endpoint`, {headers});\n  if (!response.ok) {\n    throw new Error(await _getErrorMessageFromResponse(response));\n  }\n  const tilesetInfo = await response.json();\n\n  // extract dataset description\n  metadata = {\n    ...metadata,\n    ...tilesetInfo\n  };\n\n  return metadata;\n}\n"],"file":"ion.js"}