{"version":3,"sources":["../../../../src/lib/tileset/tileset-3d.js"],"names":["Matrix4","Vector3","Ellipsoid","Stats","path","assert","RequestScheduler","getFrameState","calculateTransformProps","Tile3DHeader","Tileset3DTraverser","Tileset3DCache","TILES_TOTAL","TILES_IN_MEMORY","TILES_IN_VIEW","TILES_RENDERABLE","TILES_LOADED","TILES_LOADING","TILES_UNLOADED","TILES_LOAD_FAILED","POINTS_COUNT","TILES_GPU_MEMORY","WGS84_RADIUS_X","WGS84_RADIUS_Y","WGS84_RADIUS_Z","scratchVector","getZoom","boundingVolume","halfAxes","radius","width","height","getColumn","x","len","y","z","zoomX","Math","log2","zoomY","zoomZ","DEFAULT_OPTIONS","basePath","ellipsoid","WGS84","modelMatrix","throttleRequests","maximumScreenSpaceError","maximumMemoryUsage","dynamicScreenSpaceError","dynamicScreenSpaceErrorDensity","dynamicScreenSpaceErrorFactor","skipLevelOfDetail","baseScreenSpaceError","onTileLoad","onTileUnload","onTileError","tile","message","url","getQueryParamString","queryParams","queryParamStrings","Object","keys","key","push","length","join","Tileset3D","json","options","dirname","stats","id","_initializeStats","gpuMemoryUsageInBytes","geometricError","undefined","userData","_queryParams","_requestScheduler","_traverser","_cache","_processingQueue","selectedTiles","_emptyTiles","_requestedTiles","_selectedTilesToStyle","asset","credits","description","_root","_properties","_extensionsUsed","_gltfUpAxis","_loadTimestamp","_timeSinceLoad","_updatedVisibilityFrame","_extras","_allTilesAdditive","_hasMixedContent","_maximumScreenSpaceError","_maximumMemoryUsage","_tilesLoaded","_initialTilesLoaded","_readyPromise","Promise","resolve","_classificationType","classificationType","_ellipsoid","_dynamicScreenSpaceErrorComputedDensity","_initializeTileSet","_destroy","tilePath","isDataUrl","startsWith","extensionName","Boolean","indexOf","viewport","frameState","reset","traverse","root","values","requestedTiles","emptyTiles","_loadTile","_unloadTiles","tilesRenderable","pointsRenderable","contentAvailable","content","pointCount","get","count","frameNumber","trim","add","tileset","tileToAdd","_addTileToCache","tilesetJson","Error","version","v","tilesetVersion","attributions","properties","extensionsUsed","extras","_initializeTileHeaders","_calculateViewProps","center","console","warn","cartographicCenter","zoom","cartesianToCartographic","cartesianCenter","parentTileHeader","rootTile","children","_depth","stack","pop","incrementCount","_header","childHeader","childTile","parentTile","_destroySubtree","loadContent","loaded","decrementCount","toString","error","_content","byteLength","unloadContent","unloadTiles","_unloadTile","child","destroy","_destroyTile","unloadTile","promise","_checkReady","updateTransform","boundingSphere","value"],"mappings":";;;;;;;;;;AAGA,SAAQA,OAAR,EAAiBC,OAAjB,QAA+B,SAA/B;AACA,SAAQC,SAAR,QAAwB,qBAAxB;AACA,SAAQC,KAAR,QAAoB,UAApB;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,SAAQC,aAAR,QAA4B,2BAA5B;AAEA,SAAQC,uBAAR,QAAsC,2BAAtC;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,kBAAP,MAA+B,wBAA/B;AACA,OAAOC,cAAP,MAA2B,oBAA3B;AAGA,IAAMC,WAAW,GAAG,qBAApB;AACA,IAAMC,eAAe,GAAG,iBAAxB;AACA,IAAMC,aAAa,GAAG,eAAtB;AACA,IAAMC,gBAAgB,GAAG,iBAAzB;AACA,IAAMC,YAAY,GAAG,cAArB;AACA,IAAMC,aAAa,GAAG,eAAtB;AACA,IAAMC,cAAc,GAAG,gBAAvB;AACA,IAAMC,iBAAiB,GAAG,mBAA1B;AACA,IAAMC,YAAY,GAAG,QAArB;AACA,IAAMC,gBAAgB,GAAG,iBAAzB;AAGA,IAAMC,cAAc,GAAG,SAAvB;AACA,IAAMC,cAAc,GAAG,SAAvB;AACA,IAAMC,cAAc,GAAG,kBAAvB;AAEA,IAAMC,aAAa,GAAG,IAAIxB,OAAJ,EAAtB;;AAEA,SAASyB,OAAT,CAAiBC,cAAjB,EAAiC;AAAA,MACxBC,QADwB,GACWD,cADX,CACxBC,QADwB;AAAA,MACdC,MADc,GACWF,cADX,CACdE,MADc;AAAA,MACNC,KADM,GACWH,cADX,CACNG,KADM;AAAA,MACCC,MADD,GACWJ,cADX,CACCI,MADD;;AAG/B,MAAIH,QAAJ,EAAc;AAEZA,IAAAA,QAAQ,CAACI,SAAT,CAAmB,CAAnB,EAAsBP,aAAtB;AACA,QAAMQ,CAAC,GAAGR,aAAa,CAACS,GAAd,EAAV;AACAN,IAAAA,QAAQ,CAACI,SAAT,CAAmB,CAAnB,EAAsBP,aAAtB;AACA,QAAMU,CAAC,GAAGV,aAAa,CAACS,GAAd,EAAV;AACAN,IAAAA,QAAQ,CAACI,SAAT,CAAmB,CAAnB,EAAsBP,aAAtB;AACA,QAAMW,CAAC,GAAGX,aAAa,CAACS,GAAd,EAAV;AAEA,QAAMG,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUjB,cAAc,GAAGW,CAAjB,GAAqB,CAA/B,CAAd;AACA,QAAMO,KAAK,GAAGF,IAAI,CAACC,IAAL,CAAUhB,cAAc,GAAGY,CAAjB,GAAqB,CAA/B,CAAd;AACA,QAAMM,KAAK,GAAGH,IAAI,CAACC,IAAL,CAAUf,cAAc,GAAGY,CAAjB,GAAqB,CAA/B,CAAd;AACA,WAAO,CAACC,KAAK,GAAGG,KAAR,GAAgBC,KAAjB,IAA0B,CAAjC;AACD,GAbD,MAaO,IAAIZ,MAAJ,EAAY;AAEjB,WAAOS,IAAI,CAACC,IAAL,CAAUf,cAAc,GAAGK,MAA3B,CAAP;AACD,GAHM,MAGA,IAAIE,MAAM,IAAID,KAAd,EAAqB;AAE1B,QAAMO,MAAK,GAAGC,IAAI,CAACC,IAAL,CAAUjB,cAAc,GAAGQ,KAA3B,CAAd;;AACA,QAAMU,MAAK,GAAGF,IAAI,CAACC,IAAL,CAAUhB,cAAc,GAAGQ,MAA3B,CAAd;;AAEA,WAAO,CAACM,MAAK,GAAGG,MAAT,IAAkB,CAAzB;AACD;;AAED,SAAO,EAAP;AACD;;AAED,IAAME,eAAe,GAAG;AACtBC,EAAAA,QAAQ,EAAE,EADY;AAGtBC,EAAAA,SAAS,EAAE1C,SAAS,CAAC2C,KAHC;AAKtBC,EAAAA,WAAW,EAAE,IAAI9C,OAAJ,EALS;AAQtB+C,EAAAA,gBAAgB,EAAE,KARI;AAWtBC,EAAAA,uBAAuB,EAAE,CAXH;AAYtBC,EAAAA,kBAAkB,EAAE,EAZE;AAetBC,EAAAA,uBAAuB,EAAE,KAfH;AAgBtBC,EAAAA,8BAA8B,EAAE,OAhBV;AAiBtBC,EAAAA,6BAA6B,EAAE,GAjBT;AAoBtBC,EAAAA,iBAAiB,EAAE,KApBG;AAsBtBC,EAAAA,oBAAoB,EAAE,IAtBA;AAwBtBC,EAAAA,UAAU,EAAE,sBAAM,CAAE,CAxBE;AAyBtBC,EAAAA,YAAY,EAAE,wBAAM,CAAE,CAzBA;AA0BtBC,EAAAA,WAAW,EAAE,qBAACC,IAAD,EAAOC,OAAP,EAAgBC,GAAhB,EAAwB,CAAE;AA1BjB,CAAxB;;AA6BA,SAASC,mBAAT,CAA6BC,WAA7B,EAA0C;AACxC,MAAMC,iBAAiB,GAAG,EAA1B;;AACA,kCAAkBC,MAAM,CAACC,IAAP,CAAYH,WAAZ,CAAlB,kCAA4C;AAAvC,QAAMI,GAAG,mBAAT;AACHH,IAAAA,iBAAiB,CAACI,IAAlB,WAA0BD,GAA1B,cAAiCJ,WAAW,CAACI,GAAD,CAA5C;AACD;;AACD,UAAQH,iBAAiB,CAACK,MAA1B;AACE,SAAK,CAAL;AACE,aAAO,EAAP;;AACF,SAAK,CAAL;AACE,wBAAWL,iBAAiB,CAAC,CAAD,CAA5B;;AACF;AACE,wBAAWA,iBAAiB,CAACM,IAAlB,CAAuB,GAAvB,CAAX;AANJ;AAQD;;IAEoBC,S;AAEnB,qBAAYC,IAAZ,EAAkBX,GAAlB,EAAqC;AAAA,QAAdY,OAAc,uEAAJ,EAAI;;AAAA;;AACnCnE,IAAAA,MAAM,CAACkE,IAAD,CAAN;AAGA,SAAKC,OAAL,qBAAmB9B,eAAnB,MAAuC8B,OAAvC;AACA,SAAKZ,GAAL,GAAWA,GAAX;AACA,SAAKjB,QAAL,GAAgBvC,IAAI,CAACqE,OAAL,CAAab,GAAb,CAAhB;AACA,SAAKd,WAAL,GAAmB,KAAK0B,OAAL,CAAa1B,WAAhC;AACA,SAAK4B,KAAL,GAAa,IAAIvE,KAAJ,CAAU;AAACwE,MAAAA,EAAE,EAAEf;AAAL,KAAV,CAAb;;AACA,SAAKgB,gBAAL;;AAEA,SAAKC,qBAAL,GAA6B,CAA7B;AACA,SAAKC,cAAL,GAAsBC,SAAtB;AACA,SAAKC,QAAL,GAAgB,EAAhB;AAGA,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKC,iBAAL,GAAyB,IAAI5E,gBAAJ,CAAqB;AAC5CyC,MAAAA,gBAAgB,EAAE,KAAKyB,OAAL,CAAazB;AADa,KAArB,CAAzB;AAGA,SAAKoC,UAAL,GAAkB,IAAIzE,kBAAJ,EAAlB;AACA,SAAK0E,MAAL,GAAc,IAAIzE,cAAJ,EAAd;AAGA,SAAK0E,gBAAL,GAAwB,EAAxB;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACA,SAAKC,qBAAL,GAA6B,EAA7B;AAGA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,WAAL,GAAmB,KAAKpB,OAAL,CAAaoB,WAAhC;AAGA,SAAKC,KAAL,GAAad,SAAb;AACA,SAAKe,WAAL,GAAmBf,SAAnB;AACA,SAAKgB,eAAL,GAAuBhB,SAAvB;AACA,SAAKiB,WAAL,GAAmBjB,SAAnB;AAEA,SAAKkB,cAAL,GAAsBlB,SAAtB;AACA,SAAKmB,cAAL,GAAsB,GAAtB;AACA,SAAKC,uBAAL,GAA+B,CAA/B;AACA,SAAKC,OAAL,GAAerB,SAAf;AAEA,SAAKsB,iBAAL,GAAyB,IAAzB;AACA,SAAKC,gBAAL,GAAwB,KAAxB;AACA,SAAKC,wBAAL,GAAgC,KAAK/B,OAAL,CAAaxB,uBAA7C;AACA,SAAKwD,mBAAL,GAA2B,KAAKhC,OAAL,CAAavB,kBAAxC;AAEA,SAAKwD,YAAL,GAAoB,KAApB;AACA,SAAKC,mBAAL,GAA2B,KAA3B;AAEA,SAAKC,aAAL,GAAqBC,OAAO,CAACC,OAAR,EAArB;AAEA,SAAKC,mBAAL,GAA2B,KAAKtC,OAAL,CAAauC,kBAAxC;AACA,SAAKC,UAAL,GAAkB,KAAKxC,OAAL,CAAa5B,SAA/B;AAEA,SAAKqE,uCAAL,GAA+C,GAA/C;;AAEA,SAAKC,kBAAL,CAAwB3C,IAAxB,EAA8B,KAAKC,OAAnC;AACD;;;;8BAES;AACR,WAAK2C,QAAL;AACD;;;+BAyEUC,Q,EAAUzE,Q,EAAU;AAC7B,UAAM0E,SAAS,GAAG,SAAZA,SAAY,CAAAzD,GAAG;AAAA,eAAIA,GAAG,CAAC0D,UAAJ,CAAe,OAAf,CAAJ;AAAA,OAArB;;AACA,aAAOD,SAAS,CAACD,QAAD,CAAT,GACHA,QADG,aAEAzE,QAAQ,IAAI,KAAKA,QAFjB,cAE6ByE,QAF7B,SAEwC,KAAKtD,WAF7C,CAAP;AAGD;;;iCAGYyD,a,EAAe;AAC1B,aAAOC,OAAO,CAAC,KAAKzB,eAAL,IAAwB,KAAKA,eAAL,CAAqB0B,OAArB,CAA6BF,aAA7B,IAA8C,CAAC,CAAxE,CAAd;AACD;;;2BAEMG,Q,EAAU;AACf,UAAIC,UAAJ;;AACA,UAAI,iBAAiBD,QAArB,EAA+B;AAI7BC,QAAAA,UAAU,GAAGD,QAAb;AACD,OALD,MAKO;AAELC,QAAAA,UAAU,GAAGpH,aAAa,CAACmH,QAAD,CAA1B;AACD;;AAED,WAAKvB,uBAAL;;AACA,WAAKf,MAAL,CAAYwC,KAAZ;;AAEA,WAAKzC,UAAL,CAAgB0C,QAAhB,CAAyB,KAAKC,IAA9B,EAAoCH,UAApC,EAAgD,KAAKnD,OAArD;;AACA,WAAKgB,eAAL,GAAuBxB,MAAM,CAAC+D,MAAP,CAAc,KAAK5C,UAAL,CAAgB6C,cAA9B,CAAvB;AACA,WAAK1C,aAAL,GAAqBtB,MAAM,CAAC+D,MAAP,CAAc,KAAK5C,UAAL,CAAgBG,aAA9B,CAArB;AACA,WAAKC,WAAL,GAAmBvB,MAAM,CAAC+D,MAAP,CAAc,KAAK5C,UAAL,CAAgB8C,UAA9B,CAAnB;AAEA,UAAMD,cAAc,GAAG,KAAKxC,eAA5B;AApBe;AAAA;AAAA;;AAAA;AAwBf,6BAAmBwC,cAAnB,8HAAmC;AAAA,cAAxBtE,IAAwB;;AACjC,eAAKwE,SAAL,CAAexE,IAAf,EAAqBiE,UAArB;AACD;AA1Bc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA4Bf,WAAKQ,YAAL;;AAEA,UAAIC,eAAe,GAAG,CAAtB;AACA,UAAIC,gBAAgB,GAAG,CAAvB;AA/Be;AAAA;AAAA;;AAAA;AAgCf,8BAAmB,KAAK/C,aAAxB,mIAAuC;AAAA,cAA5B5B,KAA4B;;AACrC,cAAIA,KAAI,CAAC4E,gBAAT,EAA2B;AACzBF,YAAAA,eAAe;;AACf,gBAAI1E,KAAI,CAAC6E,OAAL,CAAaC,UAAjB,EAA6B;AAC3BH,cAAAA,gBAAgB,IAAI3E,KAAI,CAAC6E,OAAL,CAAaC,UAAjC;AACD;AACF;AACF;AAvCc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAyCf,WAAK9D,KAAL,CAAW+D,GAAX,CAAe3H,aAAf,EAA8B4H,KAA9B,GAAsC,KAAKpD,aAAL,CAAmBlB,MAAzD;AACA,WAAKM,KAAL,CAAW+D,GAAX,CAAe1H,gBAAf,EAAiC2H,KAAjC,GAAyCN,eAAzC;AACA,WAAK1D,KAAL,CAAW+D,GAAX,CAAerH,YAAf,EAA6BsH,KAA7B,GAAqCL,gBAArC;AAEA,aAAOV,UAAU,CAACgB,WAAlB;AACD;;;sCAKiB;AAChB,WAAKvD,MAAL,CAAYwD,IAAZ;AACD;;;mCAGclF,I,EAAM;AACnB,WAAK0B,MAAL,CAAYyD,GAAZ,CAAgB,IAAhB,EAAsBnF,IAAtB,EAA4B,UAACoF,OAAD,EAAUC,SAAV;AAAA,eAAwBD,OAAO,CAACE,eAAR,CAAwBD,SAAxB,CAAxB;AAAA,OAA5B;AACD;;;uCAKkBE,W,EAAazE,O,EAAS;AACvC,WAAKkB,KAAL,GAAauD,WAAW,CAACvD,KAAzB;;AACA,UAAI,CAAC,KAAKA,KAAV,EAAiB;AACf,cAAM,IAAIwD,KAAJ,CAAU,sCAAV,CAAN;AACD;;AACD,UAAI,KAAKxD,KAAL,CAAWyD,OAAX,KAAuB,KAAvB,IAAgC,KAAKzD,KAAL,CAAWyD,OAAX,KAAuB,KAA3D,EAAkE;AAChE,cAAM,IAAID,KAAJ,CAAU,kDAAV,CAAN;AACD;;AAID,UAAI,oBAAoB,KAAKxD,KAA7B,EAAoC;AAClC,aAAKT,YAAL,CAAkBmE,CAAlB,GAAsB,KAAK1D,KAAL,CAAW2D,cAAjC;AACD;;AAGD,WAAK1D,OAAL,GAAe;AACb2D,QAAAA,YAAY,EAAE9E,OAAO,CAAC8E,YAAR,IAAwB;AADzB,OAAf;AAIA,WAAKxD,WAAL,GAAmBmD,WAAW,CAACM,UAA/B;AACA,WAAKzE,cAAL,GAAsBmE,WAAW,CAACnE,cAAlC;AACA,WAAKiB,eAAL,GAAuBkD,WAAW,CAACO,cAAnC;AACA,WAAKpD,OAAL,GAAe6C,WAAW,CAACQ,MAA3B;AAOA,WAAK5D,KAAL,GAAa,KAAK6D,sBAAL,CAA4BT,WAA5B,EAAyC,IAAzC,EAA+C,KAAKtG,QAApD,CAAb;;AAGA,WAAKgH,mBAAL;AA0BD;;;0CAGqB;AACpB,UAAM7B,IAAI,GAAG,KAAKjC,KAAlB;AADoB,UAEb+D,MAFa,GAEH9B,IAAI,CAACnG,cAFF,CAEbiI,MAFa;;AAIpB,UAAI,CAACA,MAAL,EAAa;AAEXC,QAAAA,OAAO,CAACC,IAAR,CAAa,iDAAb;AACA,aAAKC,kBAAL,GAA0B,IAAI9J,OAAJ,EAA1B;AACA,aAAK+J,IAAL,GAAY,EAAZ;AACA;AACD;;AACD,WAAKD,kBAAL,GAA0B7J,SAAS,CAAC2C,KAAV,CAAgBoH,uBAAhB,CAAwCL,MAAxC,EAAgD,IAAI3J,OAAJ,EAAhD,CAA1B;AACA,WAAKiK,eAAL,GAAuBN,MAAvB;AACA,WAAKI,IAAL,GAAYtI,OAAO,CAACoG,IAAI,CAACnG,cAAN,CAAnB;AACD;;;uCAEkB;AACjB,WAAK+C,KAAL,CAAW+D,GAAX,CAAe7H,WAAf;AACA,WAAK8D,KAAL,CAAW+D,GAAX,CAAexH,aAAf;AACA,WAAKyD,KAAL,CAAW+D,GAAX,CAAe5H,eAAf;AACA,WAAK6D,KAAL,CAAW+D,GAAX,CAAe3H,aAAf;AACA,WAAK4D,KAAL,CAAW+D,GAAX,CAAe1H,gBAAf;AACA,WAAK2D,KAAL,CAAW+D,GAAX,CAAezH,YAAf;AACA,WAAK0D,KAAL,CAAW+D,GAAX,CAAevH,cAAf;AACA,WAAKwD,KAAL,CAAW+D,GAAX,CAAetH,iBAAf;AACA,WAAKuD,KAAL,CAAW+D,GAAX,CAAerH,YAAf,EAA6B,QAA7B;AACA,WAAKsD,KAAL,CAAW+D,GAAX,CAAepH,gBAAf,EAAiC,QAAjC;AACD;;;2CAIsB4H,W,EAAakB,gB,EAAkBxH,Q,EAAU;AAG9D,UAAMyH,QAAQ,GAAG,IAAI3J,YAAJ,CAAiB,IAAjB,EAAuBwI,WAAW,CAACnB,IAAnC,EAAyCqC,gBAAzC,EAA2DxH,QAA3D,CAAjB;;AAIA,UAAIwH,gBAAJ,EAAsB;AACpBA,QAAAA,gBAAgB,CAACE,QAAjB,CAA0BlG,IAA1B,CAA+BiG,QAA/B;AACAA,QAAAA,QAAQ,CAACE,MAAT,GAAkBH,gBAAgB,CAACG,MAAjB,GAA0B,CAA5C;AACD;;AAED,UAAMC,KAAK,GAAG,EAAd;AACAA,MAAAA,KAAK,CAACpG,IAAN,CAAWiG,QAAX;;AAEA,aAAOG,KAAK,CAACnG,MAAN,GAAe,CAAtB,EAAyB;AACvB,YAAMV,IAAI,GAAG6G,KAAK,CAACC,GAAN,EAAb;AACA,aAAK9F,KAAL,CAAW+D,GAAX,CAAe7H,WAAf,EAA4B6J,cAA5B;AAGA,YAAMJ,QAAQ,GAAG3G,IAAI,CAACgH,OAAL,CAAaL,QAAb,IAAyB,EAA1C;AALuB;AAAA;AAAA;;AAAA;AAMvB,gCAA0BA,QAA1B,mIAAoC;AAAA,gBAAzBM,WAAyB;AAClC,gBAAMC,SAAS,GAAG,IAAInK,YAAJ,CAAiB,IAAjB,EAAuBkK,WAAvB,EAAoCjH,IAApC,EAA0Cf,QAA1C,CAAlB;AACAe,YAAAA,IAAI,CAAC2G,QAAL,CAAclG,IAAd,CAAmByG,SAAnB;AACAA,YAAAA,SAAS,CAACN,MAAV,GAAmB5G,IAAI,CAAC4G,MAAL,GAAc,CAAjC;AACAC,YAAAA,KAAK,CAACpG,IAAN,CAAWyG,SAAX;AACD;AAXsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBxB;;AAED,aAAOR,QAAP;AACD;;;wCAEmBS,U,EAAY;AAC9B,WAAKC,eAAL,CAAqBD,UAArB;AACD;;;;mFAEenH,I,EAAMiE,U;;;;;;AAWpB,qBAAKjD,KAAL,CAAW+D,GAAX,CAAexH,aAAf,EAA8BwJ,cAA9B;;;uBAEiB/G,IAAI,CAACqH,WAAL,CAAiBpD,UAAjB,C;;;AAAfqD,gBAAAA,M;;;;;;;AAEA,qBAAKtG,KAAL,CAAW+D,GAAX,CAAexH,aAAf,EAA8BgK,cAA9B;AACA,qBAAKvG,KAAL,CAAW+D,GAAX,CAAetH,iBAAf,EAAkCsJ,cAAlC;AAEM9G,gBAAAA,O,GAAU,YAAMA,OAAN,IAAiB,YAAMuH,QAAN,E;AAC3BtH,gBAAAA,G,GAAMF,IAAI,CAACE,G;AAEjBiG,gBAAAA,OAAO,CAACsB,KAAR,qCAA2CzH,IAAI,CAACE,GAAhD,cAAuDD,OAAvD;AACA,qBAAKa,OAAL,CAAaf,WAAb,CAAyBC,IAAzB,EAA+BC,OAA/B,EAAwCC,GAAxC;;;;AAGF,qBAAKc,KAAL,CAAW+D,GAAX,CAAexH,aAAf,EAA8BgK,cAA9B;;oBAEKD,M;;;;;;;;AAKL,oBAAItH,IAAI,IAAIA,IAAI,CAAC0H,QAAjB,EAA2B;AACzB5K,kBAAAA,uBAAuB,CAACkD,IAAD,EAAOA,IAAI,CAAC0H,QAAZ,CAAvB;AACD;;AAED,qBAAK5G,OAAL,CAAajB,UAAb,CAAwBG,IAAxB;;;;;;;;;;;;;;;;;;oCAGcA,I,EAAM;AACpB,WAAKgB,KAAL,CAAW+D,GAAX,CAAezH,YAAf,EAA6ByJ,cAA7B;AACA,WAAK/F,KAAL,CAAW+D,GAAX,CAAe5H,eAAf,EAAgC4J,cAAhC;AAGA,WAAK5F,qBAAL,IAA8BnB,IAAI,CAAC0H,QAAL,CAAcC,UAAd,IAA4B,CAA1D;AACA,WAAK3G,KAAL,CAAW+D,GAAX,CAAepH,gBAAf,EAAiCqH,KAAjC,GAAyC,KAAK7D,qBAA9C;AACD;;;gCAEWnB,I,EAAM;AAChB,WAAKgB,KAAL,CAAW+D,GAAX,CAAe5H,eAAf,EAAgCoK,cAAhC;AACA,WAAKvG,KAAL,CAAW+D,GAAX,CAAevH,cAAf,EAA+BuJ,cAA/B;AAEA,WAAK5F,qBAAL,IAA8BnB,IAAI,CAAC0H,QAAL,CAAcC,UAAd,IAA4B,CAA1D;AACA,WAAK3G,KAAL,CAAW+D,GAAX,CAAepH,gBAAf,EAAiCqH,KAAjC,GAAyC,KAAK7D,qBAA9C;AAEA,WAAKL,OAAL,CAAahB,YAAb,CAA0BE,IAA1B;AACAA,MAAAA,IAAI,CAAC4H,aAAL;AACD;;;mCAEc;AACb,WAAKlG,MAAL,CAAYmG,WAAZ,CAAwB,IAAxB,EAA8B,UAACzC,OAAD,EAAUpF,IAAV;AAAA,eAAmBoF,OAAO,CAAC0C,WAAR,CAAoB9H,IAApB,CAAnB;AAAA,OAA9B;AACD;;;+BAGU;AACT,UAAM6G,KAAK,GAAG,EAAd;;AACA,UAAI,KAAK1E,KAAT,EAAgB;AACd0E,QAAAA,KAAK,CAACpG,IAAN,CAAW,KAAK0B,KAAhB;AACD;;AACD,aAAO0E,KAAK,CAACnG,MAAN,GAAe,CAAtB,EAAyB;AACvB,YAAMV,IAAI,GAAG6G,KAAK,CAACC,GAAN,EAAb;AADuB;AAAA;AAAA;;AAAA;AAGvB,gCAAoB9G,IAAI,CAAC2G,QAAzB,mIAAmC;AAAA,gBAAxBoB,KAAwB;AACjClB,YAAAA,KAAK,CAACpG,IAAN,CAAWsH,KAAX;AACD;AALsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQvB/H,QAAAA,IAAI,CAACgI,OAAL;AACD;;AACD,WAAK7F,KAAL,GAAa,IAAb;AACD;;;oCAGenC,I,EAAM;AACpB,UAAMoE,IAAI,GAAGpE,IAAb;AACA,UAAM6G,KAAK,GAAG,EAAd;AACAA,MAAAA,KAAK,CAACpG,IAAN,CAAW2D,IAAX;;AACA,aAAOyC,KAAK,CAACnG,MAAN,GAAe,CAAtB,EAAyB;AACvBV,QAAAA,IAAI,GAAG6G,KAAK,CAACC,GAAN,EAAP;AADuB;AAAA;AAAA;;AAAA;AAEvB,gCAAoB9G,IAAI,CAAC2G,QAAzB,mIAAmC;AAAA,gBAAxBoB,KAAwB;AACjClB,YAAAA,KAAK,CAACpG,IAAN,CAAWsH,KAAX;AACD;AAJsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKvB,YAAI/H,IAAI,KAAKoE,IAAb,EAAmB;AACjB,eAAK6D,YAAL,CAAkBjI,IAAlB;AACD;AACF;;AACDoE,MAAAA,IAAI,CAACuC,QAAL,GAAgB,EAAhB;AACD;;;iCAEY3G,I,EAAM;AACjB,WAAK0B,MAAL,CAAYwG,UAAZ,CAAuB,IAAvB,EAA6BlI,IAA7B;;AACA,WAAK8H,WAAL,CAAiB9H,IAAjB;;AACAA,MAAAA,IAAI,CAACgI,OAAL;AACD;;;wBA3Xe;AACd,aAAO,KAAKvG,UAAZ;AACD;;;wBAGgB;AACf,aAAO,KAAKW,WAAZ;AACD;;;wBAGW;AACV,aAAO0B,OAAO,CAAC,KAAK3B,KAAN,CAAd;AACD;;;wBAIkB;AACjB,aAAO,KAAKc,aAAL,CAAmBkF,OAA1B;AACD;;;wBAGiB;AAChB,aAAO,KAAKpF,YAAZ;AACD;;;wBAEiB;AAChB,aAAO5C,mBAAmB,CAAC,KAAKoB,YAAN,CAA1B;AACD;;;wBAGU;AACT,aAAO,KAAKY,KAAZ;AACD;;;wBAGoB;AACnB,WAAKiG,WAAL;;AACA,WAAKjG,KAAL,CAAWkG,eAAX,CAA2B,KAAKjJ,WAAhC;;AACA,aAAO,KAAK+C,KAAL,CAAWmG,cAAlB;AACD;;;wBAGmB;AAClB,aAAO,KAAK9F,cAAZ;AACD;;;wBAIwB;AACvB,aAAO,KAAKM,mBAAZ;AACD,K;sBAEsByF,K,EAAO;AAC5B5L,MAAAA,MAAM,CAAC4L,KAAK,GAAG,CAAT,CAAN;AACA,WAAKzF,mBAAL,GAA2ByF,KAA3B;AACD;;;wBAGe;AACd,aAAO,KAAKzH,OAAL,CAAa5B,SAApB;AACD;;;wBAGY;AACX,aAAO,KAAKwD,OAAZ;AACD;;;;;;SA3IkB9B,S","sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\nimport {Matrix4, Vector3} from 'math.gl';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {Stats} from 'probe.gl';\nimport {path} from '@loaders.gl/core';\n\nimport assert from '../utils/assert';\nimport RequestScheduler from '../request-utils/request-scheduler';\nimport {getFrameState} from './helpers/get-frame-state';\n\nimport {calculateTransformProps} from './helpers/transform-utils';\nimport Tile3DHeader from './tile-3d-header';\nimport Tileset3DTraverser from './tileset-3d-traverser';\nimport Tileset3DCache from './tileset-3d-cache';\n\n// Tracked Stats\nconst TILES_TOTAL = 'Tiles In Tileset(s)';\nconst TILES_IN_MEMORY = 'Tiles In Memory';\nconst TILES_IN_VIEW = 'Tiles In View';\nconst TILES_RENDERABLE = 'Tiles To Render';\nconst TILES_LOADED = 'Tiles Loaded';\nconst TILES_LOADING = 'Tiles Loading';\nconst TILES_UNLOADED = 'Tiles Unloaded';\nconst TILES_LOAD_FAILED = 'Failed Tile Loads';\nconst POINTS_COUNT = 'Points';\nconst TILES_GPU_MEMORY = 'Tile Memory Use';\n\n// TODO move to Math library?\nconst WGS84_RADIUS_X = 6378137.0;\nconst WGS84_RADIUS_Y = 6378137.0;\nconst WGS84_RADIUS_Z = 6356752.3142451793;\n\nconst scratchVector = new Vector3();\n\nfunction getZoom(boundingVolume) {\n  const {halfAxes, radius, width, height} = boundingVolume;\n\n  if (halfAxes) {\n    // OrientedBoundingBox\n    halfAxes.getColumn(0, scratchVector);\n    const x = scratchVector.len();\n    halfAxes.getColumn(1, scratchVector);\n    const y = scratchVector.len();\n    halfAxes.getColumn(2, scratchVector);\n    const z = scratchVector.len();\n\n    const zoomX = Math.log2(WGS84_RADIUS_X / x / 2);\n    const zoomY = Math.log2(WGS84_RADIUS_Y / y / 2);\n    const zoomZ = Math.log2(WGS84_RADIUS_Z / z / 2);\n    return (zoomX + zoomY + zoomZ) / 3;\n  } else if (radius) {\n    // BoundingSphere\n    return Math.log2(WGS84_RADIUS_Z / radius);\n  } else if (height && width) {\n    // BoundingRectangle\n    const zoomX = Math.log2(WGS84_RADIUS_X / width);\n    const zoomY = Math.log2(WGS84_RADIUS_Y / height);\n\n    return (zoomX + zoomY) / 2;\n  }\n\n  return 18;\n}\n\nconst DEFAULT_OPTIONS = {\n  basePath: '',\n\n  ellipsoid: Ellipsoid.WGS84,\n  // A 4x4 transformation matrix this transforms the entire tileset.\n  modelMatrix: new Matrix4(),\n\n  // Set to true to enable experimental request throttling, for improved performance\n  throttleRequests: false,\n\n  // The maximum screen space error used to drive level of detail refinement.\n  maximumScreenSpaceError: 8,\n  maximumMemoryUsage: 32,\n\n  // default props\n  dynamicScreenSpaceError: false,\n  dynamicScreenSpaceErrorDensity: 0.00278,\n  dynamicScreenSpaceErrorFactor: 4.0,\n\n  // Optimization option. Determines if level of detail skipping should be applied during the traversal.\n  skipLevelOfDetail: false,\n  // The screen space error this must be reached before skipping levels of detail.\n  baseScreenSpaceError: 1024,\n\n  onTileLoad: () => {}, // Indicates this a tile's content was loaded\n  onTileUnload: () => {}, // Indicates this a tile's content was unloaded\n  onTileError: (tile, message, url) => {}\n};\n\nfunction getQueryParamString(queryParams) {\n  const queryParamStrings = [];\n  for (const key of Object.keys(queryParams)) {\n    queryParamStrings.push(`${key}=${queryParams[key]}`);\n  }\n  switch (queryParamStrings.length) {\n    case 0:\n      return '';\n    case 1:\n      return `?${queryParamStrings[0]}`;\n    default:\n      return `?${queryParamStrings.join('&')}`;\n  }\n}\n\nexport default class Tileset3D {\n  // eslint-disable-next-line max-statements\n  constructor(json, url, options = {}) {\n    assert(json);\n\n    // PUBLIC MEMBERS\n    this.options = {...DEFAULT_OPTIONS, ...options};\n    this.url = url; // The url to a tileset JSON file.\n    this.basePath = path.dirname(url); // base path that non-absolute paths in tileset are relative to.\n    this.modelMatrix = this.options.modelMatrix;\n    this.stats = new Stats({id: url});\n    this._initializeStats();\n\n    this.gpuMemoryUsageInBytes = 0; // The total amount of GPU memory in bytes used by the tileset.\n    this.geometricError = undefined; // Geometric error when the tree is not rendered at all\n    this.userData = {};\n\n    // HELPER OBJECTS\n    this._queryParams = {};\n    this._requestScheduler = new RequestScheduler({\n      throttleRequests: this.options.throttleRequests\n    });\n    this._traverser = new Tileset3DTraverser();\n    this._cache = new Tileset3DCache();\n\n    // HOLD TRAVERSAL RESULTS\n    this._processingQueue = [];\n    this.selectedTiles = [];\n    this._emptyTiles = [];\n    this._requestedTiles = [];\n    this._selectedTilesToStyle = [];\n\n    // Metadata for the entire tileset\n    this.asset = {};\n    this.credits = {};\n    this.description = this.options.description;\n\n    // EXTRACTED FROM TILESET\n    this._root = undefined;\n    this._properties = undefined; // Metadata for per-model/point/etc properties\n    this._extensionsUsed = undefined;\n    this._gltfUpAxis = undefined;\n\n    this._loadTimestamp = undefined;\n    this._timeSinceLoad = 0.0;\n    this._updatedVisibilityFrame = 0;\n    this._extras = undefined;\n\n    this._allTilesAdditive = true;\n    this._hasMixedContent = false;\n    this._maximumScreenSpaceError = this.options.maximumScreenSpaceError;\n    this._maximumMemoryUsage = this.options.maximumMemoryUsage;\n\n    this._tilesLoaded = false;\n    this._initialTilesLoaded = false;\n\n    this._readyPromise = Promise.resolve();\n\n    this._classificationType = this.options.classificationType;\n    this._ellipsoid = this.options.ellipsoid;\n\n    this._dynamicScreenSpaceErrorComputedDensity = 0.0; // Updated based on the camera position and direction\n\n    this._initializeTileSet(json, this.options);\n  }\n\n  destroy() {\n    this._destroy();\n  }\n\n  // Gets the tileset's asset object property, which contains metadata about the tileset.\n  // get asset() {\n  //   return this._asset;\n  // }\n  get traverser() {\n    return this._traverser;\n  }\n\n  // Gets the tileset's properties dictionary object, which contains metadata about per-feature properties.\n  get properties() {\n    return this._properties;\n  }\n\n  // When <code>true</code>, the tileset's root tile is loaded and the tileset is ready to render.\n  get ready() {\n    return Boolean(this._root);\n  }\n\n  // Gets the promise this will be resolved when the tileset's root tile is loaded and the tileset is ready to render.\n  // This promise is resolved at the end of the frame before the first frame the tileset is rendered in.\n  get readyPromise() {\n    return this._readyPromise.promise;\n  }\n\n  // When <code>true</code>, all tiles this meet the screen space error this frame are loaded.\n  get tilesLoaded() {\n    return this._tilesLoaded;\n  }\n\n  get queryParams() {\n    return getQueryParamString(this._queryParams);\n  }\n\n  // The root tile header.\n  get root() {\n    return this._root;\n  }\n\n  // The tileset's bounding sphere.\n  get boundingSphere() {\n    this._checkReady();\n    this._root.updateTransform(this.modelMatrix);\n    return this._root.boundingSphere;\n  }\n\n  // Returns the time, in milliseconds, since the tileset was loaded and first updated.\n  get timeSinceLoad() {\n    return this._timeSinceLoad;\n  }\n\n  // The maximum amount of GPU memory (in MB) that may be used to cache tiles.\n  // Tiles not in view are unloaded to enforce this.\n  get maximumMemoryUsage() {\n    return this._maximumMemoryUsage;\n  }\n\n  set maximumMemoryUsage(value) {\n    assert(value > 0);\n    this._maximumMemoryUsage = value;\n  }\n\n  // Gets an ellipsoid describing the shape of the globe.\n  get ellipsoid() {\n    return this.options.ellipsoid;\n  }\n\n  // Returns the extras property at the top of the tileset JSON (application specific metadata).\n  get extras() {\n    return this._extras;\n  }\n\n  getTileUrl(tilePath, basePath) {\n    const isDataUrl = url => url.startsWith('data:');\n    return isDataUrl(tilePath)\n      ? tilePath\n      : `${basePath || this.basePath}/${tilePath}${this.queryParams}`;\n  }\n\n  // true if the tileset JSON file lists the extension in extensionsUsed\n  hasExtension(extensionName) {\n    return Boolean(this._extensionsUsed && this._extensionsUsed.indexOf(extensionName) > -1);\n  }\n\n  update(viewport) {\n    let frameState;\n    if ('frameNumber' in viewport) {\n      // backward compatibility\n      // this is using old API, input is `frameState` object\n      // old API: update(frameState)\n      frameState = viewport;\n    } else {\n      // TODO deprecated in v8.x\n      frameState = getFrameState(viewport);\n    }\n\n    this._updatedVisibilityFrame++; // TODO: only update when camera or culling volume from last update moves (could be render camera change or prefetch camera)\n    this._cache.reset();\n\n    this._traverser.traverse(this.root, frameState, this.options);\n    this._requestedTiles = Object.values(this._traverser.requestedTiles);\n    this.selectedTiles = Object.values(this._traverser.selectedTiles);\n    this._emptyTiles = Object.values(this._traverser.emptyTiles);\n\n    const requestedTiles = this._requestedTiles;\n    // Sort requests by priority before making any requests.\n    // This makes it less likely this requests will be cancelled after being issued.\n    // requestedTiles.sort((a, b) => a._priority - b._priority);\n    for (const tile of requestedTiles) {\n      this._loadTile(tile, frameState);\n    }\n\n    this._unloadTiles();\n\n    let tilesRenderable = 0;\n    let pointsRenderable = 0;\n    for (const tile of this.selectedTiles) {\n      if (tile.contentAvailable) {\n        tilesRenderable++;\n        if (tile.content.pointCount) {\n          pointsRenderable += tile.content.pointCount;\n        }\n      }\n    }\n\n    this.stats.get(TILES_IN_VIEW).count = this.selectedTiles.length;\n    this.stats.get(TILES_RENDERABLE).count = tilesRenderable;\n    this.stats.get(POINTS_COUNT).count = pointsRenderable;\n\n    return frameState.frameNumber;\n  }\n\n  // TODO - why are these public methods? For testing?\n\n  // Unloads all tiles this weren't selected the previous frame.  This can be used to\n  trimLoadedTiles() {\n    this._cache.trim();\n  }\n\n  // Add to the tile cache. Previously expired tiles are already in the cache and won't get re-added.\n  addTileToCache(tile) {\n    this._cache.add(this, tile, (tileset, tileToAdd) => tileset._addTileToCache(tileToAdd));\n  }\n\n  // PRIVATE\n\n  // eslint-disable-next-line max-statements\n  _initializeTileSet(tilesetJson, options) {\n    this.asset = tilesetJson.asset;\n    if (!this.asset) {\n      throw new Error('Tileset must have an asset property.');\n    }\n    if (this.asset.version !== '0.0' && this.asset.version !== '1.0') {\n      throw new Error('The tileset must be 3D Tiles version 0.0 or 1.0.');\n    }\n\n    // Note: `asset.tilesetVersion` is version of the tileset itself (not the version of the 3D TILES standard)\n    // We add this version as a `v=1.0` query param to fetch the right version and not get an older cached version\n    if ('tilesetVersion' in this.asset) {\n      this._queryParams.v = this.asset.tilesetVersion;\n    }\n\n    // TODO - ion resources have a credits property we can use for additional attribution.\n    this.credits = {\n      attributions: options.attributions || []\n    };\n\n    this._properties = tilesetJson.properties;\n    this.geometricError = tilesetJson.geometricError;\n    this._extensionsUsed = tilesetJson.extensionsUsed;\n    this._extras = tilesetJson.extras;\n\n    // TODO - handle configurable glTF up axis\n    // const gltfUpAxis = defined(tilesetJson.asset.gltfUpAxis)\n    //   ? Axis.fromName(tilesetJson.asset.gltfUpAxis)\n    //   : Axis.Y;\n\n    this._root = this._initializeTileHeaders(tilesetJson, null, this.basePath);\n\n    // Calculate cartographicCenter & zoom props to help apps center view on tileset\n    this._calculateViewProps();\n\n    // TODO - Do we need this?\n    // Save the original, untransformed bounding volume position so we can apply\n    // the tile transform and model matrix at run time\n    // const boundingVolume = this._root.createBoundingVolume(\n    //   tilesetJson.root.boundingVolume,\n    //   Matrix4.IDENTITY\n    // );\n    // const clippingPlanesOrigin = boundingVolume.boundingSphere.center;\n    // If this origin is above the surface of the earth\n    // we want to apply an ENU orientation as our best guess of orientation.\n    // Otherwise, we assume it gets its position/orientation completely from the\n    // root tile transform and the tileset's model matrix\n    // const originCartographic = this._ellipsoid.cartesianToCartographic(clippingPlanesOrigin);\n    // if (\n    //   originCartographic &&\n    //   originCartographic.height > ApproximateTerrainHeights._defaultMinTerrainHeight\n    // ) {\n    //   this._initialClippingPlanesOriginMatrix = Transforms.eastNorthUpToFixedFrame(\n    //     clippingPlanesOrigin\n    //   );\n    // }\n\n    // this._clippingPlanesOriginMatrix = Matrix4.clone(this._initialClippingPlanesOriginMatrix);\n    // this._readyPromise.resolve(this);\n  }\n\n  // Called during initialize Tileset to initialize the tileset's cartographic center (longitude, latitude) and zoom.\n  _calculateViewProps() {\n    const root = this._root;\n    const {center} = root.boundingVolume;\n    // TODO - handle all cases\n    if (!center) {\n      // eslint-disable-next-line\n      console.warn('center was not pre-calculated for the root tile');\n      this.cartographicCenter = new Vector3();\n      this.zoom = 16;\n      return;\n    }\n    this.cartographicCenter = Ellipsoid.WGS84.cartesianToCartographic(center, new Vector3());\n    this.cartesianCenter = center;\n    this.zoom = getZoom(root.boundingVolume);\n  }\n\n  _initializeStats() {\n    this.stats.get(TILES_TOTAL);\n    this.stats.get(TILES_LOADING);\n    this.stats.get(TILES_IN_MEMORY);\n    this.stats.get(TILES_IN_VIEW);\n    this.stats.get(TILES_RENDERABLE);\n    this.stats.get(TILES_LOADED);\n    this.stats.get(TILES_UNLOADED);\n    this.stats.get(TILES_LOAD_FAILED);\n    this.stats.get(POINTS_COUNT, 'memory');\n    this.stats.get(TILES_GPU_MEMORY, 'memory');\n  }\n\n  // Installs the main tileset JSON file or a tileset JSON file referenced from a tile.\n  // eslint-disable-next-line max-statements\n  _initializeTileHeaders(tilesetJson, parentTileHeader, basePath) {\n    // A tileset JSON file referenced from a tile may exist in a different directory than the root tileset.\n    // Get the basePath relative to the external tileset.\n    const rootTile = new Tile3DHeader(this, tilesetJson.root, parentTileHeader, basePath); // resource\n\n    // If there is a parentTileHeader, add the root of the currently loading tileset\n    // to parentTileHeader's children, and update its _depth.\n    if (parentTileHeader) {\n      parentTileHeader.children.push(rootTile);\n      rootTile._depth = parentTileHeader._depth + 1;\n    }\n\n    const stack = [];\n    stack.push(rootTile);\n\n    while (stack.length > 0) {\n      const tile = stack.pop();\n      this.stats.get(TILES_TOTAL).incrementCount();\n      // this._allTilesAdditive = this._allTilesAdditive && tile.refine === TILE_3D_REFINE.ADD;\n\n      const children = tile._header.children || [];\n      for (const childHeader of children) {\n        const childTile = new Tile3DHeader(this, childHeader, tile, basePath);\n        tile.children.push(childTile);\n        childTile._depth = tile._depth + 1;\n        stack.push(childTile);\n      }\n\n      // TODO:\n      // if (this.options.cullWithChildrenBounds) {\n      //   Tile3DOptimizations.checkChildrenWithinParent(tile);\n      // }\n    }\n\n    return rootTile;\n  }\n\n  _destroyTileHeaders(parentTile) {\n    this._destroySubtree(parentTile);\n  }\n\n  async _loadTile(tile, frameState) {\n    // TODO - support tile expiration\n    // const expired = tile.contentExpired;\n    // if (expired) {\n    //   if (tile.hasTilesetContent) {\n    //     this._destroySubtree(tile);\n    //   }\n    // }\n\n    let loaded;\n\n    this.stats.get(TILES_LOADING).incrementCount();\n    try {\n      loaded = await tile.loadContent(frameState);\n    } catch (error) {\n      this.stats.get(TILES_LOADING).decrementCount();\n      this.stats.get(TILES_LOAD_FAILED).incrementCount();\n\n      const message = error.message || error.toString();\n      const url = tile.url;\n      // TODO - Allow for probe log to be injected instead of console?\n      console.error(`A 3D tile failed to load: ${tile.url} ${message}`); // eslint-disable-line\n      this.options.onTileError(tile, message, url);\n      return;\n    }\n    this.stats.get(TILES_LOADING).decrementCount();\n\n    if (!loaded) {\n      return;\n    }\n\n    // add coordinateOrigin and modelMatrix to tile\n    if (tile && tile._content) {\n      calculateTransformProps(tile, tile._content);\n    }\n\n    this.options.onTileLoad(tile);\n  }\n\n  _addTileToCache(tile) {\n    this.stats.get(TILES_LOADED).incrementCount();\n    this.stats.get(TILES_IN_MEMORY).incrementCount();\n\n    // Good enough? Just use the raw binary ArrayBuffer's byte length.\n    this.gpuMemoryUsageInBytes += tile._content.byteLength || 0;\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n  }\n\n  _unloadTile(tile) {\n    this.stats.get(TILES_IN_MEMORY).decrementCount();\n    this.stats.get(TILES_UNLOADED).incrementCount();\n\n    this.gpuMemoryUsageInBytes -= tile._content.byteLength || 0;\n    this.stats.get(TILES_GPU_MEMORY).count = this.gpuMemoryUsageInBytes;\n\n    this.options.onTileUnload(tile);\n    tile.unloadContent();\n  }\n\n  _unloadTiles() {\n    this._cache.unloadTiles(this, (tileset, tile) => tileset._unloadTile(tile));\n  }\n\n  // Traverse the tree and destroy all tiles\n  _destroy() {\n    const stack = [];\n    if (this._root) {\n      stack.push(this._root);\n    }\n    while (stack.length > 0) {\n      const tile = stack.pop();\n\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n\n      // TODO - Use this._destroyTile(tile); ?\n      tile.destroy();\n    }\n    this._root = null;\n  }\n\n  // Traverse the tree and destroy all sub tiles\n  _destroySubtree(tile) {\n    const root = tile;\n    const stack = [];\n    stack.push(root);\n    while (stack.length > 0) {\n      tile = stack.pop();\n      for (const child of tile.children) {\n        stack.push(child);\n      }\n      if (tile !== root) {\n        this._destroyTile(tile);\n      }\n    }\n    root.children = [];\n  }\n\n  _destroyTile(tile) {\n    this._cache.unloadTile(this, tile);\n    this._unloadTile(tile);\n    tile.destroy();\n  }\n}\n"],"file":"tileset-3d.js"}