import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import ManagedArray from '../utils/managed-array';
import { TILE3D_REFINEMENT } from '../constants';
import assert from '../utils/assert';
export var DEFAULT_OPTIONS = {
  loadSiblings: false,
  skipLevelOfDetail: false,
  maximumScreenSpaceError: 2
};

var BaseTilesetTraverser = function () {
  function BaseTilesetTraverser(options) {
    _classCallCheck(this, BaseTilesetTraverser);

    this.options = _objectSpread({}, DEFAULT_OPTIONS, {}, options);
    this._traversalStack = new ManagedArray();
    this._emptyTraversalStack = new ManagedArray();
    this._frameNumber = null;
    this.root = null;
    this.selectedTiles = {};
    this.requestedTiles = {};
    this.emptyTiles = {};
  }

  _createClass(BaseTilesetTraverser, [{
    key: "traverse",
    value: function traverse(root, frameState, options) {
      this.root = root;
      this.options = _objectSpread({}, this.options, {}, options);
      this.reset();
      this.updateTile(root, frameState);

      if (!this.canTraverse(root, frameState, true)) {
        return false;
      }

      this._frameNumber = frameState.frameNumber;
      this.executeTraversal(root, frameState);
      return true;
    }
  }, {
    key: "reset",
    value: function reset() {
      this.requestedTiles = {};
      this.selectedTiles = {};
      this.emptyTiles = {};

      this._traversalStack.reset();

      this._emptyTraversalStack.reset();
    }
  }, {
    key: "executeTraversal",
    value: function executeTraversal(root, frameState) {
      var stack = this._traversalStack;
      stack.push(root);

      while (stack.length > 0) {
        var tile = stack.pop();
        var refines = false;

        if (this.canTraverse(tile, frameState)) {
          this.updateChildTiles(tile, frameState);
          refines = this.updateAndPushChildren(tile, frameState, stack);
        }

        var parent = tile.parent;
        var parentRefines = Boolean(!parent || parent._refines);
        var stoppedRefining = !refines;

        if (!tile.hasRenderContent) {
          this.emptyTiles[tile.id] = tile;
          this.loadTile(tile, frameState);

          if (stoppedRefining) {
            this.selectTile(tile, frameState);
          }
        } else if (tile.refine === TILE3D_REFINEMENT.ADD) {
          this.loadTile(tile, frameState);
          this.selectTile(tile, frameState);
        } else if (tile.refine === TILE3D_REFINEMENT.REPLACE) {
          this.loadTile(tile, frameState);

          if (stoppedRefining) {
            this.selectTile(tile, frameState);
          }
        }

        this.touchTile(tile, frameState);
        tile._refines = refines && parentRefines;
      }

      if (this.options.onTraverseEnd) {
        this.options.onTraverseEnd();
      }
    }
  }, {
    key: "updateChildTiles",
    value: function updateChildTiles(tile, frameState) {
      var children = tile.children;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var child = _step.value;
          this.updateTile(child, frameState);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return true;
    }
  }, {
    key: "updateAndPushChildren",
    value: function updateAndPushChildren(tile, frameState, stack) {
      var _this$options = this.options,
          loadSiblings = _this$options.loadSiblings,
          skipLevelOfDetail = _this$options.skipLevelOfDetail;
      var children = tile.children;
      children.sort(this.compareDistanceToCamera);
      var checkRefines = !skipLevelOfDetail && tile.refine === TILE3D_REFINEMENT.REPLACE && tile.hasRenderContent;
      var refines = true;
      var hasVisibleChild = false;
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var child = _step2.value;

          if (child.isVisibleAndInRequestVolume) {
            if (stack.find(child)) {
              stack["delete"](child);
            }

            stack.push(child);
            hasVisibleChild = true;
          } else if (checkRefines || loadSiblings) {
            this.loadTile(child, frameState);
            this.touchTile(child, frameState);
          }

          if (checkRefines) {
            var childRefines = void 0;

            if (!child._inRequestVolume) {
              childRefines = false;
            } else if (!child.hasRenderContent) {
              childRefines = this.executeEmptyTraversal(child, frameState);
            } else {
              childRefines = child.contentAvailable;
            }

            refines = refines && childRefines;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      if (!hasVisibleChild) {
        refines = false;
      }

      return refines;
    }
  }, {
    key: "updateTile",
    value: function updateTile(tile, frameState) {
      this.updateTileVisibility(tile, frameState);
      tile.updateExpiration();
    }
  }, {
    key: "selectTile",
    value: function selectTile(tile, frameState) {
      if (this.shouldSelectTile(tile, frameState)) {
        tile._selectedFrame = frameState.frameNumber;
        this.selectedTiles[tile.fullUri] = tile;
      }
    }
  }, {
    key: "loadTile",
    value: function loadTile(tile, frameState) {
      if (this.shouldLoadTile(tile, frameState)) {
        tile._requestedFrame = frameState.frameNumber;
        tile._priority = this.getPriority(tile);
        this.requestedTiles[tile.id] = tile;
      }
    }
  }, {
    key: "touchTile",
    value: function touchTile(tile, frameState) {
      tile.tileset._cache.touch(tile);

      tile._touchedFrame = frameState.frameNumber;
    }
  }, {
    key: "canTraverse",
    value: function canTraverse(tile, frameState) {
      var useParentMetric = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var ignoreVisibility = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

      if (!ignoreVisibility && !tile.isVisibleAndInRequestVolume) {
        return false;
      }

      if (!tile.hasChildren) {
        return false;
      }

      if (tile.hasTilesetContent) {
        return !tile.contentExpired;
      }

      return this.shouldRefine(tile, frameState, useParentMetric);
    }
  }, {
    key: "shouldLoadTile",
    value: function shouldLoadTile(tile, frameState) {
      return tile.hasUnloadedContent || tile.contentExpired;
    }
  }, {
    key: "shouldSelectTile",
    value: function shouldSelectTile(tile, frameState) {
      return tile.contentAvailable && !this.options.skipLevelOfDetail;
    }
  }, {
    key: "shouldRefine",
    value: function shouldRefine(tile, frameState, useParentMetric) {
      var screenSpaceError = tile._screenSpaceError;

      if (useParentMetric) {
        screenSpaceError = tile.getScreenSpaceError(frameState, true);
      }

      return screenSpaceError > this.options.maximumScreenSpaceError;
    }
  }, {
    key: "updateTileVisibility",
    value: function updateTileVisibility(tile, frameState) {
      tile.updateVisibility(frameState);
    }
  }, {
    key: "compareDistanceToCamera",
    value: function compareDistanceToCamera(b, a) {
      return b._distanceToCamera - a._distanceToCamera;
    }
  }, {
    key: "getPriority",
    value: function getPriority(tile) {
      var options = this.options;

      switch (tile.refine) {
        case TILE3D_REFINEMENT.ADD:
          return tile._distanceToCamera;

        case TILE3D_REFINEMENT.REPLACE:
          var parent = tile.parent;
          var useParentScreenSpaceError = parent && (!options.skipLevelOfDetail || tile._screenSpaceError === 0.0 || parent.hasTilesetContent);
          var screenSpaceError = useParentScreenSpaceError ? parent._screenSpaceError : tile._screenSpaceError;
          var rootScreenSpaceError = this.root._screenSpaceError;
          return rootScreenSpaceError - screenSpaceError;

        default:
          return assert(false);
      }
    }
  }, {
    key: "anyChildrenVisible",
    value: function anyChildrenVisible(tile, frameState) {
      var anyVisible = false;
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = tile.children[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var child = _step3.value;
          child.updateVisibility(frameState);
          anyVisible = anyVisible || child.isVisibleAndInRequestVolume;
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      return anyVisible;
    }
  }, {
    key: "executeEmptyTraversal",
    value: function executeEmptyTraversal(root, frameState) {
      var allDescendantsLoaded = true;
      var stack = this._emptyTraversalStack;

      while (stack.length > 0) {
        var tile = stack.pop();
        this.updateTile(tile, frameState);

        if (!tile.isVisibleAndInRequestVolume) {
          this.loadTile(tile, frameState);
          this.touchTile(tile, frameState);
        }

        var traverse = !tile.hasRenderContent && this.canTraverse(tile, frameState, false, true);

        if (!traverse && !tile.contentAvailable) {
          allDescendantsLoaded = false;
        }

        if (traverse) {
          var children = tile.children.filter(function (c) {
            return c;
          });
          var _iteratorNormalCompletion4 = true;
          var _didIteratorError4 = false;
          var _iteratorError4 = undefined;

          try {
            for (var _iterator4 = children[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
              var child = _step4.value;

              if (stack.find(child)) {
                stack["delete"](child);
              }

              stack.push(child);
            }
          } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                _iterator4["return"]();
              }
            } finally {
              if (_didIteratorError4) {
                throw _iteratorError4;
              }
            }
          }
        }
      }

      return allDescendantsLoaded;
    }
  }]);

  return BaseTilesetTraverser;
}();

export { BaseTilesetTraverser as default };
//# sourceMappingURL=base-tileset-traverser.js.map