{"version":3,"sources":["../../../../src/lib/request-utils/request-scheduler.js"],"names":["Stats","STAT_QUEUED_REQUESTS","STAT_ACTIVE_REQUESTS","STAT_CANCELLED_REQUESTS","STAT_QUEUED_REQUESTS_EVER","STAT_ACTIVE_REQUESTS_EVER","DEFAULT_PROPS","id","throttleRequests","maxRequests","RequestScheduler","props","requestQueue","activeRequestCount","requestMap","stats","get","handle","callback","Promise","resolve","request","promise","reject","push","_issueNewRequests","startRequest","then","endRequest","_updateNeeded","setTimeout","_issueNewRequestsAsync","freeSlots","Math","max","_updateAllRequests","i","length","shift","_updateRequest","splice","sort","a","b","priority"],"mappings":"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","sourcesContent":["// TODO - this should move to core when test cases are more complete\n\n/* global setTimeout */\nimport {Stats} from 'probe.gl';\n\nconst STAT_QUEUED_REQUESTS = 'Queued Requests';\nconst STAT_ACTIVE_REQUESTS = 'Active Requests';\nconst STAT_CANCELLED_REQUESTS = 'Cancelled Requests';\nconst STAT_QUEUED_REQUESTS_EVER = 'Queued Requests Ever';\nconst STAT_ACTIVE_REQUESTS_EVER = 'Active Requests Ever';\n\nconst DEFAULT_PROPS = {\n  id: 'request-scheduler',\n  // Specifies if the request scheduler should throttle incoming requests, mainly for comparative testing\n  throttleRequests: true,\n  // The maximum number of simultaneous active requests. Un-throttled requests do not observe this limit.\n  maxRequests: 6\n};\n\n// The request scheduler does not actually issue requests, it just lets apps know\n// when the request can be issued without overwhelming the server.\n// The main use case is to let the app reprioritize or cancel requests if\n//  circumstances change before the request can be scheduled.\n//\n// TODO - Track requests globally, across multiple servers\nexport default class RequestScheduler {\n  constructor(props = {}) {\n    this.props = {...props, ...DEFAULT_PROPS};\n\n    // Tracks the number of active requests and prioritizes/cancels queued requests.\n    this.requestQueue = [];\n    this.activeRequestCount = 0;\n    this.requestMap = {};\n\n    // Returns the statistics used by the request scheduler.\n    this.stats = new Stats({id: props.id});\n    this.stats.get(STAT_QUEUED_REQUESTS);\n    this.stats.get(STAT_ACTIVE_REQUESTS);\n    this.stats.get(STAT_CANCELLED_REQUESTS);\n    this.stats.get(STAT_QUEUED_REQUESTS_EVER);\n    this.stats.get(STAT_ACTIVE_REQUESTS_EVER);\n  }\n\n  // Called by an application that wants to issue a request, without having it deeply queued\n  // Parameter `callback` will be called when request \"slots\" open up,\n  //    allowing the caller to update priority or cancel the request\n  //    Highest priority executes first, priority < 0 cancels the request\n  // Returns: a promise that resolves when the request can be issued without queueing,\n  //    or rejects if the request has been cancelled (by the callback)\n  scheduleRequest(handle, callback = () => 0) {\n    // Allows throttling to be disabled\n    if (!this.props.throttleRequests) {\n      return Promise.resolve(handle);\n    }\n\n    // dedupe\n    if (this.requestMap[handle.id]) {\n      return this.requestMap[handle.id];\n    }\n\n    let request = null;\n    const promise = new Promise((resolve, reject) => {\n      request = {handle, callback, resolve, reject};\n      return request;\n    });\n\n    this.requestQueue.push({promise, ...request});\n    this.requestMap[handle.id] = promise;\n    this._issueNewRequests();\n    return promise;\n  }\n\n  // Called by an application to mark that it is actively making a request\n  startRequest(handle) {\n    this.activeRequestCount++;\n  }\n\n  // Called by an application to mark that it is finished making a request\n  endRequest(handle) {\n    if (this.requestMap[handle.id]) {\n      delete this.requestMap[handle.id];\n    }\n    this.activeRequestCount--;\n    this._issueNewRequests();\n  }\n\n  // Tracks a request promise, starting and then ending the request (triggering new slots).\n  trackRequestPromise(handle, promise) {\n    this.startRequest(handle);\n    promise.then(() => this.endRequest(handle)).catch(() => this.endRequest(handle));\n  }\n\n  // PRIVATE\n\n  // We check requests asynchronously, to prevent multiple updates\n  _issueNewRequests() {\n    this._updateNeeded = true;\n    setTimeout(() => this._issueNewRequestsAsync(), 0);\n  }\n\n  // Refresh all requests and\n  _issueNewRequestsAsync() {\n    this._updateNeeded = false;\n\n    const freeSlots = Math.max(this.props.maxRequests - this.activeRequestCount, 0);\n\n    if (freeSlots === 0) {\n      return;\n    }\n\n    this._updateAllRequests();\n\n    // Resolve pending promises for the top-priority requests\n    for (let i = 0; i < freeSlots; ++i) {\n      if (this.requestQueue.length > 0) {\n        const request = this.requestQueue.shift();\n        request.resolve(true);\n      }\n    }\n\n    // Uncomment to debug\n    // console.log(`${freeSlots} free slots, ${this.requestQueue.length} queued requests`);\n  }\n\n  // Ensure all requests have updated priorities, and that no longer valid requests are cancelled\n  _updateAllRequests() {\n    const requestQueue = this.requestQueue;\n    for (let i = 0; i < requestQueue.length; ++i) {\n      const request = requestQueue[i];\n      if (!this._updateRequest(request)) {\n        // Remove the element and make sure to adjust the counter to account for shortened array\n        requestQueue.splice(i, 1);\n        delete this.requestMap[request.handle.id];\n        i--;\n      }\n    }\n\n    // Sort the remaining requests based on priority\n    requestQueue.sort((a, b) => a.priority - b.priority);\n  }\n\n  // Update a single request by calling the callback\n  _updateRequest(request) {\n    request.priority = request.callback(request.handle); // eslint-disable-line callback-return\n\n    // by returning a negative priority, the callback cancels the request\n    if (request.priority < 0) {\n      request.resolve(false);\n      return false;\n    }\n    return true;\n  }\n}\n"],"file":"request-scheduler.js"}