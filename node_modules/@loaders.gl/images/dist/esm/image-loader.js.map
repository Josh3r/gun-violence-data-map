{"version":3,"sources":["../../src/image-loader.js"],"names":["parseImage","isPng","isGif","isBmp","isJpeg","VERSION","EXTENSIONS","MIME_TYPES","ImageLoader","name","version","mimeTypes","extensions","parse","test","arrayBuffer","dataView","DataView","options","image","format","decode"],"mappings":"AACA,OAAOA,UAAP,MAAuB,2BAAvB;AACA,SAAQC,KAAR,EAAeC,KAAf,EAAsBC,KAAtB,EAA6BC,MAA7B,QAA0C,6CAA1C;AAEA,IAAMC,OAAO,GAAG,mBAAuB,WAAvB,aAAmD,QAAnE;AAEA,IAAMC,UAAU,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,MAAf,EAAuB,KAAvB,EAA8B,MAA9B,EAAsC,KAAtC,EAA6C,KAA7C,EAAoD,KAApD,CAAnB;AACA,IAAMC,UAAU,GAAG,CACjB,WADiB,EAEjB,YAFiB,EAGjB,WAHiB,EAIjB,YAJiB,EAKjB,WALiB,EAMjB,wBANiB,EAOjB,eAPiB,CAAnB;AAWA,IAAMC,WAAW,GAAG;AAClBC,EAAAA,IAAI,EAAE,QADY;AAElBC,EAAAA,OAAO,EAAEL,OAFS;AAGlBM,EAAAA,SAAS,EAAEJ,UAHO;AAIlBK,EAAAA,UAAU,EAAEN,UAJM;AAKlBO,EAAAA,KAAK,EAAEb,UALW;AAMlBc,EAAAA,IAAI,EAAE,cAAAC,WAAW,EAAI;AACnB,QAAMC,QAAQ,GAAG,IAAIC,QAAJ,CAAaF,WAAb,CAAjB;AACA,WAAOX,MAAM,CAACY,QAAD,CAAN,IAAoBb,KAAK,CAACa,QAAD,CAAzB,IAAuCd,KAAK,CAACc,QAAD,CAA5C,IAA0Df,KAAK,CAACe,QAAD,CAAtE;AACD,GATiB;AAUlBE,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EAAE,MADH;AAELC,MAAAA,MAAM,EAAE;AAFH;AADA;AAVS,CAApB;AAmBA,eAAeb,WAAf","sourcesContent":["/* global __VERSION__ */ // __VERSION__ is injected by babel-plugin-version-inline\nimport parseImage from './lib/parsers/parse-image';\nimport {isPng, isGif, isBmp, isJpeg} from './lib/binary-image-api/binary-image-parsers';\n\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nconst EXTENSIONS = ['png', 'jpg', 'jpeg', 'gif', 'webp', 'bmp', 'ico', 'svg'];\nconst MIME_TYPES = [\n  'image/png',\n  'image/jpeg',\n  'image/gif',\n  'image/webp',\n  'image/bmp',\n  'image/vndmicrosofticon',\n  'image/svg+xml'\n];\n\n// Loads a platform-specific image type that can be used as input data to WebGL textures\nconst ImageLoader = {\n  name: 'Images',\n  version: VERSION,\n  mimeTypes: MIME_TYPES,\n  extensions: EXTENSIONS,\n  parse: parseImage,\n  test: arrayBuffer => {\n    const dataView = new DataView(arrayBuffer); // , byteOffset, byteLength);\n    return isJpeg(dataView) || isBmp(dataView) || isGif(dataView) || isPng(dataView);\n  },\n  options: {\n    image: {\n      format: 'auto',\n      decode: true // if format is HTML\n    }\n    // imagebitmap: {} - passes (platform dependent) parameters to ImageBitmap constructor\n  }\n};\n\nexport default ImageLoader;\n"],"file":"image-loader.js"}