import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import assert from '../utils/assert';
import { isImageTypeSupported, getDefaultImageType } from '../parsed-image-api/image-type';
import parseToNodeImage from './parse-to-node-image';
import parseToImage from './parse-to-image';
import parseToImageBitmap from './parse-to-image-bitmap';
import parseSVG from './parse-svg';
export default function parseImage(_x, _x2, _x3) {
  return _parseImage.apply(this, arguments);
}

function _parseImage() {
  _parseImage = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer, options, context) {
    var _ref, url, format;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = options || {};
            _ref = context || {}, url = _ref.url;

            if (!(url && /\.svg((\?|#).*)?$/.test(url))) {
              _context.next = 7;
              break;
            }

            console.warn('@loaders.gl/images: SVG parsing needs to be fixed for 2.0');
            _context.next = 6;
            return parseSVG(arrayBuffer, options);

          case 6:
            return _context.abrupt("return", _context.sent);

          case 7:
            format = getImageOutputFormat(options);
            _context.t0 = format;
            _context.next = _context.t0 === 'imagebitmap' ? 11 : _context.t0 === 'html' ? 14 : _context.t0 === 'ndarray' ? 17 : 20;
            break;

          case 11:
            _context.next = 13;
            return parseToImageBitmap(arrayBuffer, options);

          case 13:
            return _context.abrupt("return", _context.sent);

          case 14:
            _context.next = 16;
            return parseToImage(arrayBuffer, options);

          case 16:
            return _context.abrupt("return", _context.sent);

          case 17:
            _context.next = 19;
            return parseToNodeImage(arrayBuffer, options);

          case 19:
            return _context.abrupt("return", _context.sent);

          case 20:
            return _context.abrupt("return", assert(false));

          case 21:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _parseImage.apply(this, arguments);
}

function getImageOutputFormat() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var imageOptions = options.image || {};
  var type = imageOptions.type || 'auto';

  switch (type) {
    case 'imagebitmap':
    case 'html':
    case 'ndarray':
      if (!isImageTypeSupported(type)) {
        throw new Error("Requested image type ".concat(type, " not available in current environment"));
      }

      return type;

    case 'auto':
      return getDefaultImageType();

    default:
      throw new Error("Unknown image format ".concat(type));
  }
}
//# sourceMappingURL=parse-image.js.map