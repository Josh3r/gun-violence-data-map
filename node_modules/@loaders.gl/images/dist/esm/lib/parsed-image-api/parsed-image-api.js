import _typeof from "@babel/runtime/helpers/esm/typeof";
import assert from '../utils/assert';
export function isImage(image) {
  return Boolean(getImageTypeOrNull(image));
}
export function deleteImage(image) {
  switch (getImageType(image)) {
    case 'imagebitmap':
      image.close();
      break;

    default:
  }
}
export function getImageType(image) {
  var format = getImageTypeOrNull(image);

  if (!format) {
    throw new Error('Not an image');
  }

  return format;
}
export function getImageSize(image) {
  switch (getImageType(image)) {
    case 'imagebitmap':
    case 'ndarray':
      return {
        width: image.width,
        height: image.height
      };

    case 'html':
      return {
        width: image.naturalWidth,
        height: image.naturalHeight
      };

    default:
      return assert(false);
  }
}
export function getImageData(image) {
  switch (getImageType(image)) {
    case 'imagebitmap':
    case 'html':
      var canvas = document.createElement('canvas');
      var context = canvas.getContext('2d');
      canvas.width = image.width;
      canvas.height = image.height;
      context.drawImage(image, 0, 0);
      var imageData = context.getImageData(0, 0, image.width, image.height);
      return imageData.data;

    case 'ndarray':
      return image.data;

    default:
      return assert(false);
  }
}

function getImageTypeOrNull(image) {
  if (typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {
    return 'imagebitmap';
  }

  if (typeof Image !== 'undefined' && image instanceof Image) {
    return 'html';
  }

  if (image && _typeof(image) === 'object' && image.data && image.width && image.height) {
    return 'ndarray';
  }

  if (Array.isArray(image)) {
    return 'ndarray';
  }

  return null;
}
//# sourceMappingURL=parsed-image-api.js.map