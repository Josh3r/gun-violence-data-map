import assert from '../utils/assert';
import { isImageTypeSupported, getDefaultImageType } from '../parsed-image-api/image-type';
import parseToNodeImage from './parse-to-node-image';
import parseToImage from './parse-to-image';
import parseToImageBitmap from './parse-to-image-bitmap';
import parseSVG from './parse-svg';
export default async function parseImage(arrayBuffer, options, context) {
  options = options || {};
  const {
    url
  } = context || {};

  if (url && /\.svg((\?|#).*)?$/.test(url)) {
    console.warn('@loaders.gl/images: SVG parsing needs to be fixed for 2.0');
    return await parseSVG(arrayBuffer, options);
  }

  const format = getImageOutputFormat(options);

  switch (format) {
    case 'imagebitmap':
      return await parseToImageBitmap(arrayBuffer, options);

    case 'html':
      return await parseToImage(arrayBuffer, options);

    case 'ndarray':
      return await parseToNodeImage(arrayBuffer, options);

    default:
      return assert(false);
  }
}

function getImageOutputFormat(options = {}) {
  const imageOptions = options.image || {};
  const type = imageOptions.type || 'auto';

  switch (type) {
    case 'imagebitmap':
    case 'html':
    case 'ndarray':
      if (!isImageTypeSupported(type)) {
        throw new Error("Requested image type ".concat(type, " not available in current environment"));
      }

      return type;

    case 'auto':
      return getDefaultImageType();

    default:
      throw new Error("Unknown image format ".concat(type));
  }
}
//# sourceMappingURL=parse-image.js.map