"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isBinaryImage = isBinaryImage;
exports.getBinaryImageMIMEType = getBinaryImageMIMEType;
exports.getBinaryImageSize = getBinaryImageSize;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _binaryImageParsers = require("./binary-image-parsers");

var ERR_INVALID_MIME_TYPE = "Invalid MIME type. Supported MIME types are: ".concat(Array.from(_binaryImageParsers.mimeTypeMap.keys()).join(', '));

function isBinaryImage(arrayBuffer, mimeType) {
  if (mimeType) {
    var _getBinaryImageTypeHa = getBinaryImageTypeHandlers(mimeType),
        test = _getBinaryImageTypeHa.test;

    var dataView = toDataView(arrayBuffer);
    return test(dataView);
  }

  return Boolean(getBinaryImageMIMEType(arrayBuffer));
}

function getBinaryImageMIMEType(arrayBuffer) {
  var dataView = toDataView(arrayBuffer);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _binaryImageParsers.mimeTypeMap.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _step$value = (0, _slicedToArray2["default"])(_step.value, 2),
          mimeType = _step$value[0],
          test = _step$value[1].test;

      if (test(dataView)) {
        return mimeType;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return null;
}

function getBinaryImageSize(arrayBuffer) {
  var mimeType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  mimeType = mimeType || getBinaryImageMIMEType(arrayBuffer);

  var _getBinaryImageTypeHa2 = getBinaryImageTypeHandlers(mimeType),
      getSize = _getBinaryImageTypeHa2.getSize;

  var dataView = toDataView(arrayBuffer);
  var size = getSize(dataView);

  if (!size) {
    throw new Error("invalid image data for type: ".concat(mimeType));
  }

  return size;
}

function getBinaryImageTypeHandlers(mimeType) {
  var handlers = _binaryImageParsers.mimeTypeMap.get(mimeType);

  if (!handlers) {
    throw new Error(ERR_INVALID_MIME_TYPE);
  }

  return handlers;
}

function toDataView(data) {
  data = data.buffer || data;

  if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
    return new DataView(data.buffer || data);
  }

  throw new Error('toDataView');
}
//# sourceMappingURL=binary-image-api.js.map