{"version":3,"sources":["../../../../src/lib/parsed-image-api/parsed-image-api.js"],"names":["isImage","image","Boolean","getImageTypeOrNull","deleteImage","getImageType","close","format","Error","getImageSize","width","height","naturalWidth","naturalHeight","getImageData","canvas","document","createElement","context","getContext","drawImage","imageData","data","ImageBitmap","Image","Array","isArray"],"mappings":";;;;;;;;;;;;;;;AACA;;AAEO,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;AAC7B,SAAOC,OAAO,CAACC,kBAAkB,CAACF,KAAD,CAAnB,CAAd;AACD;;AAEM,SAASG,WAAT,CAAqBH,KAArB,EAA4B;AACjC,UAAQI,YAAY,CAACJ,KAAD,CAApB;AACE,SAAK,aAAL;AACEA,MAAAA,KAAK,CAACK,KAAN;AACA;;AACF;AAJF;AAOD;;AAEM,SAASD,YAAT,CAAsBJ,KAAtB,EAA6B;AAClC,MAAMM,MAAM,GAAGJ,kBAAkB,CAACF,KAAD,CAAjC;;AACA,MAAI,CAACM,MAAL,EAAa;AACX,UAAM,IAAIC,KAAJ,CAAU,cAAV,CAAN;AACD;;AACD,SAAOD,MAAP;AACD;;AAEM,SAASE,YAAT,CAAsBR,KAAtB,EAA6B;AAClC,UAAQI,YAAY,CAACJ,KAAD,CAApB;AACE,SAAK,aAAL;AACA,SAAK,SAAL;AACE,aAAO;AAACS,QAAAA,KAAK,EAAET,KAAK,CAACS,KAAd;AAAqBC,QAAAA,MAAM,EAAEV,KAAK,CAACU;AAAnC,OAAP;;AACF,SAAK,MAAL;AACE,aAAO;AAACD,QAAAA,KAAK,EAAET,KAAK,CAACW,YAAd;AAA4BD,QAAAA,MAAM,EAAEV,KAAK,CAACY;AAA1C,OAAP;;AACF;AACE,aAAO,wBAAO,KAAP,CAAP;AAPJ;AASD;;AAEM,SAASC,YAAT,CAAsBb,KAAtB,EAA6B;AAClC,UAAQI,YAAY,CAACJ,KAAD,CAApB;AACE,SAAK,aAAL;AACA,SAAK,MAAL;AAEE,UAAMc,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AAEA,UAAMC,OAAO,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAhB;AACAJ,MAAAA,MAAM,CAACL,KAAP,GAAeT,KAAK,CAACS,KAArB;AACAK,MAAAA,MAAM,CAACJ,MAAP,GAAgBV,KAAK,CAACU,MAAtB;AACAO,MAAAA,OAAO,CAACE,SAAR,CAAkBnB,KAAlB,EAAyB,CAAzB,EAA4B,CAA5B;AACA,UAAMoB,SAAS,GAAGH,OAAO,CAACJ,YAAR,CAAqB,CAArB,EAAwB,CAAxB,EAA2Bb,KAAK,CAACS,KAAjC,EAAwCT,KAAK,CAACU,MAA9C,CAAlB;AACA,aAAOU,SAAS,CAACC,IAAjB;;AACF,SAAK,SAAL;AACE,aAAOrB,KAAK,CAACqB,IAAb;;AACF;AACE,aAAO,wBAAO,KAAP,CAAP;AAfJ;AAiBD;;AAID,SAASnB,kBAAT,CAA4BF,KAA5B,EAAmC;AACjC,MAAI,OAAOsB,WAAP,KAAuB,WAAvB,IAAsCtB,KAAK,YAAYsB,WAA3D,EAAwE;AACtE,WAAO,aAAP;AACD;;AACD,MAAI,OAAOC,KAAP,KAAiB,WAAjB,IAAgCvB,KAAK,YAAYuB,KAArD,EAA4D;AAC1D,WAAO,MAAP;AACD;;AACD,MAAIvB,KAAK,IAAI,yBAAOA,KAAP,MAAiB,QAA1B,IAAsCA,KAAK,CAACqB,IAA5C,IAAoDrB,KAAK,CAACS,KAA1D,IAAmET,KAAK,CAACU,MAA7E,EAAqF;AAGnF,WAAO,SAAP;AACD;;AACD,MAAIc,KAAK,CAACC,OAAN,CAAczB,KAAd,CAAJ,EAA0B;AAExB,WAAO,SAAP;AACD;;AACD,SAAO,IAAP;AACD","sourcesContent":["/* global ImageBitmap, Image */\nimport assert from '../utils/assert';\n\nexport function isImage(image) {\n  return Boolean(getImageTypeOrNull(image));\n}\n\nexport function deleteImage(image) {\n  switch (getImageType(image)) {\n    case 'imagebitmap':\n      image.close();\n      break;\n    default:\n    // Nothing to do for images and ndarrays\n  }\n}\n\nexport function getImageType(image) {\n  const format = getImageTypeOrNull(image);\n  if (!format) {\n    throw new Error('Not an image');\n  }\n  return format;\n}\n\nexport function getImageSize(image) {\n  switch (getImageType(image)) {\n    case 'imagebitmap':\n    case 'ndarray':\n      return {width: image.width, height: image.height};\n    case 'html':\n      return {width: image.naturalWidth, height: image.naturalHeight};\n    default:\n      return assert(false);\n  }\n}\n\nexport function getImageData(image) {\n  switch (getImageType(image)) {\n    case 'imagebitmap':\n    case 'html':\n      /* global document */\n      const canvas = document.createElement('canvas');\n      // TODO - reuse the canvas?\n      const context = canvas.getContext('2d');\n      canvas.width = image.width;\n      canvas.height = image.height;\n      context.drawImage(image, 0, 0);\n      const imageData = context.getImageData(0, 0, image.width, image.height);\n      return imageData.data;\n    case 'ndarray':\n      return image.data;\n    default:\n      return assert(false);\n  }\n}\n\n// PRIVATE\n\nfunction getImageTypeOrNull(image) {\n  if (typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n    return 'imagebitmap';\n  }\n  if (typeof Image !== 'undefined' && image instanceof Image) {\n    return 'html';\n  }\n  if (image && typeof image === 'object' && image.data && image.width && image.height) {\n    // Assume this is ndarray\n    // TODO - this is not ndarray\n    return 'ndarray';\n  }\n  if (Array.isArray(image)) {\n    // Assume this is ndarray\n    return 'ndarray';\n  }\n  return null;\n}\n"],"file":"parsed-image-api.js"}