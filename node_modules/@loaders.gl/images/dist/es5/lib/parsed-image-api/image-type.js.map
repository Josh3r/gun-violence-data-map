{"version":3,"sources":["../../../../src/lib/parsed-image-api/image-type.js"],"names":["IMAGE_BITMAP_SUPPORTED","ImageBitmap","HTML_IMAGE_SUPPORTED","Image","NODE_IMAGE_SUPPORTED","Boolean","global","_parseImageNode","isImageTypeSupported","type","Error","getDefaultImageType","isBrowser"],"mappings":";;;;;;;;;;;AACA;;AACA;;AAEO,IAAMA,sBAAsB,GAAG,OAAOC,WAAP,KAAuB,WAAtD;;AACA,IAAMC,oBAAoB,GAAG,OAAOC,KAAP,KAAiB,WAA9C;;AACA,IAAMC,oBAAoB,GAAGC,OAAO,CAACC,gBAAOC,eAAR,CAApC;;;AAGA,SAASC,oBAAT,CAA8BC,IAA9B,EAAoC;AACzC,UAAQA,IAAR;AACE,SAAK,MAAL;AACE,aAAO,IAAP;;AACF,SAAK,aAAL;AACE,aAAOT,sBAAP;;AACF,SAAK,MAAL;AACE,aAAOE,oBAAP;;AACF,SAAK,SAAL;AACE,aAAOE,oBAAP;;AACF;AACE,YAAM,IAAIM,KAAJ,gCAAkCD,IAAlC,EAAN;AAVJ;AAYD;;AAGM,SAASE,mBAAT,GAA+B;AACpC,MAAIH,oBAAoB,CAAC,SAAD,CAAxB,EAAqC;AACnC,WAAO,SAAP;AACD;;AACD,MAAIA,oBAAoB,CAAC,MAAD,CAAxB,EAAkC;AAChC,WAAO,MAAP;AACD;;AACD,MAAIA,oBAAoB,CAAC,aAAD,CAAxB,EAAyC;AACvC,WAAO,aAAP;AACD;;AAED,MAAI,CAACI,kBAAL,EAAgB;AACd,UAAM,IAAIF,KAAJ,iEAAN;AACD;;AAED,SAAO,wBAAO,KAAP,CAAP;AACD","sourcesContent":["/* global ImageBitmap, Image */\nimport {global, isBrowser} from '../utils/globals';\nimport assert from '../utils/assert';\n\nexport const IMAGE_BITMAP_SUPPORTED = typeof ImageBitmap !== 'undefined';\nexport const HTML_IMAGE_SUPPORTED = typeof Image !== 'undefined'; // NOTE: \"false\" positives if jsdom is installed\nexport const NODE_IMAGE_SUPPORTED = Boolean(global._parseImageNode);\n\n// Checks if a loaders.gl image type is supported\nexport function isImageTypeSupported(type) {\n  switch (type) {\n    case 'auto':\n      return true;\n    case 'imagebitmap':\n      return IMAGE_BITMAP_SUPPORTED;\n    case 'html':\n      return HTML_IMAGE_SUPPORTED;\n    case 'ndarray':\n      return NODE_IMAGE_SUPPORTED;\n    default:\n      throw new Error(`Unknown image format ${type}`);\n  }\n}\n\n// Returns the best loaders.gl image type supported on current run-time environment\nexport function getDefaultImageType() {\n  if (isImageTypeSupported('ndarray')) {\n    return 'ndarray';\n  }\n  if (isImageTypeSupported('html')) {\n    return 'html';\n  }\n  if (isImageTypeSupported('imagebitmap')) {\n    return 'imagebitmap';\n  }\n\n  if (!isBrowser) {\n    throw new Error(`Install '@loaders.gl/polyfills' to parse images under Node.js`);\n  }\n\n  return assert(false); // Internal error, no valid format available, should not happen\n}\n"],"file":"image-type.js"}