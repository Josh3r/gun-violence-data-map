{"version":3,"sources":["../../../../src/lib/parsers/parse-image.js"],"names":["parseImage","arrayBuffer","options","context","url","test","console","warn","format","getImageOutputFormat","imageOptions","image","type","Error"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AACA;;SAG8BA,U;;;;;gFAAf,iBAA0BC,WAA1B,EAAuCC,OAAvC,EAAgDC,OAAhD;AAAA;;AAAA;AAAA;AAAA;AAAA;AACbD,YAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AADa,mBAGCC,OAAO,IAAI,EAHZ,EAGNC,GAHM,QAGNA,GAHM;;AAAA,kBAITA,GAAG,IAAI,oBAAoBC,IAApB,CAAyBD,GAAzB,CAJE;AAAA;AAAA;AAAA;;AAMXE,YAAAA,OAAO,CAACC,IAAR,CAAa,2DAAb;AANW;AAAA,mBAOE,0BAASN,WAAT,EAAsBC,OAAtB,CAPF;;AAAA;AAAA;;AAAA;AAUPM,YAAAA,MAVO,GAUEC,oBAAoB,CAACP,OAAD,CAVtB;AAAA,0BAWLM,MAXK;AAAA,4CAYN,aAZM,wBAcN,MAdM,wBAgBN,SAhBM;AAAA;;AAAA;AAAA;AAAA,mBAaI,oCAAmBP,WAAnB,EAAgCC,OAAhC,CAbJ;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAeI,8BAAaD,WAAb,EAA0BC,OAA1B,CAfJ;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAiBI,kCAAiBD,WAAjB,EAA8BC,OAA9B,CAjBJ;;AAAA;AAAA;;AAAA;AAAA,6CAmBF,wBAAO,KAAP,CAnBE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAyBf,SAASO,oBAAT,GAA4C;AAAA,MAAdP,OAAc,uEAAJ,EAAI;AAC1C,MAAMQ,YAAY,GAAGR,OAAO,CAACS,KAAR,IAAiB,EAAtC;AACA,MAAMC,IAAI,GAAGF,YAAY,CAACE,IAAb,IAAqB,MAAlC;;AAEA,UAAQA,IAAR;AACE,SAAK,aAAL;AACA,SAAK,MAAL;AACA,SAAK,SAAL;AAEE,UAAI,CAAC,qCAAqBA,IAArB,CAAL,EAAiC;AAC/B,cAAM,IAAIC,KAAJ,gCAAkCD,IAAlC,2CAAN;AACD;;AACD,aAAOA,IAAP;;AAEF,SAAK,MAAL;AACE,aAAO,qCAAP;;AAEF;AAEE,YAAM,IAAIC,KAAJ,gCAAkCD,IAAlC,EAAN;AAfJ;AAiBD","sourcesContent":["import assert from '../utils/assert';\nimport {isImageTypeSupported, getDefaultImageType} from '../parsed-image-api/image-type';\n\nimport parseToNodeImage from './parse-to-node-image';\nimport parseToImage from './parse-to-image';\nimport parseToImageBitmap from './parse-to-image-bitmap';\nimport parseSVG from './parse-svg';\n\n// Parse to platform defined image type (ndarray on node, ImageBitmap or HTMLImage on browser)\nexport default async function parseImage(arrayBuffer, options, context) {\n  options = options || {};\n\n  const {url} = context || {};\n  if (url && /\\.svg((\\?|#).*)?$/.test(url)) {\n    // eslint-disable-next-line\n    console.warn('@loaders.gl/images: SVG parsing needs to be fixed for 2.0');\n    return await parseSVG(arrayBuffer, options);\n  }\n\n  const format = getImageOutputFormat(options);\n  switch (format) {\n    case 'imagebitmap':\n      return await parseToImageBitmap(arrayBuffer, options);\n    case 'html':\n      return await parseToImage(arrayBuffer, options);\n    case 'ndarray':\n      return await parseToNodeImage(arrayBuffer, options);\n    default:\n      return assert(false);\n  }\n}\n\n// The user can request a specific output format via `options.type`\n// TODO - ImageBitmap vs HTMLImage depends on worker threads...\nfunction getImageOutputFormat(options = {}) {\n  const imageOptions = options.image || {};\n  const type = imageOptions.type || 'auto';\n\n  switch (type) {\n    case 'imagebitmap':\n    case 'html':\n    case 'ndarray':\n      // Check that it is actually supported\n      if (!isImageTypeSupported(type)) {\n        throw new Error(`Requested image type ${type} not available in current environment`);\n      }\n      return type;\n\n    case 'auto':\n      return getDefaultImageType();\n\n    default:\n      // Note: isImageTypeSupported throws on unknown type\n      throw new Error(`Unknown image format ${type}`);\n  }\n}\n"],"file":"parse-image.js"}