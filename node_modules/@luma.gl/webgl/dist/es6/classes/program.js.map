{"version":3,"sources":["../../../src/classes/program.js"],"names":["Resource","Texture","Framebuffer","parseUniformName","getUniformSetter","VertexShader","FragmentShader","ProgramConfiguration","copyUniform","checkUniformValues","isWebGL2","withParameters","log","assertWebGL2Context","getKey","getPrimitiveDrawMode","uid","assert","LOG_PROGRAM_PERF_PRIORITY","GL_SEPARATE_ATTRIBS","V6_DEPRECATED_METHODS","Program","constructor","gl","props","stubRemovedMethods","_isCached","initialize","Object","seal","_setId","id","hash","vs","fs","varyings","bufferMode","debug","source","uniforms","_textureUniforms","_texturesRenderable","length","transformFeedbackVaryings","handle","_compileAndLink","_readUniformLocationsFromLinkedProgram","configuration","setProps","delete","options","setUniforms","draw","logPriority","drawMode","vertexCount","offset","start","end","isIndexed","indexType","instanceCount","isInstanced","vertexArray","transformFeedback","framebuffer","parameters","samplers","deprecated","undefined","fb","message","useProgram","_areTexturesRenderable","bindForDraw","assign","primitiveMode","begin","_bindTextures","drawElementsInstanced","isNaN","drawRangeElements","drawElements","drawArraysInstanced","drawArrays","_uniformSetters","uniformName","uniform","uniformSetter","value","textureUpdate","texture","textureIndex","_textureIndexCounter","bind","loaded","_createHandle","createProgram","_deleteHandle","deleteProgram","_getOptionsFromHandle","shaderHandles","getAttachedShaders","opts","shaderHandle","type","getShaderParameter","_getParameter","pname","getProgramParameter","programName","_getName","getName","replace","attachShader","time","linkProgram","timeEnd","level","validateProgram","linked","Error","getProgramInfoLog","_uniformCount","i","info","getActiveUniform","name","isArray","location","getUniformLocation","size","l","getActiveUniforms","uniformIndices","getUniformBlockIndex","blockName","getActiveUniformBlockParameter","blockIndex","uniformBlockBinding","blockBinding"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\n\nimport Resource from './resource';\nimport Texture from './texture';\nimport Framebuffer from './framebuffer';\nimport {parseUniformName, getUniformSetter} from './uniforms';\nimport {VertexShader, FragmentShader} from './shader';\nimport ProgramConfiguration from './program-configuration';\nimport {copyUniform, checkUniformValues} from './uniforms';\n\nimport {isWebGL2, withParameters, log} from '@luma.gl/gltools';\nimport {assertWebGL2Context, getKey} from '../webgl-utils';\nimport {getPrimitiveDrawMode} from '../webgl-utils/attribute-utils';\nimport {uid, assert} from '../utils';\n\nconst LOG_PROGRAM_PERF_PRIORITY = 4;\n\nconst GL_SEPARATE_ATTRIBS = 0x8c8d;\n\nconst V6_DEPRECATED_METHODS = [\n  'setVertexArray',\n  'setAttributes',\n  'setBuffers',\n  'unsetBuffers',\n\n  'use',\n  'getUniformCount',\n  'getUniformInfo',\n  'getUniformLocation',\n  'getUniformValue',\n\n  'getVarying',\n  'getFragDataLocation',\n  'getAttachedShaders',\n  'getAttributeCount',\n  'getAttributeLocation',\n  'getAttributeInfo'\n];\n\nexport default class Program extends Resource {\n  constructor(gl, props = {}) {\n    super(gl, props);\n\n    this.stubRemovedMethods('Program', 'v6.0', V6_DEPRECATED_METHODS);\n\n    // Experimental flag to avoid deleting Program object while it is cached\n    this._isCached = false;\n\n    this.initialize(props);\n\n    Object.seal(this);\n\n    this._setId(props.id);\n  }\n\n  initialize(props = {}) {\n    const {hash, vs, fs, varyings, bufferMode = GL_SEPARATE_ATTRIBS, debug = false} = props;\n\n    this.hash = hash || ''; // Used by ProgramManager\n    this.debug = debug;\n\n    // Create shaders if needed\n    this.vs =\n      typeof vs === 'string' ? new VertexShader(this.gl, {id: `${props.id}-vs`, source: vs}) : vs;\n    this.fs =\n      typeof fs === 'string' ? new FragmentShader(this.gl, {id: `${props.id}-fs`, source: fs}) : fs;\n    assert(this.vs instanceof VertexShader);\n    assert(this.fs instanceof FragmentShader);\n\n    // uniforms\n    this.uniforms = {};\n\n    this._textureUniforms = {};\n    this._texturesRenderable = true;\n\n    // Setup varyings if supplied\n    if (varyings && varyings.length > 0) {\n      assertWebGL2Context(this.gl);\n      this.varyings = varyings;\n      this.gl.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n    }\n\n    this._compileAndLink();\n    this._readUniformLocationsFromLinkedProgram();\n    this.configuration = new ProgramConfiguration(this);\n\n    return this.setProps(props);\n  }\n\n  delete(options = {}) {\n    if (this._isCached) {\n      // This object is cached, do not delete\n      return this;\n    }\n    return super.delete(options);\n  }\n\n  setProps(props) {\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms);\n    }\n    return this;\n  }\n\n  // A good thing about the WebGL API is that there are so many ways to draw things ;)\n  // This function unifies those ways into a single call using common parameters with sane defaults\n  draw({\n    logPriority, // Probe log priority, enables Model to do more integrated logging\n\n    drawMode = GL.TRIANGLES,\n    vertexCount,\n    offset = 0,\n    start,\n    end,\n    isIndexed = false,\n    indexType = GL.UNSIGNED_SHORT,\n    instanceCount = 0,\n    isInstanced = instanceCount > 0,\n\n    vertexArray = null,\n    transformFeedback,\n    framebuffer,\n    parameters = {},\n\n    // Deprecated\n    uniforms,\n    samplers\n  }) {\n    if (uniforms || samplers) {\n      // DEPRECATED: v7.0 (deprecated earlier but warning not properly implemented)\n      log.deprecated('Program.draw({uniforms})', 'Program.setUniforms(uniforms)')();\n      this.setUniforms(uniforms || {});\n    }\n\n    if (this.debug && logPriority !== undefined) {\n      const fb = framebuffer ? framebuffer.id : 'default';\n      const message =\n        `mode=${getKey(this.gl, drawMode)} verts=${vertexCount} ` +\n        `instances=${instanceCount} indexType=${getKey(this.gl, indexType)} ` +\n        `isInstanced=${isInstanced} isIndexed=${isIndexed} ` +\n        `Framebuffer=${fb}`;\n      log.log(logPriority, message)();\n    }\n\n    // TODO - move vertex array binding and transform feedback binding to withParameters?\n    assert(vertexArray);\n\n    this.gl.useProgram(this.handle);\n\n    // Note: async textures set as uniforms might still be loading.\n    // Now that all uniforms have been updated, check if any texture\n    // in the uniforms is not yet initialized, then we don't draw\n    if (!this._areTexturesRenderable()) {\n      return false;\n    }\n\n    vertexArray.bindForDraw(vertexCount, instanceCount, () => {\n      if (framebuffer !== undefined) {\n        parameters = Object.assign({}, parameters, {framebuffer});\n      }\n\n      if (transformFeedback) {\n        const primitiveMode = getPrimitiveDrawMode(drawMode);\n        transformFeedback.begin(primitiveMode);\n      }\n\n      this._bindTextures();\n\n      withParameters(this.gl, parameters, () => {\n        // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension\n        if (isIndexed && isInstanced) {\n          this.gl.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);\n        } else if (isIndexed && isWebGL2(this.gl) && !isNaN(start) && !isNaN(end)) {\n          this.gl.drawRangeElements(drawMode, start, end, vertexCount, indexType, offset);\n        } else if (isIndexed) {\n          this.gl.drawElements(drawMode, vertexCount, indexType, offset);\n        } else if (isInstanced) {\n          this.gl.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);\n        } else {\n          this.gl.drawArrays(drawMode, offset, vertexCount);\n        }\n      });\n\n      if (transformFeedback) {\n        transformFeedback.end();\n      }\n    });\n\n    return true;\n  }\n\n  setUniforms(uniforms = {}) {\n    if (this.debug) {\n      checkUniformValues(uniforms, this.id, this._uniformSetters);\n    }\n\n    this.gl.useProgram(this.handle);\n\n    for (const uniformName in uniforms) {\n      const uniform = uniforms[uniformName];\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter) {\n        let value = uniform;\n        let textureUpdate = false;\n\n        if (value instanceof Framebuffer) {\n          value = value.texture;\n        }\n        if (value instanceof Texture) {\n          textureUpdate = this.uniforms[uniformName] !== uniform;\n\n          if (textureUpdate) {\n            // eslint-disable-next-line max-depth\n            if (uniformSetter.textureIndex === undefined) {\n              uniformSetter.textureIndex = this._textureIndexCounter++;\n            }\n\n            // Bind texture to index\n            const texture = value;\n            const {textureIndex} = uniformSetter;\n\n            texture.bind(textureIndex);\n            value = textureIndex;\n\n            if (!texture.loaded) {\n              this._texturesRenderable = false;\n            }\n\n            this._textureUniforms[uniformName] = texture;\n          } else {\n            value = uniformSetter.textureIndex;\n          }\n        } else if (this._textureUniforms[uniformName]) {\n          delete this._textureUniforms[uniformName];\n        }\n\n        // NOTE(Tarek): uniformSetter returns whether\n        //   value had to be updated or not.\n        if (uniformSetter(value) || textureUpdate) {\n          copyUniform(this.uniforms, uniformName, uniform);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  // Checks if all texture-values uniforms are renderable (i.e. loaded)\n  // Note: This is currently done before every draw call\n  _areTexturesRenderable() {\n    if (this._texturesRenderable) {\n      return true;\n    }\n\n    this._texturesRenderable = true;\n\n    for (const uniformName in this._textureUniforms) {\n      const texture = this._textureUniforms[uniformName];\n      this._texturesRenderable = this._texturesRenderable && texture.loaded;\n    }\n\n    return this._texturesRenderable;\n  }\n\n  // Binds textures\n  // Note: This is currently done before every draw call\n  _bindTextures() {\n    for (const uniformName in this._textureUniforms) {\n      const textureIndex = this._uniformSetters[uniformName].textureIndex;\n      this._textureUniforms[uniformName].bind(textureIndex);\n    }\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createProgram();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteProgram(this.handle);\n  }\n\n  // Extract opts needed to initialize a `Program` from an independently created WebGLProgram handle\n  _getOptionsFromHandle(handle) {\n    const shaderHandles = this.gl.getAttachedShaders(handle);\n    const opts = {};\n    for (const shaderHandle of shaderHandles) {\n      const type = this.gl.getShaderParameter(this.handle, GL.SHADER_TYPE);\n      switch (type) {\n        case GL.VERTEX_SHADER:\n          opts.vs = new VertexShader({handle: shaderHandle});\n          break;\n        case GL.FRAGMENT_SHADER:\n          opts.fs = new FragmentShader({handle: shaderHandle});\n          break;\n        default:\n      }\n    }\n    return opts;\n  }\n\n  _getParameter(pname) {\n    return this.gl.getProgramParameter(this.handle, pname);\n  }\n\n  // If program is not named, name it after shader names\n  // TODO - this.id will already have been initialized\n  _setId(id) {\n    if (!id) {\n      const programName = this._getName();\n      this.id = uid(programName);\n    }\n  }\n\n  // Generate a default name for the program based on names of the shaders\n  _getName() {\n    let programName = this.vs.getName() || this.fs.getName();\n    programName = programName.replace(/shader/i, '');\n    programName = programName ? `${programName}-program` : 'program';\n    return programName;\n  }\n\n  _compileAndLink() {\n    const {gl} = this;\n    gl.attachShader(this.handle, this.vs.handle);\n    gl.attachShader(this.handle, this.fs.handle);\n    log.time(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n    gl.linkProgram(this.handle);\n    log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n\n    // Avoid checking program linking error in production\n    if (gl.debug || log.level > 0) {\n      gl.validateProgram(this.handle);\n      const linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n      if (!linked) {\n        throw new Error(`Error linking: ${gl.getProgramInfoLog(this.handle)}`);\n      }\n    }\n  }\n\n  // query uniform locations and build name to setter map.\n  // TODO - This overlaps with ProgramConfiguration?\n  _readUniformLocationsFromLinkedProgram() {\n    const {gl} = this;\n    this._uniformSetters = {};\n    this._uniformCount = this._getParameter(GL.ACTIVE_UNIFORMS);\n    for (let i = 0; i < this._uniformCount; i++) {\n      const info = this.gl.getActiveUniform(this.handle, i);\n      const {name, isArray} = parseUniformName(info.name);\n      let location = gl.getUniformLocation(this.handle, name);\n      this._uniformSetters[name] = getUniformSetter(gl, location, info, isArray);\n      if (info.size > 1) {\n        for (let l = 0; l < info.size; l++) {\n          location = gl.getUniformLocation(this.handle, `${name}[${l}]`);\n          this._uniformSetters[`${name}[${l}]`] = getUniformSetter(gl, location, info, isArray);\n        }\n      }\n    }\n    this._textureIndexCounter = 0;\n  }\n\n  // TO BE REMOVED in v7?\n\n  // Rretrieves information about active uniforms identifed by their indices (`uniformIndices`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniforms\n  getActiveUniforms(uniformIndices, pname) {\n    return this.gl.getActiveUniforms(this.handle, uniformIndices, pname);\n  }\n\n  // Retrieves the index of a uniform block\n  getUniformBlockIndex(blockName) {\n    return this.gl.getUniformBlockIndex(this.handle, blockName);\n  }\n\n  // Retrieves information about an active uniform block (`blockIndex`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter\n  getActiveUniformBlockParameter(blockIndex, pname) {\n    return this.gl.getActiveUniformBlockParameter(this.handle, blockIndex, pname);\n  }\n\n  // Binds a uniform block (`blockIndex`) to a specific binding point (`blockBinding`)\n  uniformBlockBinding(blockIndex, blockBinding) {\n    this.gl.uniformBlockBinding(this.handle, blockIndex, blockBinding);\n  }\n}\n"],"file":"program.js"}