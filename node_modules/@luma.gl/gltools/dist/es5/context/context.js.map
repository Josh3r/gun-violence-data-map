{"version":3,"sources":["../../../src/context/context.js"],"names":["ERR_CONTEXT","ERR_WEBGL","ERR_WEBGL2","isBrowser","isPage","document","CONTEXT_DEFAULTS","webgl2","webgl1","throwOnError","manageState","canvas","debug","width","height","createGLContext","options","Object","assign","onError","message","Error","gl","targetCanvas","getCanvas","createBrowserContext","instrumentGLContext","logInfo","_instrumented","_version","getVersion","luma","canvasSizeInfo","copyState","log","args","global","makeDebugContext","warn","level","Math","max","getContextDebugInfo","vendorMasked","getParameter","rendererMasked","ext","getExtension","vendorUnmasked","UNMASKED_VENDOR_WEBGL","rendererUnmasked","UNMASKED_RENDERER_WEBGL","vendor","renderer","version","shadingLanguageVersion","resizeGLContext","devicePixelRatio","useDevicePixels","setDevicePixelRatio","resize","onCreateError","error","statusMessage","addEventListener","getContext","removeEventListener","isPageLoaded","readyState","getElementById","createElement","id","style","Number","isFinite","body","insertBefore","firstChild","webGL","info","driver","WebGL2RenderingContext","clientWidth","clientHeight","cachedSize","clampedPixelRatio","canvasWidth","floor","canvasHeight","drawingBufferWidth","drawingBufferHeight","min"],"mappings":"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","sourcesContent":["/* eslint-disable quotes */\n/* global document, WebGL2RenderingContext */\n// WebGLRenderingContext related methods\nimport GL from '@luma.gl/constants';\nimport {global, isBrowser as getIsBrowser} from 'probe.gl/env';\nimport trackContextState from '../state-tracker/track-context-state';\n\nimport {log, assert, getDevicePixelRatio, isWebGL2} from '../utils';\n\nexport const ERR_CONTEXT = 'Invalid WebGLRenderingContext';\nexport const ERR_WEBGL = ERR_CONTEXT;\nexport const ERR_WEBGL2 = 'Requires WebGL2';\n\nconst isBrowser = getIsBrowser();\nconst isPage = isBrowser && typeof document !== 'undefined';\n\nconst CONTEXT_DEFAULTS = {\n  // COMMON CONTEXT PARAMETERS\n  // Attempt to allocate WebGL2 context\n  webgl2: true, // Attempt to create a WebGL2 context (false to force webgl1)\n  webgl1: true, // Attempt to create a WebGL1 context (false to fail if webgl2 not available)\n  throwOnError: false,\n  manageState: true,\n  // BROWSER CONTEXT PARAMETERS\n  canvas: null, // A canvas element or a canvas string id\n  debug: false, // Instrument context (at the expense of performance)\n  // HEADLESS CONTEXT PARAMETERS\n  width: 800, // width are height are only used by headless gl\n  height: 600\n  // WEBGL/HEADLESS CONTEXT PARAMETERS\n  // Remaining options are passed through to context creator\n};\n\n/*\n * Creates a context giving access to the WebGL API\n */\n/* eslint-disable complexity, max-statements */\nexport function createGLContext(options = {}) {\n  assert(\n    isBrowser,\n    \"createGLContext on available in the browser.\\nCreate your own headless context or use 'createHeadlessContext' from @luma.gl/test-utils\"\n  );\n\n  options = Object.assign({}, CONTEXT_DEFAULTS, options);\n  const {width, height} = options;\n\n  // Error reporting function, enables exceptions to be disabled\n  function onError(message) {\n    if (options.throwOnError) {\n      throw new Error(message);\n    }\n    return null;\n  }\n\n  let gl;\n  // Get or create a canvas\n  const {canvas} = options;\n  const targetCanvas = getCanvas({canvas, width, height, onError});\n  // Create a WebGL context in the canvas\n  gl = createBrowserContext(targetCanvas, options);\n\n  if (!gl) {\n    return null;\n  }\n\n  gl = instrumentGLContext(gl, options);\n\n  // Log some debug info about the newly created context\n  logInfo(gl);\n\n  // Add to seer integration\n  return gl;\n}\n\nexport function instrumentGLContext(gl, options = {}) {\n  // Avoid multiple instrumentations\n  if (!gl || gl._instrumented) {\n    return gl;\n  }\n\n  gl._version = gl._version || getVersion(gl);\n\n  // Cache canvas size information to avoid setting it on every frame.\n  gl.luma = gl.luma || {};\n  gl.luma.canvasSizeInfo = gl.luma.canvasSizeInfo || {};\n\n  options = Object.assign({}, CONTEXT_DEFAULTS, options);\n  const {manageState, debug} = options;\n\n  // Install context state tracking\n  if (manageState) {\n    trackContextState(gl, {\n      copyState: false,\n      log: (...args) => log.log(1, ...args)()\n    });\n  }\n\n  // Add debug instrumentation to the context\n  if (isBrowser && debug) {\n    if (!global.makeDebugContext) {\n      log.warn('WebGL debug mode not activated. import \"@luma.gl/debug\" to enable.')();\n    } else {\n      gl = global.makeDebugContext(gl, options);\n      // Debug forces log level to at least 1\n      log.level = Math.max(log.level, 1);\n    }\n  }\n\n  gl._instrumented = true;\n\n  return gl;\n}\n\n/**\n * Provides strings identifying the GPU vendor and driver.\n * https://www.khronos.org/registry/webgl/extensions/WEBGL_debug_renderer_info/\n * @param {WebGLRenderingContext} gl - context\n * @return {Object} - 'vendor' and 'renderer' string fields.\n */\nexport function getContextDebugInfo(gl) {\n  const vendorMasked = gl.getParameter(GL.VENDOR);\n  const rendererMasked = gl.getParameter(GL.RENDERER);\n  const ext = gl.getExtension('WEBGL_debug_renderer_info');\n  const vendorUnmasked = ext && gl.getParameter(ext.UNMASKED_VENDOR_WEBGL || GL.VENDOR);\n  const rendererUnmasked = ext && gl.getParameter(ext.UNMASKED_RENDERER_WEBGL || GL.RENDERER);\n  return {\n    vendor: vendorUnmasked || vendorMasked,\n    renderer: rendererUnmasked || rendererMasked,\n    vendorMasked,\n    rendererMasked,\n    version: gl.getParameter(GL.VERSION),\n    shadingLanguageVersion: gl.getParameter(GL.SHADING_LANGUAGE_VERSION)\n  };\n}\n\n/**\n * Resize the canvas' drawing buffer.\n *\n * Can match the canvas CSS size, and optionally also consider devicePixelRatio\n * Can be called every frame\n *\n * Regardless of size, the drawing buffer will always be scaled to the viewport, but\n * for best visual results, usually set to either:\n *  canvas CSS width x canvas CSS height\n *  canvas CSS width * devicePixelRatio x canvas CSS height * devicePixelRatio\n * See http://webgl2fundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html\n *\n * resizeGLContext(gl, {width, height, useDevicePixels})\n */\nexport function resizeGLContext(gl, options = {}) {\n  // Resize browser context\n  if (gl.canvas) {\n    const devicePixelRatio = getDevicePixelRatio(options.useDevicePixels);\n    setDevicePixelRatio(gl, devicePixelRatio, options);\n    return;\n  }\n\n  // Resize headless gl context\n  const ext = gl.getExtension('STACKGL_resize_drawingbuffer');\n  if (ext && `width` in options && `height` in options) {\n    ext.resize(options.width, options.height);\n  }\n}\n\n// HELPER METHODS\n\n/**\n * Create a WebGL context for a canvas\n * Note calling this multiple time on the same canvas does return the same context\n */\n\nfunction createBrowserContext(canvas, options) {\n  const {onError = message => null} = options;\n\n  // Try to extract any extra information about why context creation failed\n  const onCreateError = error => onError(`WebGL context: ${error.statusMessage || 'error'}`);\n  canvas.addEventListener('webglcontextcreationerror', onCreateError, false);\n\n  const {webgl1 = true, webgl2 = true} = options;\n  let gl = null;\n  // Prefer webgl2 over webgl1, prefer conformant over experimental\n  if (webgl2) {\n    gl = gl || canvas.getContext('webgl2', options);\n    gl = gl || canvas.getContext('experimental-webgl2', options);\n  }\n  if (webgl1) {\n    gl = gl || canvas.getContext('webgl', options);\n    gl = gl || canvas.getContext('experimental-webgl', options);\n  }\n\n  canvas.removeEventListener('webglcontextcreationerror', onCreateError, false);\n\n  if (!gl) {\n    return onError(`Failed to create ${webgl2 && !webgl1 ? 'WebGL2' : 'WebGL'} context`);\n  }\n\n  return gl;\n}\n\nfunction getCanvas({canvas, width = 800, height = 600, onError = () => {}}) {\n  let targetCanvas;\n  if (typeof canvas === 'string') {\n    const isPageLoaded = isPage && document.readyState === 'complete';\n    if (!isPageLoaded) {\n      onError(`createGLContext called on canvas '${canvas}' before page was loaded`);\n    }\n    targetCanvas = document.getElementById(canvas);\n  } else if (canvas) {\n    targetCanvas = canvas;\n  } else {\n    targetCanvas = document.createElement('canvas');\n    targetCanvas.id = 'lumagl-canvas';\n    targetCanvas.style.width = Number.isFinite(width) ? `${width}px` : '100%';\n    targetCanvas.style.height = Number.isFinite(height) ? `${height}px` : '100%';\n    document.body.insertBefore(targetCanvas, document.body.firstChild);\n  }\n\n  return targetCanvas;\n}\n\nfunction logInfo(gl) {\n  const webGL = isWebGL2(gl) ? 'WebGL2' : 'WebGL1';\n  const info = getContextDebugInfo(gl);\n  const driver = info ? `(${info.vendor},${info.renderer})` : '';\n  const debug = gl.debug ? ' debug' : '';\n  log.info(1, `${webGL}${debug} context ${driver}`)();\n}\n\nfunction getVersion(gl) {\n  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {\n    // WebGL2 context.\n    return 2;\n  }\n  // Must be a WebGL1 context.\n  return 1;\n}\n\n// use devicePixelRatio to set canvas width and height\nfunction setDevicePixelRatio(gl, devicePixelRatio, options) {\n  // NOTE: if options.width and options.height not used remove in v8\n  let clientWidth = 'width' in options ? options.width : gl.canvas.clientWidth;\n  let clientHeight = 'height' in options ? options.height : gl.canvas.clientHeight;\n\n  if (!clientWidth || !clientHeight) {\n    log.log(1, 'Canvas clientWidth/clientHeight is 0')();\n    // by forcing devicePixel ratio to 1, we do not scale gl.canvas.width and height in each frame.\n    devicePixelRatio = 1;\n    clientWidth = gl.canvas.width || 1;\n    clientHeight = gl.canvas.height || 1;\n  }\n\n  gl.luma = gl.luma || {};\n  gl.luma.canvasSizeInfo = gl.luma.canvasSizeInfo || {};\n  const cachedSize = gl.luma.canvasSizeInfo;\n  // Check if canvas needs to be resized\n  if (\n    cachedSize.clientWidth !== clientWidth ||\n    cachedSize.clientHeight !== clientHeight ||\n    cachedSize.devicePixelRatio !== devicePixelRatio\n  ) {\n    let clampedPixelRatio = devicePixelRatio;\n\n    const canvasWidth = Math.floor(clientWidth * clampedPixelRatio);\n    const canvasHeight = Math.floor(clientHeight * clampedPixelRatio);\n    gl.canvas.width = canvasWidth;\n    gl.canvas.height = canvasHeight;\n\n    // Note: when devicePixelRatio is too high, it is possible we might hit system limit for\n    // drawing buffer width and hight, in those cases they get clamped and resulting aspect ration may not be maintained\n    // for those cases, reduce devicePixelRatio.\n    if (gl.drawingBufferWidth !== canvasWidth || gl.drawingBufferHeight !== canvasHeight) {\n      log.warn(`Device pixel ratio clamped`)();\n      clampedPixelRatio = Math.min(\n        gl.drawingBufferWidth / clientWidth,\n        gl.drawingBufferHeight / clientHeight\n      );\n\n      gl.canvas.width = Math.floor(clientWidth * clampedPixelRatio);\n      gl.canvas.height = Math.floor(clientHeight * clampedPixelRatio);\n    }\n\n    Object.assign(gl.luma.canvasSizeInfo, {clientWidth, clientHeight, devicePixelRatio});\n  }\n}\n"],"file":"context.js"}