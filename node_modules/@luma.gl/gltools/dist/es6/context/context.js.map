{"version":3,"sources":["../../../src/context/context.js"],"names":["global","isBrowser","getIsBrowser","trackContextState","log","assert","getDevicePixelRatio","isWebGL2","ERR_CONTEXT","ERR_WEBGL","ERR_WEBGL2","isPage","document","CONTEXT_DEFAULTS","webgl2","webgl1","throwOnError","manageState","canvas","debug","width","height","createGLContext","options","Object","assign","onError","message","Error","gl","targetCanvas","getCanvas","createBrowserContext","instrumentGLContext","logInfo","_instrumented","_version","getVersion","luma","canvasSizeInfo","copyState","args","makeDebugContext","warn","level","Math","max","getContextDebugInfo","vendorMasked","getParameter","rendererMasked","ext","getExtension","vendorUnmasked","UNMASKED_VENDOR_WEBGL","rendererUnmasked","UNMASKED_RENDERER_WEBGL","vendor","renderer","version","shadingLanguageVersion","resizeGLContext","devicePixelRatio","useDevicePixels","setDevicePixelRatio","resize","onCreateError","error","statusMessage","addEventListener","getContext","removeEventListener","isPageLoaded","readyState","getElementById","createElement","id","style","Number","isFinite","body","insertBefore","firstChild","webGL","info","driver","WebGL2RenderingContext","clientWidth","clientHeight","cachedSize","clampedPixelRatio","canvasWidth","floor","canvasHeight","drawingBufferWidth","drawingBufferHeight","min"],"mappings":"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","sourcesContent":["/* eslint-disable quotes */\n/* global document, WebGL2RenderingContext */\n// WebGLRenderingContext related methods\nimport GL from '@luma.gl/constants';\nimport {global, isBrowser as getIsBrowser} from 'probe.gl/env';\nimport trackContextState from '../state-tracker/track-context-state';\n\nimport {log, assert, getDevicePixelRatio, isWebGL2} from '../utils';\n\nexport const ERR_CONTEXT = 'Invalid WebGLRenderingContext';\nexport const ERR_WEBGL = ERR_CONTEXT;\nexport const ERR_WEBGL2 = 'Requires WebGL2';\n\nconst isBrowser = getIsBrowser();\nconst isPage = isBrowser && typeof document !== 'undefined';\n\nconst CONTEXT_DEFAULTS = {\n  // COMMON CONTEXT PARAMETERS\n  // Attempt to allocate WebGL2 context\n  webgl2: true, // Attempt to create a WebGL2 context (false to force webgl1)\n  webgl1: true, // Attempt to create a WebGL1 context (false to fail if webgl2 not available)\n  throwOnError: false,\n  manageState: true,\n  // BROWSER CONTEXT PARAMETERS\n  canvas: null, // A canvas element or a canvas string id\n  debug: false, // Instrument context (at the expense of performance)\n  // HEADLESS CONTEXT PARAMETERS\n  width: 800, // width are height are only used by headless gl\n  height: 600\n  // WEBGL/HEADLESS CONTEXT PARAMETERS\n  // Remaining options are passed through to context creator\n};\n\n/*\n * Creates a context giving access to the WebGL API\n */\n/* eslint-disable complexity, max-statements */\nexport function createGLContext(options = {}) {\n  assert(\n    isBrowser,\n    \"createGLContext on available in the browser.\\nCreate your own headless context or use 'createHeadlessContext' from @luma.gl/test-utils\"\n  );\n\n  options = Object.assign({}, CONTEXT_DEFAULTS, options);\n  const {width, height} = options;\n\n  // Error reporting function, enables exceptions to be disabled\n  function onError(message) {\n    if (options.throwOnError) {\n      throw new Error(message);\n    }\n    return null;\n  }\n\n  let gl;\n  // Get or create a canvas\n  const {canvas} = options;\n  const targetCanvas = getCanvas({canvas, width, height, onError});\n  // Create a WebGL context in the canvas\n  gl = createBrowserContext(targetCanvas, options);\n\n  if (!gl) {\n    return null;\n  }\n\n  gl = instrumentGLContext(gl, options);\n\n  // Log some debug info about the newly created context\n  logInfo(gl);\n\n  // Add to seer integration\n  return gl;\n}\n\nexport function instrumentGLContext(gl, options = {}) {\n  // Avoid multiple instrumentations\n  if (!gl || gl._instrumented) {\n    return gl;\n  }\n\n  gl._version = gl._version || getVersion(gl);\n\n  // Cache canvas size information to avoid setting it on every frame.\n  gl.luma = gl.luma || {};\n  gl.luma.canvasSizeInfo = gl.luma.canvasSizeInfo || {};\n\n  options = Object.assign({}, CONTEXT_DEFAULTS, options);\n  const {manageState, debug} = options;\n\n  // Install context state tracking\n  if (manageState) {\n    trackContextState(gl, {\n      copyState: false,\n      log: (...args) => log.log(1, ...args)()\n    });\n  }\n\n  // Add debug instrumentation to the context\n  if (isBrowser && debug) {\n    if (!global.makeDebugContext) {\n      log.warn('WebGL debug mode not activated. import \"@luma.gl/debug\" to enable.')();\n    } else {\n      gl = global.makeDebugContext(gl, options);\n      // Debug forces log level to at least 1\n      log.level = Math.max(log.level, 1);\n    }\n  }\n\n  gl._instrumented = true;\n\n  return gl;\n}\n\n/**\n * Provides strings identifying the GPU vendor and driver.\n * https://www.khronos.org/registry/webgl/extensions/WEBGL_debug_renderer_info/\n * @param {WebGLRenderingContext} gl - context\n * @return {Object} - 'vendor' and 'renderer' string fields.\n */\nexport function getContextDebugInfo(gl) {\n  const vendorMasked = gl.getParameter(GL.VENDOR);\n  const rendererMasked = gl.getParameter(GL.RENDERER);\n  const ext = gl.getExtension('WEBGL_debug_renderer_info');\n  const vendorUnmasked = ext && gl.getParameter(ext.UNMASKED_VENDOR_WEBGL || GL.VENDOR);\n  const rendererUnmasked = ext && gl.getParameter(ext.UNMASKED_RENDERER_WEBGL || GL.RENDERER);\n  return {\n    vendor: vendorUnmasked || vendorMasked,\n    renderer: rendererUnmasked || rendererMasked,\n    vendorMasked,\n    rendererMasked,\n    version: gl.getParameter(GL.VERSION),\n    shadingLanguageVersion: gl.getParameter(GL.SHADING_LANGUAGE_VERSION)\n  };\n}\n\n/**\n * Resize the canvas' drawing buffer.\n *\n * Can match the canvas CSS size, and optionally also consider devicePixelRatio\n * Can be called every frame\n *\n * Regardless of size, the drawing buffer will always be scaled to the viewport, but\n * for best visual results, usually set to either:\n *  canvas CSS width x canvas CSS height\n *  canvas CSS width * devicePixelRatio x canvas CSS height * devicePixelRatio\n * See http://webgl2fundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html\n *\n * resizeGLContext(gl, {width, height, useDevicePixels})\n */\nexport function resizeGLContext(gl, options = {}) {\n  // Resize browser context\n  if (gl.canvas) {\n    const devicePixelRatio = getDevicePixelRatio(options.useDevicePixels);\n    setDevicePixelRatio(gl, devicePixelRatio, options);\n    return;\n  }\n\n  // Resize headless gl context\n  const ext = gl.getExtension('STACKGL_resize_drawingbuffer');\n  if (ext && `width` in options && `height` in options) {\n    ext.resize(options.width, options.height);\n  }\n}\n\n// HELPER METHODS\n\n/**\n * Create a WebGL context for a canvas\n * Note calling this multiple time on the same canvas does return the same context\n */\n\nfunction createBrowserContext(canvas, options) {\n  const {onError = message => null} = options;\n\n  // Try to extract any extra information about why context creation failed\n  const onCreateError = error => onError(`WebGL context: ${error.statusMessage || 'error'}`);\n  canvas.addEventListener('webglcontextcreationerror', onCreateError, false);\n\n  const {webgl1 = true, webgl2 = true} = options;\n  let gl = null;\n  // Prefer webgl2 over webgl1, prefer conformant over experimental\n  if (webgl2) {\n    gl = gl || canvas.getContext('webgl2', options);\n    gl = gl || canvas.getContext('experimental-webgl2', options);\n  }\n  if (webgl1) {\n    gl = gl || canvas.getContext('webgl', options);\n    gl = gl || canvas.getContext('experimental-webgl', options);\n  }\n\n  canvas.removeEventListener('webglcontextcreationerror', onCreateError, false);\n\n  if (!gl) {\n    return onError(`Failed to create ${webgl2 && !webgl1 ? 'WebGL2' : 'WebGL'} context`);\n  }\n\n  return gl;\n}\n\nfunction getCanvas({canvas, width = 800, height = 600, onError = () => {}}) {\n  let targetCanvas;\n  if (typeof canvas === 'string') {\n    const isPageLoaded = isPage && document.readyState === 'complete';\n    if (!isPageLoaded) {\n      onError(`createGLContext called on canvas '${canvas}' before page was loaded`);\n    }\n    targetCanvas = document.getElementById(canvas);\n  } else if (canvas) {\n    targetCanvas = canvas;\n  } else {\n    targetCanvas = document.createElement('canvas');\n    targetCanvas.id = 'lumagl-canvas';\n    targetCanvas.style.width = Number.isFinite(width) ? `${width}px` : '100%';\n    targetCanvas.style.height = Number.isFinite(height) ? `${height}px` : '100%';\n    document.body.insertBefore(targetCanvas, document.body.firstChild);\n  }\n\n  return targetCanvas;\n}\n\nfunction logInfo(gl) {\n  const webGL = isWebGL2(gl) ? 'WebGL2' : 'WebGL1';\n  const info = getContextDebugInfo(gl);\n  const driver = info ? `(${info.vendor},${info.renderer})` : '';\n  const debug = gl.debug ? ' debug' : '';\n  log.info(1, `${webGL}${debug} context ${driver}`)();\n}\n\nfunction getVersion(gl) {\n  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {\n    // WebGL2 context.\n    return 2;\n  }\n  // Must be a WebGL1 context.\n  return 1;\n}\n\n// use devicePixelRatio to set canvas width and height\nfunction setDevicePixelRatio(gl, devicePixelRatio, options) {\n  // NOTE: if options.width and options.height not used remove in v8\n  let clientWidth = 'width' in options ? options.width : gl.canvas.clientWidth;\n  let clientHeight = 'height' in options ? options.height : gl.canvas.clientHeight;\n\n  if (!clientWidth || !clientHeight) {\n    log.log(1, 'Canvas clientWidth/clientHeight is 0')();\n    // by forcing devicePixel ratio to 1, we do not scale gl.canvas.width and height in each frame.\n    devicePixelRatio = 1;\n    clientWidth = gl.canvas.width || 1;\n    clientHeight = gl.canvas.height || 1;\n  }\n\n  gl.luma = gl.luma || {};\n  gl.luma.canvasSizeInfo = gl.luma.canvasSizeInfo || {};\n  const cachedSize = gl.luma.canvasSizeInfo;\n  // Check if canvas needs to be resized\n  if (\n    cachedSize.clientWidth !== clientWidth ||\n    cachedSize.clientHeight !== clientHeight ||\n    cachedSize.devicePixelRatio !== devicePixelRatio\n  ) {\n    let clampedPixelRatio = devicePixelRatio;\n\n    const canvasWidth = Math.floor(clientWidth * clampedPixelRatio);\n    const canvasHeight = Math.floor(clientHeight * clampedPixelRatio);\n    gl.canvas.width = canvasWidth;\n    gl.canvas.height = canvasHeight;\n\n    // Note: when devicePixelRatio is too high, it is possible we might hit system limit for\n    // drawing buffer width and hight, in those cases they get clamped and resulting aspect ration may not be maintained\n    // for those cases, reduce devicePixelRatio.\n    if (gl.drawingBufferWidth !== canvasWidth || gl.drawingBufferHeight !== canvasHeight) {\n      log.warn(`Device pixel ratio clamped`)();\n      clampedPixelRatio = Math.min(\n        gl.drawingBufferWidth / clientWidth,\n        gl.drawingBufferHeight / clientHeight\n      );\n\n      gl.canvas.width = Math.floor(clientWidth * clampedPixelRatio);\n      gl.canvas.height = Math.floor(clientHeight * clampedPixelRatio);\n    }\n\n    Object.assign(gl.luma.canvasSizeInfo, {clientWidth, clientHeight, devicePixelRatio});\n  }\n}\n"],"file":"context.js"}