{"version":3,"sources":["../../../src/icon-layer/icon-layer.js"],"names":["Layer","project32","picking","Model","Geometry","vs","fs","IconManager","DEFAULT_COLOR","defaultProps","iconAtlas","type","value","async","iconMapping","sizeScale","min","billboard","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","alphaCutoff","max","getPosition","x","position","getIcon","icon","getColor","getSize","getAngle","IconLayer","getShaders","modules","initializeState","state","iconManager","context","gl","onUpdate","_onUpdate","attributeManager","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceSizes","defaultValue","instanceOffsets","transform","getInstanceOffset","instanceIconFrames","getInstanceIconFrame","instanceColorModes","getInstanceColorMode","instanceColors","props","colorFormat","length","normalized","instanceAngles","updateState","oldProps","changeFlags","data","iconMappingChanged","prePacked","internalState","isAsyncPropLoading","setProps","autoPacking","dataChanged","updateTriggersChanged","all","invalidate","extensionsChanged","model","delete","setState","_getModel","invalidateAll","finalizeState","finalize","draw","uniforms","viewport","iconsTexture","getTexture","loaded","setUniforms","Object","assign","iconsTextureDim","width","height","metersPerPixel","positions","id","geometry","drawMode","attributes","Float32Array","isInstanced","setNeedsRedraw","rect","getIconMapping","anchorX","anchorY","mapping","mask","y","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Layer, project32, picking} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './icon-layer-vertex.glsl';\nimport fs from './icon-layer-fragment.glsl';\nimport IconManager from './icon-manager';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n/*\n * @param {object} props\n * @param {Texture2D | string} props.iconAtlas - atlas image url or texture\n * @param {object} props.iconMapping - icon names mapped to icon definitions\n * @param {object} props.iconMapping[icon_name].x - x position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].y - y position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].width - width of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].height - height of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].anchorX - x anchor of icon on the atlas image,\n *   default to width / 2\n * @param {object} props.iconMapping[icon_name].anchorY - y anchor of icon on the atlas image,\n *   default to height / 2\n * @param {object} props.iconMapping[icon_name].mask - whether icon is treated as a transparency\n *   mask. If true, user defined color is applied. If false, original color from the image is\n *   applied. Default to false.\n * @param {number} props.size - icon size in pixels\n * @param {func} props.getPosition - returns anchor position of the icon, in [lng, lat, z]\n * @param {func} props.getIcon - returns icon name as a string\n * @param {func} props.getSize - returns icon size multiplier as a number\n * @param {func} props.getColor - returns color of the icon in [r, g, b, a]. Only works on icons\n *   with mask: true.\n * @param {func} props.getAngle - returns rotating angle (in degree) of the icon.\n */\nconst defaultProps = {\n  iconAtlas: {type: 'object', value: null, async: true},\n  iconMapping: {type: 'object', value: {}, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  billboard: true,\n  sizeUnits: 'pixels',\n  sizeMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  sizeMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n  alphaCutoff: {type: 'number', value: 0.05, min: 0, max: 1},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getIcon: {type: 'accessor', value: x => x.icon},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0}\n};\n\nexport default class IconLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.state = {\n      iconManager: new IconManager(this.context.gl, {onUpdate: () => this._onUpdate()})\n    };\n\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceOffsets: {size: 2, accessor: 'getIcon', transform: this.getInstanceOffset},\n      instanceIconFrames: {size: 4, accessor: 'getIcon', transform: this.getInstanceIconFrame},\n      instanceColorModes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getIcon',\n        transform: this.getInstanceColorMode\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle',\n        defaultValue: 0\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  /* eslint-disable max-statements, complexity */\n  updateState({oldProps, props, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const attributeManager = this.getAttributeManager();\n    const {iconManager} = this.state;\n    const {iconAtlas, iconMapping, data, getIcon} = props;\n\n    let iconMappingChanged = false;\n    const prePacked = iconAtlas || this.internalState.isAsyncPropLoading('iconAtlas');\n\n    // prepacked iconAtlas from user\n    if (prePacked) {\n      if (oldProps.iconAtlas !== props.iconAtlas) {\n        iconManager.setProps({iconAtlas, autoPacking: false});\n      }\n\n      if (oldProps.iconMapping !== props.iconMapping) {\n        iconManager.setProps({iconMapping});\n        iconMappingChanged = true;\n      }\n    } else {\n      // otherwise, use autoPacking\n      iconManager.setProps({autoPacking: true});\n    }\n\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon))\n    ) {\n      iconManager.setProps({data, getIcon});\n      iconMappingChanged = true;\n    }\n\n    if (iconMappingChanged) {\n      attributeManager.invalidate('instanceOffsets');\n      attributeManager.invalidate('instanceIconFrames');\n      attributeManager.invalidate('instanceColorModes');\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      attributeManager.invalidateAll();\n    }\n  }\n  /* eslint-enable max-statements, complexity */\n\n  finalizeState() {\n    super.finalizeState();\n    // Release resources held by the icon manager\n    this.state.iconManager.finalize();\n  }\n\n  draw({uniforms}) {\n    const {sizeScale, sizeMinPixels, sizeMaxPixels, sizeUnits, billboard, alphaCutoff} = this.props;\n    const {iconManager} = this.state;\n    const {viewport} = this.context;\n\n    const iconsTexture = iconManager.getTexture();\n    if (iconsTexture && iconsTexture.loaded) {\n      this.state.model\n        .setUniforms(\n          Object.assign({}, uniforms, {\n            iconsTexture,\n            iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n            sizeScale: sizeScale * (sizeUnits === 'pixels' ? viewport.metersPerPixel : 1),\n            sizeMinPixels,\n            sizeMaxPixels,\n            billboard,\n            alphaCutoff\n          })\n        )\n        .draw();\n    }\n  }\n\n  _getModel(gl) {\n    // The icon-layer vertex shader uses 2d positions\n    // specifed via: attribute vec2 positions;\n    const positions = [-1, -1, -1, 1, 1, 1, 1, -1];\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          attributes: {\n            // The size must be explicitly passed here otherwise luma.gl\n            // will default to assuming that positions are 3D (x,y,z)\n            positions: {\n              size: 2,\n              value: new Float32Array(positions)\n            }\n          }\n        }),\n        isInstanced: true\n      })\n    );\n  }\n\n  _onUpdate() {\n    this.setNeedsRedraw();\n  }\n\n  getInstanceOffset(icon) {\n    const rect = this.state.iconManager.getIconMapping(icon);\n    return [rect.width / 2 - rect.anchorX || 0, rect.height / 2 - rect.anchorY || 0];\n  }\n\n  getInstanceColorMode(icon) {\n    const mapping = this.state.iconManager.getIconMapping(icon);\n    return mapping.mask ? 1 : 0;\n  }\n\n  getInstanceIconFrame(icon) {\n    const rect = this.state.iconManager.getIconMapping(icon);\n    return [rect.x || 0, rect.y || 0, rect.width || 0, rect.height || 0];\n  }\n}\n\nIconLayer.layerName = 'IconLayer';\nIconLayer.defaultProps = defaultProps;\n"],"file":"icon-layer.js"}