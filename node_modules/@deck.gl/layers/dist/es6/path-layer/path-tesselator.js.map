{"version":3,"sources":["../../../src/path-layer/path-tesselator.js"],"names":["Tesselator","START_CAP","END_CAP","INVALID","PathTesselator","constructor","opts","attributes","positions","size","type","fp64","Float64Array","Float32Array","segmentTypes","Uint8ClampedArray","getGeometryFromBuffer","buffer","normalize","get","attributeName","getGeometrySize","path","numPoints","length","positionSize","loop","getPathLength","isClosed","updateGeometryAttributes","context","geometrySize","_updateSegmentTypes","_updatePositions","isPathClosed","vertexStart","fill","i","ptIndex","p","getPointOnPath","Number","isFinite","index","firstPoint","lastPoint"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Tesselator} from '@deck.gl/core';\n\nconst START_CAP = 1;\nconst END_CAP = 2;\nconst INVALID = 4;\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PathTesselator extends Tesselator {\n  constructor(opts) {\n    super({\n      ...opts,\n      attributes: {\n        positions: {size: 3, type: opts.fp64 ? Float64Array : Float32Array},\n        segmentTypes: {size: 1, type: Uint8ClampedArray}\n      }\n    });\n  }\n\n  getGeometryFromBuffer(buffer) {\n    if (this.normalize) {\n      return super.getGeometryFromBuffer(buffer);\n    }\n    // we don't need to read the positions if no normalization\n    return () => null;\n  }\n\n  /* Getters */\n  get(attributeName) {\n    return this.attributes[attributeName];\n  }\n\n  /* Implement base Tesselator interface */\n  getGeometrySize(path) {\n    if (!this.normalize) {\n      const numPoints = path.length / this.positionSize;\n      return this.opts.loop ? numPoints + 2 : numPoints;\n    }\n\n    const numPoints = this.getPathLength(path);\n    if (numPoints < 2) {\n      // invalid path\n      return 0;\n    }\n    if (this.isClosed(path)) {\n      // minimum 3 vertices\n      return numPoints < 3 ? 0 : numPoints + 2;\n    }\n    return numPoints;\n  }\n\n  updateGeometryAttributes(path, context) {\n    if (context.geometrySize === 0) {\n      return;\n    }\n    this._updateSegmentTypes(path, context);\n    this._updatePositions(path, context);\n  }\n\n  _updateSegmentTypes(path, context) {\n    const {segmentTypes} = this.attributes;\n    const isPathClosed = this.isClosed(path);\n    const {vertexStart, geometrySize} = context;\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    segmentTypes.fill(0, vertexStart, vertexStart + geometrySize);\n    if (isPathClosed) {\n      segmentTypes[vertexStart] = INVALID;\n      segmentTypes[vertexStart + geometrySize - 2] = INVALID;\n    } else {\n      segmentTypes[vertexStart] += START_CAP;\n      segmentTypes[vertexStart + geometrySize - 2] += END_CAP;\n    }\n    segmentTypes[vertexStart + geometrySize - 1] = INVALID;\n  }\n\n  _updatePositions(path, context) {\n    const {positions} = this.attributes;\n    if (!positions) {\n      return;\n    }\n    const {vertexStart, geometrySize} = context;\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    for (let i = vertexStart, ptIndex = 0; ptIndex < geometrySize; i++, ptIndex++) {\n      const p = this.getPointOnPath(path, ptIndex);\n      positions[i * 3] = p[0];\n      positions[i * 3 + 1] = p[1];\n      positions[i * 3 + 2] = p[2] || 0;\n    }\n  }\n\n  /* Utilities */\n  getPathLength(path) {\n    if (Number.isFinite(path[0])) {\n      // flat format\n      return path.length / this.positionSize;\n    }\n    return path.length;\n  }\n\n  getPointOnPath(path, index) {\n    if (Number.isFinite(path[0])) {\n      // flat format\n      const {positionSize} = this;\n      if (index * positionSize >= path.length) {\n        // loop\n        index += 1 - path.length / positionSize;\n      }\n      // TODO - avoid creating new arrays when using binary\n      return [\n        path[index * positionSize],\n        path[index * positionSize + 1],\n        positionSize === 3 ? path[index * positionSize + 2] : 0\n      ];\n    }\n    if (index >= path.length) {\n      // loop\n      index += 1 - path.length;\n    }\n    return path[index];\n  }\n\n  isClosed(path) {\n    if (!this.normalize) {\n      return this.opts.loop;\n    }\n    const numPoints = this.getPathLength(path);\n    const firstPoint = this.getPointOnPath(path, 0);\n    const lastPoint = this.getPointOnPath(path, numPoints - 1);\n    return (\n      firstPoint[0] === lastPoint[0] &&\n      firstPoint[1] === lastPoint[1] &&\n      firstPoint[2] === lastPoint[2]\n    );\n  }\n}\n"],"file":"path-tesselator.js"}