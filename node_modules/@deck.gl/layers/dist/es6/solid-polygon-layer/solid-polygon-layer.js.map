{"version":3,"sources":["../../../src/solid-polygon-layer/solid-polygon-layer.js"],"names":["Layer","project32","gouraudLighting","picking","COORDINATE_SYSTEM","Model","Geometry","hasFeature","FEATURES","PolygonTesselator","vsTop","vsSide","fs","DEFAULT_COLOR","defaultProps","filled","extruded","wireframe","_normalize","elevationScale","type","min","value","getPolygon","f","polygon","getElevation","getFillColor","getLineColor","material","ATTRIBUTE_TRANSITION","enter","chunk","length","subarray","SolidPolygonLayer","getShaders","vs","defines","modules","initializeState","gl","viewport","context","coordinateSystem","props","isGeospatial","DEFAULT","LNGLAT","setState","numInstances","polygonTesselator","preproject","fp64","use64bitPositions","IndexType","ELEMENT_INDEX_UINT32","Uint32Array","Uint16Array","attributeManager","getAttributeManager","noAlloc","remove","add","indices","size","isIndexed","update","calculateIndices","positions","transition","accessor","calculatePositions","shaderAttributes","vertexOffset","divisor","instancePositions","nextPositions","vertexValid","calculateVertexValid","elevations","instanceElevations","fillColors","alias","colorFormat","normalized","defaultValue","instanceFillColors","lineColors","instanceLineColors","pickingColors","object","index","target","encodePickingColor","instancePickingColors","draw","uniforms","topModel","sideModel","state","renderUniforms","Object","assign","Boolean","setInstanceCount","instanceCount","setUniforms","setDrawMode","isWireframe","setVertexCount","vertexCount","updateState","updateParams","updateGeometry","oldProps","changeFlags","regenerateModels","extensionsChanged","models","forEach","model","delete","_getModels","invalidateAll","geometryConfigChanged","dataChanged","updateTriggersChanged","all","buffers","data","attributes","normalize","geometryBuffer","getGeometry","positionFormat","startIndices","vertexStarts","id","shaders","NON_INSTANCED_MODEL","drawMode","vertexPositions","Float32Array","isSideVertex","geometry","isInstanced","userData","excludeAttributes","filter","attribute","indexStarts","get","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, picking, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, hasFeature, FEATURES} from '@luma.gl/core';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport PolygonTesselator from './polygon-tesselator';\n\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  filled: true,\n  // Whether to extrude\n  extruded: false,\n  // Whether to draw a GL.LINES wireframe of the polygon\n  wireframe: false,\n  _normalize: true,\n\n  // elevation multiplier\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // Accessor for polygon geometry\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Accessor for extrusion height\n  getElevation: {type: 'accessor', value: 1000},\n  // Accessor for colors\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // Optional settings for 'lighting' shader module\n  material: true\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class SolidPolygonLayer extends Layer {\n  getShaders(vs) {\n    return super.getShaders({\n      vs,\n      fs,\n      defines: {},\n      modules: [project32, gouraudLighting, picking]\n    });\n  }\n\n  initializeState() {\n    const {gl, viewport} = this.context;\n    let {coordinateSystem} = this.props;\n    if (viewport.isGeospatial && coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n      coordinateSystem = COORDINATE_SYSTEM.LNGLAT;\n    }\n\n    this.setState({\n      numInstances: 0,\n      polygonTesselator: new PolygonTesselator({\n        preproject: coordinateSystem === COORDINATE_SYSTEM.LNGLAT,\n        fp64: this.use64bitPositions(),\n        IndexType: !gl || hasFeature(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n      })\n    });\n\n    const attributeManager = this.getAttributeManager();\n    const noAlloc = true;\n\n    attributeManager.remove(['instancePickingColors']);\n\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {size: 1, isIndexed: true, update: this.calculateIndices, noAlloc},\n      positions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          positions: {\n            vertexOffset: 0,\n            divisor: 0\n          },\n          instancePositions: {\n            vertexOffset: 0,\n            divisor: 1\n          },\n          nextPositions: {\n            vertexOffset: 1,\n            divisor: 1\n          }\n        }\n      },\n      vertexValid: {\n        size: 1,\n        divisor: 1,\n        type: GL.UNSIGNED_BYTE,\n        update: this.calculateVertexValid,\n        noAlloc\n      },\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        shaderAttributes: {\n          elevations: {\n            divisor: 0\n          },\n          instanceElevations: {\n            divisor: 1\n          }\n        }\n      },\n      fillColors: {\n        alias: 'colors',\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          fillColors: {\n            divisor: 0\n          },\n          instanceFillColors: {\n            divisor: 1\n          }\n        }\n      },\n      lineColors: {\n        alias: 'colors',\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          lineColors: {\n            divisor: 0\n          },\n          instanceLineColors: {\n            divisor: 1\n          }\n        }\n      },\n      pickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) => this.encodePickingColor(index, value),\n        shaderAttributes: {\n          pickingColors: {\n            divisor: 0\n          },\n          instancePickingColors: {\n            divisor: 1\n          }\n        }\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  draw({uniforms}) {\n    const {extruded, filled, wireframe, elevationScale} = this.props;\n    const {topModel, sideModel, polygonTesselator} = this.state;\n\n    const renderUniforms = Object.assign({}, uniforms, {\n      extruded: Boolean(extruded),\n      elevationScale\n    });\n\n    // Note: the order is important\n    if (sideModel) {\n      sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n      sideModel.setUniforms(renderUniforms);\n      if (wireframe) {\n        sideModel.setDrawMode(GL.LINE_STRIP);\n        sideModel.setUniforms({isWireframe: true}).draw();\n      }\n      if (filled) {\n        sideModel.setDrawMode(GL.TRIANGLE_FAN);\n        sideModel.setUniforms({isWireframe: false}).draw();\n      }\n    }\n\n    if (topModel) {\n      topModel.setVertexCount(polygonTesselator.vertexCount);\n      topModel.setUniforms(renderUniforms).draw();\n    }\n  }\n\n  updateState(updateParams) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps, changeFlags} = updateParams;\n    const attributeManager = this.getAttributeManager();\n\n    const regenerateModels =\n      changeFlags.extensionsChanged ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded;\n\n    if (regenerateModels) {\n      if (this.state.models) {\n        this.state.models.forEach(model => model.delete());\n      }\n\n      this.setState(this._getModels(this.context.gl));\n      attributeManager.invalidateAll();\n    }\n  }\n\n  updateGeometry({props, oldProps, changeFlags}) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      const {polygonTesselator} = this.state;\n      const buffers = props.data.attributes || {};\n      polygonTesselator.updateGeometry({\n        data: props.data,\n        normalize: props._normalize,\n        geometryBuffer: buffers.getPolygon,\n        buffers,\n        getGeometry: props.getPolygon,\n        positionFormat: props.positionFormat,\n        fp64: this.use64bitPositions(),\n        dataChanged: changeFlags.dataChanged\n      });\n\n      this.setState({\n        numInstances: polygonTesselator.instanceCount,\n        startIndices: polygonTesselator.vertexStarts\n      });\n\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }\n\n  _getModels(gl) {\n    const {id, filled, extruded} = this.props;\n\n    let topModel;\n    let sideModel;\n\n    if (filled) {\n      const shaders = this.getShaders(vsTop);\n      shaders.defines.NON_INSTANCED_MODEL = 1;\n\n      topModel = new Model(\n        gl,\n        Object.assign({}, shaders, {\n          id: `${id}-top`,\n          drawMode: GL.TRIANGLES,\n          attributes: {\n            vertexPositions: new Float32Array([0, 1])\n          },\n          uniforms: {\n            isWireframe: false,\n            isSideVertex: false\n          },\n          vertexCount: 0,\n          isIndexed: true\n        })\n      );\n    }\n    if (extruded) {\n      sideModel = new Model(\n        gl,\n        Object.assign({}, this.getShaders(vsSide), {\n          id: `${id}-side`,\n          geometry: new Geometry({\n            drawMode: GL.LINES,\n            vertexCount: 4,\n            attributes: {\n              // top right - top left - bootom left - bottom right\n              vertexPositions: {\n                size: 2,\n                value: new Float32Array([1, 1, 0, 1, 0, 0, 1, 0])\n              }\n            }\n          }),\n          instanceCount: 0,\n          isInstanced: 1\n        })\n      );\n\n      sideModel.userData.excludeAttributes = {indices: true};\n    }\n\n    return {\n      models: [sideModel, topModel].filter(Boolean),\n      topModel,\n      sideModel\n    };\n  }\n\n  calculateIndices(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.indexStarts;\n    attribute.value = polygonTesselator.get('indices');\n  }\n\n  calculatePositions(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.vertexStarts;\n    attribute.value = polygonTesselator.get('positions');\n  }\n\n  calculateVertexValid(attribute) {\n    attribute.value = this.state.polygonTesselator.get('vertexValid');\n  }\n}\n\nSolidPolygonLayer.layerName = 'SolidPolygonLayer';\nSolidPolygonLayer.defaultProps = defaultProps;\n"],"file":"solid-polygon-layer.js"}