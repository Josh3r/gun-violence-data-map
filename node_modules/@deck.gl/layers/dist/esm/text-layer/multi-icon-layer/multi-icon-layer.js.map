{"version":3,"sources":["../../../../src/text-layer/multi-icon-layer/multi-icon-layer.js"],"names":["createIterable","IconLayer","vs","fs","DEFAULT_GAMMA","DEFAULT_BUFFER","defaultProps","backgroundColor","type","value","optional","getRowSize","x","rowSize","getOffsets","offsets","getParagraphSize","size","getAnchorX","anchorX","getAnchorY","anchorY","getPixelOffset","getPickingIndex","objectIndex","MultiIconLayer","Object","assign","attributeManager","getAttributeManager","addInstanced","instanceOffsets","accessor","update","calculateInstanceOffsets","instancePixelOffset","transition","instancePickingColors","calculateInstancePickingColors","updateParams","changeFlags","oldProps","props","updateTriggersChanged","invalidate","Array","isArray","map","c","slice","setState","uniforms","sdf","state","shouldDrawBackground","buffer","gamma","Boolean","attribute","startRow","endRow","data","iconMapping","getIcon","i","iterable","object","icon","rect","width","height","rowWidth","offsetX","offsetY","rowOffset","pickingColor","point","index","encodePickingColor","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {createIterable} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport IconLayer from '../../icon-layer/icon-layer';\n\nimport vs from './multi-icon-layer-vertex.glsl';\nimport fs from './multi-icon-layer-fragment.glsl';\n\n// TODO expose as layer properties\nconst DEFAULT_GAMMA = 0.2;\nconst DEFAULT_BUFFER = 192.0 / 256;\n\nconst defaultProps = {\n  backgroundColor: {type: 'color', value: null, optional: true},\n  // each paragraph can have one or multiple row(s)\n  // each row can have one or multiple character(s)\n  getRowSize: {type: 'accessor', value: x => x.rowSize || [0, 0]},\n  // offset from the left, top position of the paragraph\n  getOffsets: {type: 'accessor', value: x => x.offsets || [0, 0]},\n  // [width, height] of the paragraph\n  getParagraphSize: {type: 'accessor', value: x => x.size || [1, 1]},\n  // 1: left, 0: middle, -1: right\n  getAnchorX: {type: 'accessor', value: x => x.anchorX || 0},\n  // 1: top, 0: center, -1: bottom\n  getAnchorY: {type: 'accessor', value: x => x.anchorY || 0},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n\n  // object with the same pickingIndex will be picked when any one of them is being picked\n  getPickingIndex: {type: 'accessor', value: x => x.objectIndex}\n};\n\nexport default class MultiIconLayer extends IconLayer {\n  getShaders() {\n    return Object.assign({}, super.getShaders(), {\n      vs,\n      fs\n    });\n  }\n\n  initializeState() {\n    super.initializeState();\n\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instanceOffsets: {\n        size: 2,\n        accessor: ['getIcon', 'getAnchorX', 'getAnchorY'],\n        update: this.calculateInstanceOffsets\n      },\n      instancePixelOffset: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      },\n      instancePickingColors: {\n        type: GL.UNSIGNED_BYTE,\n        size: 3,\n        update: this.calculateInstancePickingColors\n      }\n    });\n  }\n\n  updateState(updateParams) {\n    super.updateState(updateParams);\n    const {changeFlags, oldProps, props} = updateParams;\n\n    if (\n      changeFlags.updateTriggersChanged &&\n      (changeFlags.updateTriggersChanged.getAnchorX || changeFlags.updateTriggersChanged.getAnchorY)\n    ) {\n      this.getAttributeManager().invalidate('instanceOffsets');\n    }\n\n    if (props.backgroundColor !== oldProps.backgroundColor) {\n      const backgroundColor = Array.isArray(props.backgroundColor)\n        ? props.backgroundColor.map(c => c / 255.0).slice(0, 3)\n        : null;\n      this.setState({backgroundColor});\n    }\n  }\n\n  draw({uniforms}) {\n    const {sdf} = this.props;\n    const {backgroundColor} = this.state;\n    const shouldDrawBackground = Array.isArray(backgroundColor);\n\n    super.draw({\n      uniforms: Object.assign({}, uniforms, {\n        // Refer the following doc about gamma and buffer\n        // https://blog.mapbox.com/drawing-text-with-signed-distance-fields-in-mapbox-gl-b0933af6f817\n        buffer: DEFAULT_BUFFER,\n        gamma: DEFAULT_GAMMA,\n        sdf: Boolean(sdf),\n        backgroundColor: backgroundColor || [0, 0, 0],\n        shouldDrawBackground\n      })\n    });\n  }\n\n  calculateInstanceOffsets(attribute, {startRow, endRow}) {\n    const {\n      data,\n      iconMapping,\n      getIcon,\n      getAnchorX,\n      getAnchorY,\n      getParagraphSize,\n      getRowSize,\n      getOffsets\n    } = this.props;\n    const {value, size} = attribute;\n    let i = startRow * size;\n    const {iterable} = createIterable(data, startRow, endRow);\n\n    for (const object of iterable) {\n      const icon = getIcon(object);\n      const rect = iconMapping[icon] || {};\n      const [width, height] = getParagraphSize(object);\n      const [rowWidth] = getRowSize(object);\n      const [offsetX, offsetY] = getOffsets(object);\n      const anchorX = getAnchorX(object);\n      const anchorY = getAnchorY(object);\n\n      // For a multi-line object, offset in x-direction needs consider\n      // the row offset in the paragraph and the object offset in the row\n      const rowOffset = ((1 - anchorX) * (width - rowWidth)) / 2;\n      value[i++] = ((anchorX - 1) * width) / 2 + rowOffset + rect.width / 2 + offsetX || 0;\n      value[i++] = ((anchorY - 1) * height) / 2 + rect.height / 2 + offsetY || 0;\n    }\n  }\n\n  calculateInstancePickingColors(attribute, {startRow, endRow}) {\n    const {data, getPickingIndex} = this.props;\n    const {value, size} = attribute;\n    let i = startRow * size;\n    const pickingColor = [];\n    const {iterable} = createIterable(data, startRow, endRow);\n\n    for (const point of iterable) {\n      const index = getPickingIndex(point);\n      this.encodePickingColor(index, pickingColor);\n\n      value[i++] = pickingColor[0];\n      value[i++] = pickingColor[1];\n      value[i++] = pickingColor[2];\n    }\n  }\n}\n\nMultiIconLayer.layerName = 'MultiIconLayer';\nMultiIconLayer.defaultProps = defaultProps;\n"],"file":"multi-icon-layer.js"}