{"version":3,"sources":["../../../src/path-layer/path-tesselator.js"],"names":["Tesselator","START_CAP","END_CAP","INVALID","PathTesselator","opts","attributes","positions","size","type","fp64","Float64Array","Float32Array","segmentTypes","Uint8ClampedArray","buffer","normalize","attributeName","path","numPoints","length","positionSize","loop","getPathLength","isClosed","context","geometrySize","_updateSegmentTypes","_updatePositions","isPathClosed","vertexStart","fill","i","ptIndex","p","getPointOnPath","Number","isFinite","index","firstPoint","lastPoint"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Tesselator} from '@deck.gl/core';\n\nconst START_CAP = 1;\nconst END_CAP = 2;\nconst INVALID = 4;\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PathTesselator extends Tesselator {\n  constructor(opts) {\n    super({\n      ...opts,\n      attributes: {\n        positions: {size: 3, type: opts.fp64 ? Float64Array : Float32Array},\n        segmentTypes: {size: 1, type: Uint8ClampedArray}\n      }\n    });\n  }\n\n  getGeometryFromBuffer(buffer) {\n    if (this.normalize) {\n      return super.getGeometryFromBuffer(buffer);\n    }\n    // we don't need to read the positions if no normalization\n    return () => null;\n  }\n\n  /* Getters */\n  get(attributeName) {\n    return this.attributes[attributeName];\n  }\n\n  /* Implement base Tesselator interface */\n  getGeometrySize(path) {\n    if (!this.normalize) {\n      const numPoints = path.length / this.positionSize;\n      return this.opts.loop ? numPoints + 2 : numPoints;\n    }\n\n    const numPoints = this.getPathLength(path);\n    if (numPoints < 2) {\n      // invalid path\n      return 0;\n    }\n    if (this.isClosed(path)) {\n      // minimum 3 vertices\n      return numPoints < 3 ? 0 : numPoints + 2;\n    }\n    return numPoints;\n  }\n\n  updateGeometryAttributes(path, context) {\n    if (context.geometrySize === 0) {\n      return;\n    }\n    this._updateSegmentTypes(path, context);\n    this._updatePositions(path, context);\n  }\n\n  _updateSegmentTypes(path, context) {\n    const {segmentTypes} = this.attributes;\n    const isPathClosed = this.isClosed(path);\n    const {vertexStart, geometrySize} = context;\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    segmentTypes.fill(0, vertexStart, vertexStart + geometrySize);\n    if (isPathClosed) {\n      segmentTypes[vertexStart] = INVALID;\n      segmentTypes[vertexStart + geometrySize - 2] = INVALID;\n    } else {\n      segmentTypes[vertexStart] += START_CAP;\n      segmentTypes[vertexStart + geometrySize - 2] += END_CAP;\n    }\n    segmentTypes[vertexStart + geometrySize - 1] = INVALID;\n  }\n\n  _updatePositions(path, context) {\n    const {positions} = this.attributes;\n    if (!positions) {\n      return;\n    }\n    const {vertexStart, geometrySize} = context;\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    for (let i = vertexStart, ptIndex = 0; ptIndex < geometrySize; i++, ptIndex++) {\n      const p = this.getPointOnPath(path, ptIndex);\n      positions[i * 3] = p[0];\n      positions[i * 3 + 1] = p[1];\n      positions[i * 3 + 2] = p[2] || 0;\n    }\n  }\n\n  /* Utilities */\n  getPathLength(path) {\n    if (Number.isFinite(path[0])) {\n      // flat format\n      return path.length / this.positionSize;\n    }\n    return path.length;\n  }\n\n  getPointOnPath(path, index) {\n    if (Number.isFinite(path[0])) {\n      // flat format\n      const {positionSize} = this;\n      if (index * positionSize >= path.length) {\n        // loop\n        index += 1 - path.length / positionSize;\n      }\n      // TODO - avoid creating new arrays when using binary\n      return [\n        path[index * positionSize],\n        path[index * positionSize + 1],\n        positionSize === 3 ? path[index * positionSize + 2] : 0\n      ];\n    }\n    if (index >= path.length) {\n      // loop\n      index += 1 - path.length;\n    }\n    return path[index];\n  }\n\n  isClosed(path) {\n    if (!this.normalize) {\n      return this.opts.loop;\n    }\n    const numPoints = this.getPathLength(path);\n    const firstPoint = this.getPointOnPath(path, 0);\n    const lastPoint = this.getPointOnPath(path, numPoints - 1);\n    return (\n      firstPoint[0] === lastPoint[0] &&\n      firstPoint[1] === lastPoint[1] &&\n      firstPoint[2] === lastPoint[2]\n    );\n  }\n}\n"],"file":"path-tesselator.js"}