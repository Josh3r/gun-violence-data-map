{"version":3,"sources":["../../../src/passes/layers-pass.js"],"names":["Pass","clear","setParameters","withParameters","cssToDeviceRatio","LayersPass","render","props","gl","framebuffer","target","_drawLayers","viewports","views","onViewportActive","clearCanvas","clearGLCanvas","renderStats","forEach","viewportOrDescriptor","i","viewport","view","id","stats","_drawLayersInViewport","push","layers","layerFilter","pass","effects","moduleParameters","glViewport","getGLViewport","clearOpts","color","depth","scissorTest","scissor","renderStatus","totalCount","length","visibleCount","compositeCount","pickableCount","layer","layerIndex","shouldDrawLayer","_shouldDrawLayer","pickable","isComposite","_moduleParameters","_getModuleParameters","uniforms","Object","assign","context","layerParameters","getLayerParameters","drawLayer","parameters","getModuleParameters","visible","isPicking","startsWith","renderPass","overrides","create","mousePosition","pickingActive","devicePixelRatio","effect","height","canvas","clientHeight","dimensions","pixelRatio","x","y","width","drawingBufferWidth","drawingBufferHeight"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport Pass from './pass';\nimport {clear, setParameters, withParameters, cssToDeviceRatio} from '@luma.gl/core';\n\nexport default class LayersPass extends Pass {\n  render(props) {\n    const gl = this.gl;\n\n    setParameters(gl, {framebuffer: props.target});\n    return this._drawLayers(props);\n  }\n\n  // PRIVATE\n  // Draw a list of layers in a list of viewports\n  _drawLayers(props) {\n    const {viewports, views, onViewportActive, clearCanvas = true} = props;\n\n    const gl = this.gl;\n    if (clearCanvas) {\n      clearGLCanvas(gl);\n    }\n\n    const renderStats = [];\n\n    viewports.forEach((viewportOrDescriptor, i) => {\n      // Get a viewport from a viewport descriptor (which can be a plain viewport)\n      const viewport = viewportOrDescriptor.viewport || viewportOrDescriptor;\n      const view = views && views[viewport.id];\n\n      // Update context to point to this viewport\n      onViewportActive(viewport);\n\n      props.viewport = viewport;\n      props.view = view;\n\n      // render this viewport\n      const stats = this._drawLayersInViewport(gl, props);\n      renderStats.push(stats);\n    });\n    return renderStats;\n  }\n\n  // Draws a list of layers in one viewport\n  // TODO - when picking we could completely skip rendering viewports that dont\n  // intersect with the picking rect\n  _drawLayersInViewport(\n    gl,\n    {layers, layerFilter, viewport, view, pass = 'unknown', effects, moduleParameters}\n  ) {\n    const glViewport = getGLViewport(gl, {viewport});\n\n    if (view && view.props.clear) {\n      const clearOpts = view.props.clear === true ? {color: true, depth: true} : view.props.clear;\n      withParameters(\n        gl,\n        {\n          scissorTest: true,\n          scissor: glViewport\n        },\n        () => clear(gl, clearOpts)\n      );\n    }\n\n    // render layers in normal colors\n    const renderStatus = {\n      totalCount: layers.length,\n      visibleCount: 0,\n      compositeCount: 0,\n      pickableCount: 0\n    };\n\n    setParameters(gl, {viewport: glViewport});\n\n    // render layers in normal colors\n    layers.forEach((layer, layerIndex) => {\n      // Check if we should draw layer\n      const shouldDrawLayer = this._shouldDrawLayer(layer, viewport, pass, layerFilter);\n\n      // Calculate stats\n      if (shouldDrawLayer && layer.props.pickable) {\n        renderStatus.pickableCount++;\n      }\n      if (layer.isComposite) {\n        renderStatus.compositeCount++;\n      }\n\n      // Draw the layer\n      if (shouldDrawLayer) {\n        renderStatus.visibleCount++;\n\n        const _moduleParameters = this._getModuleParameters(layer, effects, pass, moduleParameters);\n        const uniforms = Object.assign({}, layer.context.uniforms, {layerIndex});\n        const layerParameters = this.getLayerParameters(layer, layerIndex);\n\n        layer.drawLayer({\n          moduleParameters: _moduleParameters,\n          uniforms,\n          parameters: layerParameters\n        });\n      }\n    });\n\n    return renderStatus;\n  }\n\n  /* Methods for subclass overrides */\n  shouldDrawLayer(layer) {\n    return true;\n  }\n\n  getModuleParameters(layer, effects) {\n    return null;\n  }\n\n  getLayerParameters(layer, layerIndex) {\n    return layer.props.parameters;\n  }\n\n  /* Private */\n  _shouldDrawLayer(layer, viewport, pass, layerFilter) {\n    let shouldDrawLayer = this.shouldDrawLayer(layer) && !layer.isComposite && layer.props.visible;\n\n    if (shouldDrawLayer && layerFilter) {\n      shouldDrawLayer = layerFilter({\n        layer,\n        viewport,\n        isPicking: pass.startsWith('picking'),\n        renderPass: pass\n      });\n    }\n    return shouldDrawLayer;\n  }\n\n  _getModuleParameters(layer, effects, pass, overrides) {\n    const moduleParameters = Object.assign(Object.create(layer.props), {\n      viewport: layer.context.viewport,\n      mousePosition: layer.context.mousePosition,\n      pickingActive: 0,\n      devicePixelRatio: cssToDeviceRatio(this.gl)\n    });\n\n    if (effects) {\n      for (const effect of effects) {\n        Object.assign(moduleParameters, effect.getModuleParameters(layer));\n      }\n    }\n\n    return Object.assign(moduleParameters, this.getModuleParameters(layer, effects), overrides);\n  }\n}\n\n// Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\nfunction getGLViewport(gl, {viewport}) {\n  // TODO - dummy default for node\n  // Fallback to width/height when clientWidth/clientHeight are 0 or undefined.\n  const height = gl.canvas ? gl.canvas.clientHeight || gl.canvas.height : 100;\n  // Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\n  const dimensions = viewport;\n  const pixelRatio = cssToDeviceRatio(gl);\n  return [\n    dimensions.x * pixelRatio,\n    (height - dimensions.y - dimensions.height) * pixelRatio,\n    dimensions.width * pixelRatio,\n    dimensions.height * pixelRatio\n  ];\n}\n\nfunction clearGLCanvas(gl) {\n  const width = gl.drawingBufferWidth;\n  const height = gl.drawingBufferHeight;\n  // clear depth and color buffers, restoring transparency\n  setParameters(gl, {viewport: [0, 0, width, height]});\n  gl.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n}\n"],"file":"layers-pass.js"}