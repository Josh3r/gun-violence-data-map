{"version":3,"sources":["../../../../src/shaderlib/project/viewport-uniforms.js"],"names":["mat4","vec4","COORDINATE_SYSTEM","PROJECTION_MODE","memoize","assert","ZERO_VECTOR","VECTOR_TO_POINT_MATRIX","IDENTITY_MATRIX","DEFAULT_PIXELS_PER_UNIT2","DEFAULT_COORDINATE_ORIGIN","LNGLAT_AUTO_OFFSET_ZOOM_THRESHOLD","getMemoizedViewportUniforms","calculateViewportUniforms","calculateMatrixAndOffset","viewport","coordinateSystem","coordinateOrigin","viewMatrixUncentered","projectionMatrix","projectionMode","viewMatrix","viewProjectionMatrix","projectionCenter","cameraPosCommon","cameraPosition","shaderCoordinateOrigin","offsetMode","LNGLAT","WEB_MERCATOR","Math","fround","longitude","latitude","IDENTITY","position","map","positionCommonSpace","projectPosition","transformMat4","multiply","getUniformsFromViewport","devicePixelRatio","modelMatrix","DEFAULT","wrapLongitude","positionOrigin","isGeospatial","CARTESIAN","uniforms","project_uWrapLongitude","project_uModelMatrix","distanceScales","getDistanceScales","viewportSize","width","height","project_uCoordinateSystem","project_uProjectionMode","project_uCoordinateOrigin","project_uCenter","project_uAntimeridian","project_uViewportSize","project_uDevicePixelRatio","project_uFocalDistance","focalDistance","project_uCommonUnitsPerMeter","unitsPerMeter","project_uCommonUnitsPerWorldUnit","project_uCommonUnitsPerWorldUnit2","project_uScale","scale","project_uViewProjectionMatrix","project_uCameraPosition","distanceScalesAtOrigin","METER_OFFSETS","unitsPerMeter2","LNGLAT_OFFSETS","unitsPerDegree","unitsPerDegree2"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec4 from 'gl-matrix/vec4';\n\nimport {COORDINATE_SYSTEM, PROJECTION_MODE} from '../../lib/constants';\n\nimport memoize from '../../utils/memoize';\nimport assert from '../../utils/assert';\n\n// To quickly set a vector to zero\nconst ZERO_VECTOR = [0, 0, 0, 0];\n// 4x4 matrix that drops 4th component of vector\nconst VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];\nconst IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\nconst DEFAULT_PIXELS_PER_UNIT2 = [0, 0, 0];\nconst DEFAULT_COORDINATE_ORIGIN = [0, 0, 0];\n\n// Based on viewport-mercator-project/test/fp32-limits.js\nexport const LNGLAT_AUTO_OFFSET_ZOOM_THRESHOLD = 12;\n\nconst getMemoizedViewportUniforms = memoize(calculateViewportUniforms);\n\n// The code that utilizes Matrix4 does the same calculation as their mat4 counterparts,\n// has lower performance but provides error checking.\n// Uncomment when debugging\nfunction calculateMatrixAndOffset({viewport, coordinateSystem, coordinateOrigin}) {\n  const {viewMatrixUncentered, projectionMatrix, projectionMode} = viewport;\n  let {viewMatrix, viewProjectionMatrix} = viewport;\n\n  let projectionCenter = ZERO_VECTOR;\n  let cameraPosCommon = viewport.cameraPosition;\n  let shaderCoordinateOrigin = coordinateOrigin;\n  let offsetMode = true;\n\n  if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {\n    if (projectionMode === PROJECTION_MODE.WEB_MERCATOR) {\n      offsetMode = false;\n    } else {\n      shaderCoordinateOrigin = [Math.fround(viewport.longitude), Math.fround(viewport.latitude), 0];\n    }\n  } else if (projectionMode === PROJECTION_MODE.IDENTITY) {\n    shaderCoordinateOrigin = viewport.position.map(Math.fround);\n  }\n\n  shaderCoordinateOrigin[2] = shaderCoordinateOrigin[2] || 0;\n\n  if (offsetMode) {\n    // Calculate transformed projectionCenter (using 64 bit precision JS)\n    // This is the key to offset mode precision\n    // (avoids doing this addition in 32 bit precision in GLSL)\n    const positionCommonSpace = viewport.projectPosition(shaderCoordinateOrigin);\n\n    cameraPosCommon = [\n      cameraPosCommon[0] - positionCommonSpace[0],\n      cameraPosCommon[1] - positionCommonSpace[1],\n      cameraPosCommon[2] - positionCommonSpace[2]\n    ];\n\n    positionCommonSpace[3] = 1;\n\n    // projectionCenter = new Matrix4(viewProjectionMatrix)\n    //   .transformVector([positionPixels[0], positionPixels[1], 0.0, 1.0]);\n    projectionCenter = vec4.transformMat4([], positionCommonSpace, viewProjectionMatrix);\n\n    // Always apply uncentered projection matrix if available (shader adds center)\n    viewMatrix = viewMatrixUncentered || viewMatrix;\n\n    // Zero out 4th coordinate (\"after\" model matrix) - avoids further translations\n    // viewMatrix = new Matrix4(viewMatrixUncentered || viewMatrix)\n    //   .multiplyRight(VECTOR_TO_POINT_MATRIX);\n    viewProjectionMatrix = mat4.multiply([], projectionMatrix, viewMatrix);\n    viewProjectionMatrix = mat4.multiply([], viewProjectionMatrix, VECTOR_TO_POINT_MATRIX);\n  }\n\n  return {\n    viewMatrix,\n    viewProjectionMatrix,\n    projectionCenter,\n    cameraPosCommon,\n    shaderCoordinateOrigin\n  };\n}\n\n/**\n * Returns uniforms for shaders based on current projection\n * includes: projection matrix suitable for shaders\n *\n * TODO - Ensure this works with any viewport, not just WebMercatorViewports\n *\n * @param {WebMercatorViewport} viewport -\n * @return {Float32Array} - 4x4 projection matrix that can be used in shaders\n */\nexport function getUniformsFromViewport({\n  viewport,\n  devicePixelRatio = 1,\n  modelMatrix = null,\n  // Match Layer.defaultProps\n  coordinateSystem = COORDINATE_SYSTEM.DEFAULT,\n  coordinateOrigin = DEFAULT_COORDINATE_ORIGIN,\n  wrapLongitude = false,\n  // Deprecated\n  projectionMode,\n  positionOrigin\n} = {}) {\n  assert(viewport);\n\n  if (coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n    coordinateSystem = viewport.isGeospatial\n      ? COORDINATE_SYSTEM.LNGLAT\n      : COORDINATE_SYSTEM.CARTESIAN;\n  }\n\n  const uniforms = getMemoizedViewportUniforms({\n    viewport,\n    devicePixelRatio,\n    coordinateSystem,\n    coordinateOrigin\n  });\n\n  uniforms.project_uWrapLongitude = wrapLongitude;\n  uniforms.project_uModelMatrix = modelMatrix || IDENTITY_MATRIX;\n\n  return uniforms;\n}\n\nfunction calculateViewportUniforms({\n  viewport,\n  devicePixelRatio,\n  coordinateSystem,\n  coordinateOrigin\n}) {\n  const {\n    projectionCenter,\n    viewProjectionMatrix,\n    cameraPosCommon,\n    shaderCoordinateOrigin\n  } = calculateMatrixAndOffset({\n    coordinateSystem,\n    coordinateOrigin,\n    viewport\n  });\n\n  // Calculate projection pixels per unit\n  const distanceScales = viewport.getDistanceScales();\n\n  const viewportSize = [viewport.width * devicePixelRatio, viewport.height * devicePixelRatio];\n\n  const uniforms = {\n    // Projection mode values\n    project_uCoordinateSystem: coordinateSystem,\n    project_uProjectionMode: viewport.projectionMode,\n    project_uCoordinateOrigin: shaderCoordinateOrigin,\n    project_uCenter: projectionCenter,\n    project_uAntimeridian: (viewport.longitude || 0) - 180,\n\n    // Screen size\n    project_uViewportSize: viewportSize,\n    project_uDevicePixelRatio: devicePixelRatio,\n\n    // Distance at which screen pixels are projected\n    project_uFocalDistance: viewport.focalDistance || 1,\n    project_uCommonUnitsPerMeter: distanceScales.unitsPerMeter,\n    project_uCommonUnitsPerWorldUnit: distanceScales.unitsPerMeter,\n    project_uCommonUnitsPerWorldUnit2: DEFAULT_PIXELS_PER_UNIT2,\n    project_uScale: viewport.scale, // This is the mercator scale (2 ** zoom)\n\n    project_uViewProjectionMatrix: viewProjectionMatrix,\n\n    // This is for lighting calculations\n    project_uCameraPosition: cameraPosCommon\n  };\n\n  const distanceScalesAtOrigin = viewport.getDistanceScales(shaderCoordinateOrigin);\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n      uniforms.project_uCommonUnitsPerWorldUnit = distanceScalesAtOrigin.unitsPerMeter;\n      uniforms.project_uCommonUnitsPerWorldUnit2 = distanceScalesAtOrigin.unitsPerMeter2;\n      break;\n\n    case COORDINATE_SYSTEM.LNGLAT:\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n      uniforms.project_uCommonUnitsPerWorldUnit = distanceScalesAtOrigin.unitsPerDegree;\n      uniforms.project_uCommonUnitsPerWorldUnit2 = distanceScalesAtOrigin.unitsPerDegree2;\n      break;\n\n    default:\n      break;\n  }\n\n  return uniforms;\n}\n"],"file":"viewport-uniforms.js"}