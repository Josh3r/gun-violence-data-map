{"version":3,"sources":["../../../src/passes/layers-pass.js"],"names":["LayersPass","props","gl","framebuffer","target","_drawLayers","viewports","views","onViewportActive","clearCanvas","clearGLCanvas","renderStats","forEach","viewportOrDescriptor","i","viewport","view","id","stats","_drawLayersInViewport","push","layers","layerFilter","pass","effects","moduleParameters","glViewport","getGLViewport","clear","clearOpts","color","depth","scissorTest","scissor","renderStatus","totalCount","length","visibleCount","compositeCount","pickableCount","layer","layerIndex","shouldDrawLayer","_shouldDrawLayer","pickable","isComposite","_moduleParameters","_getModuleParameters","uniforms","Object","assign","context","layerParameters","getLayerParameters","drawLayer","parameters","visible","isPicking","startsWith","renderPass","overrides","create","mousePosition","pickingActive","devicePixelRatio","effect","getModuleParameters","Pass","height","canvas","clientHeight","dimensions","pixelRatio","x","y","width","drawingBufferWidth","drawingBufferHeight"],"mappings":";;;;;;;;;;;;;;;;;;;AACA;;AACA;;IAEqBA,U;;;;;;;;;;2BACZC,K,EAAO;AACZ,UAAMC,EAAE,GAAG,KAAKA,EAAhB;AAEA,+BAAcA,EAAd,EAAkB;AAACC,QAAAA,WAAW,EAAEF,KAAK,CAACG;AAApB,OAAlB;AACA,aAAO,KAAKC,WAAL,CAAiBJ,KAAjB,CAAP;AACD;;;gCAIWA,K,EAAO;AAAA;;AAAA,UACVK,SADU,GACgDL,KADhD,CACVK,SADU;AAAA,UACCC,KADD,GACgDN,KADhD,CACCM,KADD;AAAA,UACQC,gBADR,GACgDP,KADhD,CACQO,gBADR;AAAA,+BACgDP,KADhD,CAC0BQ,WAD1B;AAAA,UAC0BA,WAD1B,mCACwC,IADxC;AAGjB,UAAMP,EAAE,GAAG,KAAKA,EAAhB;;AACA,UAAIO,WAAJ,EAAiB;AACfC,QAAAA,aAAa,CAACR,EAAD,CAAb;AACD;;AAED,UAAMS,WAAW,GAAG,EAApB;AAEAL,MAAAA,SAAS,CAACM,OAAV,CAAkB,UAACC,oBAAD,EAAuBC,CAAvB,EAA6B;AAE7C,YAAMC,QAAQ,GAAGF,oBAAoB,CAACE,QAArB,IAAiCF,oBAAlD;AACA,YAAMG,IAAI,GAAGT,KAAK,IAAIA,KAAK,CAACQ,QAAQ,CAACE,EAAV,CAA3B;AAGAT,QAAAA,gBAAgB,CAACO,QAAD,CAAhB;AAEAd,QAAAA,KAAK,CAACc,QAAN,GAAiBA,QAAjB;AACAd,QAAAA,KAAK,CAACe,IAAN,GAAaA,IAAb;;AAGA,YAAME,KAAK,GAAG,KAAI,CAACC,qBAAL,CAA2BjB,EAA3B,EAA+BD,KAA/B,CAAd;;AACAU,QAAAA,WAAW,CAACS,IAAZ,CAAiBF,KAAjB;AACD,OAdD;AAeA,aAAOP,WAAP;AACD;;;0CAMCT,E,QAEA;AAAA;;AAAA,UADCmB,MACD,QADCA,MACD;AAAA,UADSC,WACT,QADSA,WACT;AAAA,UADsBP,QACtB,QADsBA,QACtB;AAAA,UADgCC,IAChC,QADgCA,IAChC;AAAA,2BADsCO,IACtC;AAAA,UADsCA,IACtC,0BAD6C,SAC7C;AAAA,UADwDC,OACxD,QADwDA,OACxD;AAAA,UADiEC,gBACjE,QADiEA,gBACjE;AACA,UAAMC,UAAU,GAAGC,aAAa,CAACzB,EAAD,EAAK;AAACa,QAAAA,QAAQ,EAARA;AAAD,OAAL,CAAhC;;AAEA,UAAIC,IAAI,IAAIA,IAAI,CAACf,KAAL,CAAW2B,KAAvB,EAA8B;AAC5B,YAAMC,SAAS,GAAGb,IAAI,CAACf,KAAL,CAAW2B,KAAX,KAAqB,IAArB,GAA4B;AAACE,UAAAA,KAAK,EAAE,IAAR;AAAcC,UAAAA,KAAK,EAAE;AAArB,SAA5B,GAAyDf,IAAI,CAACf,KAAL,CAAW2B,KAAtF;AACA,kCACE1B,EADF,EAEE;AACE8B,UAAAA,WAAW,EAAE,IADf;AAEEC,UAAAA,OAAO,EAAEP;AAFX,SAFF,EAME;AAAA,iBAAM,iBAAMxB,EAAN,EAAU2B,SAAV,CAAN;AAAA,SANF;AAQD;;AAGD,UAAMK,YAAY,GAAG;AACnBC,QAAAA,UAAU,EAAEd,MAAM,CAACe,MADA;AAEnBC,QAAAA,YAAY,EAAE,CAFK;AAGnBC,QAAAA,cAAc,EAAE,CAHG;AAInBC,QAAAA,aAAa,EAAE;AAJI,OAArB;AAOA,+BAAcrC,EAAd,EAAkB;AAACa,QAAAA,QAAQ,EAAEW;AAAX,OAAlB;AAGAL,MAAAA,MAAM,CAACT,OAAP,CAAe,UAAC4B,KAAD,EAAQC,UAAR,EAAuB;AAEpC,YAAMC,eAAe,GAAG,MAAI,CAACC,gBAAL,CAAsBH,KAAtB,EAA6BzB,QAA7B,EAAuCQ,IAAvC,EAA6CD,WAA7C,CAAxB;;AAGA,YAAIoB,eAAe,IAAIF,KAAK,CAACvC,KAAN,CAAY2C,QAAnC,EAA6C;AAC3CV,UAAAA,YAAY,CAACK,aAAb;AACD;;AACD,YAAIC,KAAK,CAACK,WAAV,EAAuB;AACrBX,UAAAA,YAAY,CAACI,cAAb;AACD;;AAGD,YAAII,eAAJ,EAAqB;AACnBR,UAAAA,YAAY,CAACG,YAAb;;AAEA,cAAMS,iBAAiB,GAAG,MAAI,CAACC,oBAAL,CAA0BP,KAA1B,EAAiChB,OAAjC,EAA0CD,IAA1C,EAAgDE,gBAAhD,CAA1B;;AACA,cAAMuB,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,KAAK,CAACW,OAAN,CAAcH,QAAhC,EAA0C;AAACP,YAAAA,UAAU,EAAVA;AAAD,WAA1C,CAAjB;;AACA,cAAMW,eAAe,GAAG,MAAI,CAACC,kBAAL,CAAwBb,KAAxB,EAA+BC,UAA/B,CAAxB;;AAEAD,UAAAA,KAAK,CAACc,SAAN,CAAgB;AACd7B,YAAAA,gBAAgB,EAAEqB,iBADJ;AAEdE,YAAAA,QAAQ,EAARA,QAFc;AAGdO,YAAAA,UAAU,EAAEH;AAHE,WAAhB;AAKD;AACF,OA1BD;AA4BA,aAAOlB,YAAP;AACD;;;oCAGeM,K,EAAO;AACrB,aAAO,IAAP;AACD;;;wCAEmBA,K,EAAOhB,O,EAAS;AAClC,aAAO,IAAP;AACD;;;uCAEkBgB,K,EAAOC,U,EAAY;AACpC,aAAOD,KAAK,CAACvC,KAAN,CAAYsD,UAAnB;AACD;;;qCAGgBf,K,EAAOzB,Q,EAAUQ,I,EAAMD,W,EAAa;AACnD,UAAIoB,eAAe,GAAG,KAAKA,eAAL,CAAqBF,KAArB,KAA+B,CAACA,KAAK,CAACK,WAAtC,IAAqDL,KAAK,CAACvC,KAAN,CAAYuD,OAAvF;;AAEA,UAAId,eAAe,IAAIpB,WAAvB,EAAoC;AAClCoB,QAAAA,eAAe,GAAGpB,WAAW,CAAC;AAC5BkB,UAAAA,KAAK,EAALA,KAD4B;AAE5BzB,UAAAA,QAAQ,EAARA,QAF4B;AAG5B0C,UAAAA,SAAS,EAAElC,IAAI,CAACmC,UAAL,CAAgB,SAAhB,CAHiB;AAI5BC,UAAAA,UAAU,EAAEpC;AAJgB,SAAD,CAA7B;AAMD;;AACD,aAAOmB,eAAP;AACD;;;yCAEoBF,K,EAAOhB,O,EAASD,I,EAAMqC,S,EAAW;AACpD,UAAMnC,gBAAgB,GAAGwB,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACY,MAAP,CAAcrB,KAAK,CAACvC,KAApB,CAAd,EAA0C;AACjEc,QAAAA,QAAQ,EAAEyB,KAAK,CAACW,OAAN,CAAcpC,QADyC;AAEjE+C,QAAAA,aAAa,EAAEtB,KAAK,CAACW,OAAN,CAAcW,aAFoC;AAGjEC,QAAAA,aAAa,EAAE,CAHkD;AAIjEC,QAAAA,gBAAgB,EAAE,4BAAiB,KAAK9D,EAAtB;AAJ+C,OAA1C,CAAzB;;AAOA,UAAIsB,OAAJ,EAAa;AAAA;AAAA;AAAA;;AAAA;AACX,+BAAqBA,OAArB,8HAA8B;AAAA,gBAAnByC,MAAmB;AAC5BhB,YAAAA,MAAM,CAACC,MAAP,CAAczB,gBAAd,EAAgCwC,MAAM,CAACC,mBAAP,CAA2B1B,KAA3B,CAAhC;AACD;AAHU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIZ;;AAED,aAAOS,MAAM,CAACC,MAAP,CAAczB,gBAAd,EAAgC,KAAKyC,mBAAL,CAAyB1B,KAAzB,EAAgChB,OAAhC,CAAhC,EAA0EoC,SAA1E,CAAP;AACD;;;EAhJqCO,gB;;;;AAoJxC,SAASxC,aAAT,CAAuBzB,EAAvB,SAAuC;AAAA,MAAXa,QAAW,SAAXA,QAAW;AAGrC,MAAMqD,MAAM,GAAGlE,EAAE,CAACmE,MAAH,GAAYnE,EAAE,CAACmE,MAAH,CAAUC,YAAV,IAA0BpE,EAAE,CAACmE,MAAH,CAAUD,MAAhD,GAAyD,GAAxE;AAEA,MAAMG,UAAU,GAAGxD,QAAnB;AACA,MAAMyD,UAAU,GAAG,4BAAiBtE,EAAjB,CAAnB;AACA,SAAO,CACLqE,UAAU,CAACE,CAAX,GAAeD,UADV,EAEL,CAACJ,MAAM,GAAGG,UAAU,CAACG,CAApB,GAAwBH,UAAU,CAACH,MAApC,IAA8CI,UAFzC,EAGLD,UAAU,CAACI,KAAX,GAAmBH,UAHd,EAILD,UAAU,CAACH,MAAX,GAAoBI,UAJf,CAAP;AAMD;;AAED,SAAS9D,aAAT,CAAuBR,EAAvB,EAA2B;AACzB,MAAMyE,KAAK,GAAGzE,EAAE,CAAC0E,kBAAjB;AACA,MAAMR,MAAM,GAAGlE,EAAE,CAAC2E,mBAAlB;AAEA,2BAAc3E,EAAd,EAAkB;AAACa,IAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO4D,KAAP,EAAcP,MAAd;AAAX,GAAlB;AACAlE,EAAAA,EAAE,CAAC0B,KAAH,CAAS,WAAT;AACD","sourcesContent":["import GL from '@luma.gl/constants';\nimport Pass from './pass';\nimport {clear, setParameters, withParameters, cssToDeviceRatio} from '@luma.gl/core';\n\nexport default class LayersPass extends Pass {\n  render(props) {\n    const gl = this.gl;\n\n    setParameters(gl, {framebuffer: props.target});\n    return this._drawLayers(props);\n  }\n\n  // PRIVATE\n  // Draw a list of layers in a list of viewports\n  _drawLayers(props) {\n    const {viewports, views, onViewportActive, clearCanvas = true} = props;\n\n    const gl = this.gl;\n    if (clearCanvas) {\n      clearGLCanvas(gl);\n    }\n\n    const renderStats = [];\n\n    viewports.forEach((viewportOrDescriptor, i) => {\n      // Get a viewport from a viewport descriptor (which can be a plain viewport)\n      const viewport = viewportOrDescriptor.viewport || viewportOrDescriptor;\n      const view = views && views[viewport.id];\n\n      // Update context to point to this viewport\n      onViewportActive(viewport);\n\n      props.viewport = viewport;\n      props.view = view;\n\n      // render this viewport\n      const stats = this._drawLayersInViewport(gl, props);\n      renderStats.push(stats);\n    });\n    return renderStats;\n  }\n\n  // Draws a list of layers in one viewport\n  // TODO - when picking we could completely skip rendering viewports that dont\n  // intersect with the picking rect\n  _drawLayersInViewport(\n    gl,\n    {layers, layerFilter, viewport, view, pass = 'unknown', effects, moduleParameters}\n  ) {\n    const glViewport = getGLViewport(gl, {viewport});\n\n    if (view && view.props.clear) {\n      const clearOpts = view.props.clear === true ? {color: true, depth: true} : view.props.clear;\n      withParameters(\n        gl,\n        {\n          scissorTest: true,\n          scissor: glViewport\n        },\n        () => clear(gl, clearOpts)\n      );\n    }\n\n    // render layers in normal colors\n    const renderStatus = {\n      totalCount: layers.length,\n      visibleCount: 0,\n      compositeCount: 0,\n      pickableCount: 0\n    };\n\n    setParameters(gl, {viewport: glViewport});\n\n    // render layers in normal colors\n    layers.forEach((layer, layerIndex) => {\n      // Check if we should draw layer\n      const shouldDrawLayer = this._shouldDrawLayer(layer, viewport, pass, layerFilter);\n\n      // Calculate stats\n      if (shouldDrawLayer && layer.props.pickable) {\n        renderStatus.pickableCount++;\n      }\n      if (layer.isComposite) {\n        renderStatus.compositeCount++;\n      }\n\n      // Draw the layer\n      if (shouldDrawLayer) {\n        renderStatus.visibleCount++;\n\n        const _moduleParameters = this._getModuleParameters(layer, effects, pass, moduleParameters);\n        const uniforms = Object.assign({}, layer.context.uniforms, {layerIndex});\n        const layerParameters = this.getLayerParameters(layer, layerIndex);\n\n        layer.drawLayer({\n          moduleParameters: _moduleParameters,\n          uniforms,\n          parameters: layerParameters\n        });\n      }\n    });\n\n    return renderStatus;\n  }\n\n  /* Methods for subclass overrides */\n  shouldDrawLayer(layer) {\n    return true;\n  }\n\n  getModuleParameters(layer, effects) {\n    return null;\n  }\n\n  getLayerParameters(layer, layerIndex) {\n    return layer.props.parameters;\n  }\n\n  /* Private */\n  _shouldDrawLayer(layer, viewport, pass, layerFilter) {\n    let shouldDrawLayer = this.shouldDrawLayer(layer) && !layer.isComposite && layer.props.visible;\n\n    if (shouldDrawLayer && layerFilter) {\n      shouldDrawLayer = layerFilter({\n        layer,\n        viewport,\n        isPicking: pass.startsWith('picking'),\n        renderPass: pass\n      });\n    }\n    return shouldDrawLayer;\n  }\n\n  _getModuleParameters(layer, effects, pass, overrides) {\n    const moduleParameters = Object.assign(Object.create(layer.props), {\n      viewport: layer.context.viewport,\n      mousePosition: layer.context.mousePosition,\n      pickingActive: 0,\n      devicePixelRatio: cssToDeviceRatio(this.gl)\n    });\n\n    if (effects) {\n      for (const effect of effects) {\n        Object.assign(moduleParameters, effect.getModuleParameters(layer));\n      }\n    }\n\n    return Object.assign(moduleParameters, this.getModuleParameters(layer, effects), overrides);\n  }\n}\n\n// Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\nfunction getGLViewport(gl, {viewport}) {\n  // TODO - dummy default for node\n  // Fallback to width/height when clientWidth/clientHeight are 0 or undefined.\n  const height = gl.canvas ? gl.canvas.clientHeight || gl.canvas.height : 100;\n  // Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\n  const dimensions = viewport;\n  const pixelRatio = cssToDeviceRatio(gl);\n  return [\n    dimensions.x * pixelRatio,\n    (height - dimensions.y - dimensions.height) * pixelRatio,\n    dimensions.width * pixelRatio,\n    dimensions.height * pixelRatio\n  ];\n}\n\nfunction clearGLCanvas(gl) {\n  const width = gl.drawingBufferWidth;\n  const height = gl.drawingBufferHeight;\n  // clear depth and color buffers, restoring transparency\n  setParameters(gl, {viewport: [0, 0, width, height]});\n  gl.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n}\n"],"file":"layers-pass.js"}