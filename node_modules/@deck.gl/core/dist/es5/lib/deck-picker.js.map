{"version":3,"sources":["../../../src/lib/deck-picker.js"],"names":["DeckPicker","gl","pickingFBO","pickLayersPass","PickLayersPass","layerFilter","lastPickedInfo","index","layerId","info","props","depthFBO","color","opts","_pickClosestObject","_pickVisibleObjects","x","y","layers","viewports","lastPickedLayerId","layer","id","find","l","coordinate","unproject","lngLat","Object","assign","object","Framebuffer","isSupported","colorBufferFloat","attach","Texture2D","format","type","resize","width","canvas","height","radius","depth","mode","event","unproject3D","onViewportActive","_resizeBuffer","pixelRatio","devicePixelRange","devicePixel","Math","floor","deviceRadius","round","deviceRect","_getPickingRect","deviceX","deviceY","deviceWidth","deviceHeight","infos","result","affectedLayers","i","pickedColors","_drawAndSample","pass","redrawReason","pickInfo","z","pickedLayer","zValues","pickedX","pickedY","pickZ","distanceScales","metersPerUnit","position","pickedColor","clearPickingColor","processedPickInfos","forEach","push","restorePickingColors","emptyInfo","get","leftTop","deviceLeft","deviceTop","rightBottom","deviceRight","deviceBottom","pickInfos","uniqueInfos","Map","pickedObjectIndex","picked","has","set","Array","from","values","pickableLayers","filter","isPickable","length","render","Float32Array","Uint8Array","sourceX","sourceY","sourceWidth","sourceHeight","target","max","min"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Framebuffer,\n  Texture2D,\n  isWebGL2,\n  readPixelsToArray,\n  cssToDeviceRatio,\n  cssToDevicePixels\n} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport assert from '../utils/assert';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport {getClosestObject, getUniqueObjects} from './picking/query-object';\nimport {processPickInfo, callLayerPickingCallbacks, getLayerPickingInfo} from './picking/pick-info';\n\nexport default class DeckPicker {\n  constructor(gl) {\n    this.gl = gl;\n    this.pickingFBO = null;\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.layerFilter = null;\n    this.lastPickedInfo = {\n      // For callback tracking and auto highlight\n      index: -1,\n      layerId: null,\n      info: null\n    };\n  }\n\n  setProps(props) {\n    if ('layerFilter' in props) {\n      this.layerFilter = props.layerFilter;\n    }\n  }\n\n  finalize() {\n    if (this.pickingFBO) {\n      this.pickingFBO.delete();\n    }\n    if (this.depthFBO) {\n      this.depthFBO.color.delete();\n      this.depthFBO.delete();\n    }\n  }\n\n  // Pick the closest info at given coordinate\n  pickObject(opts) {\n    return this._pickClosestObject(opts);\n  }\n\n  // Get all unique infos within a bounding box\n  pickObjects(opts) {\n    return this._pickVisibleObjects(opts);\n  }\n\n  // Returns a new picking info object by assuming the last picked object is still picked\n  getLastPickedObject({x, y, layers, viewports}, lastPickedInfo = this.lastPickedInfo.info) {\n    const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;\n    const layer = lastPickedLayerId ? layers.find(l => l.id === lastPickedLayerId) : null;\n    const coordinate = viewports[0] && viewports[0].unproject([x, y]);\n\n    const info = {\n      x,\n      y,\n      coordinate,\n      // TODO remove the lngLat prop after compatibility check\n      lngLat: coordinate,\n      layer\n    };\n\n    if (layer) {\n      return Object.assign({}, lastPickedInfo, info);\n    }\n    return Object.assign(info, {color: null, object: null, index: -1});\n  }\n\n  // Private\n  _resizeBuffer() {\n    const {gl} = this;\n    // Create a frame buffer if not already available\n    if (!this.pickingFBO) {\n      this.pickingFBO = new Framebuffer(gl);\n      if (Framebuffer.isSupported(gl, {colorBufferFloat: true})) {\n        this.depthFBO = new Framebuffer(gl);\n        this.depthFBO.attach({\n          [GL.COLOR_ATTACHMENT0]: new Texture2D(gl, {\n            format: isWebGL2(gl) ? GL.RGBA32F : GL.RGBA,\n            type: GL.FLOAT\n          })\n        });\n      }\n    }\n    // Resize it to current canvas size (this is a noop if size hasn't changed)\n    this.pickingFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    this.depthFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    return this.pickingFBO;\n  }\n\n  // Pick the closest object at the given (x,y) coordinate\n  // eslint-disable-next-line max-statements,complexity\n  _pickClosestObject({\n    layers,\n    viewports,\n    x,\n    y,\n    radius = 0,\n    depth = 1,\n    mode = 'query',\n    event,\n    unproject3D,\n    onViewportActive\n  }) {\n    this._resizeBuffer();\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // Top-left coordinates [x, y] to bottom-left coordinates [deviceX, deviceY]\n    // And compensate for pixelRatio\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const devicePixelRange = cssToDevicePixels(this.gl, [x, y], true);\n    const devicePixel = [\n      devicePixelRange.x + Math.floor(devicePixelRange.width / 2),\n      devicePixelRange.y + Math.floor(devicePixelRange.height / 2)\n    ];\n\n    const deviceRadius = Math.round(radius * pixelRatio);\n    const {width, height} = this.pickingFBO;\n    const deviceRect = this._getPickingRect({\n      deviceX: devicePixel[0],\n      deviceY: devicePixel[1],\n      deviceRadius,\n      deviceWidth: width,\n      deviceHeight: height\n    });\n\n    let infos;\n    const result = [];\n    const affectedLayers = {};\n\n    for (let i = 0; i < depth; i++) {\n      const pickedColors =\n        deviceRect &&\n        this._drawAndSample({\n          layers,\n          viewports,\n          onViewportActive,\n          deviceRect,\n          pass: `picking:${mode}`,\n          redrawReason: mode\n        });\n\n      const pickInfo = getClosestObject({\n        pickedColors,\n        layers,\n        deviceX: devicePixel[0],\n        deviceY: devicePixel[1],\n        deviceRadius,\n        deviceRect\n      });\n\n      let z;\n      if (pickInfo.pickedLayer && unproject3D && this.depthFBO) {\n        const zValues = this._drawAndSample({\n          layers: [pickInfo.pickedLayer],\n          viewports,\n          onViewportActive,\n          deviceRect: {x: pickInfo.pickedX, y: pickInfo.pickedY, width: 1, height: 1},\n          pass: `picking:${mode}`,\n          redrawReason: 'pick-z',\n          pickZ: true\n        });\n        // picked value is in common space (pixels) from the camera target (viewport.position)\n        // convert it to meters from the ground\n        z = zValues[0] * viewports[0].distanceScales.metersPerUnit[2] + viewports[0].position[2];\n      }\n\n      // Only exclude if we need to run picking again.\n      // We need to run picking again if an object is detected AND\n      // we have not exhausted the requested depth.\n      if (pickInfo.pickedColor && i + 1 < depth) {\n        const layerId = pickInfo.pickedColor[3] - 1;\n        affectedLayers[layerId] = true;\n        layers[layerId].clearPickingColor(pickInfo.pickedColor);\n      }\n\n      // This logic needs to run even if no object is picked.\n      infos = processPickInfo({\n        pickInfo,\n        lastPickedInfo: this.lastPickedInfo,\n        mode,\n        layers,\n        viewports,\n        x,\n        y,\n        z,\n        pixelRatio\n      });\n\n      const processedPickInfos = callLayerPickingCallbacks(infos, mode, event);\n\n      if (processedPickInfos) {\n        processedPickInfos.forEach(info => result.push(info));\n      }\n\n      // If no object is picked stop.\n      if (!pickInfo.pickedColor) {\n        break;\n      }\n    }\n\n    // reset only affected buffers\n    for (const layerId in affectedLayers) {\n      layers[layerId].restorePickingColors();\n    }\n\n    return {result, emptyInfo: infos && infos.get(null)};\n  }\n\n  // Pick all objects within the given bounding box\n  _pickVisibleObjects({\n    layers,\n    viewports,\n    x,\n    y,\n    width = 1,\n    height = 1,\n    mode = 'query',\n    onViewportActive\n  }) {\n    this._resizeBuffer();\n    // Convert from canvas top-left to WebGL bottom-left coordinates\n    // And compensate for pixelRatio\n    const pixelRatio = cssToDeviceRatio(this.gl);\n    const leftTop = cssToDevicePixels(this.gl, [x, y], true);\n\n    // take left and top (y inverted in device pixels) from start location\n    const deviceLeft = leftTop.x;\n    const deviceTop = leftTop.y + leftTop.height;\n\n    // take right and bottom (y inverted in device pixels) from end location\n    const rightBottom = cssToDevicePixels(this.gl, [x + width, y + height], true);\n    const deviceRight = rightBottom.x + rightBottom.width;\n    const deviceBottom = rightBottom.y;\n\n    const deviceRect = {\n      x: deviceLeft,\n      y: deviceBottom,\n      // deviceTop and deviceRight represent the first pixel outside the desired rect\n      width: deviceRight - deviceLeft,\n      height: deviceTop - deviceBottom\n    };\n\n    const pickedColors = this._drawAndSample({\n      layers,\n      viewports,\n      onViewportActive,\n      deviceRect,\n      pass: `picking:${mode}`,\n      redrawReason: mode\n    });\n\n    const pickInfos = getUniqueObjects({pickedColors, layers});\n\n    // Only return unique infos, identified by info.object\n    const uniqueInfos = new Map();\n\n    pickInfos.forEach(pickInfo => {\n      let info = {\n        color: pickInfo.pickedColor,\n        layer: null,\n        index: pickInfo.pickedObjectIndex,\n        picked: true,\n        x,\n        y,\n        width,\n        height,\n        pixelRatio\n      };\n\n      info = getLayerPickingInfo({layer: pickInfo.pickedLayer, info, mode});\n      if (!uniqueInfos.has(info.object)) {\n        uniqueInfos.set(info.object, info);\n      }\n    });\n\n    return Array.from(uniqueInfos.values());\n  }\n\n  // returns pickedColor or null if no pickable layers found.\n  _drawAndSample({layers, viewports, onViewportActive, deviceRect, pass, redrawReason, pickZ}) {\n    assert(deviceRect.width > 0 && deviceRect.height > 0);\n\n    const pickableLayers = layers.filter(layer => layer.isPickable());\n    if (pickableLayers.length < 1) {\n      return null;\n    }\n\n    const pickingFBO = pickZ ? this.depthFBO : this.pickingFBO;\n\n    this.pickLayersPass.render({\n      layers,\n      layerFilter: this.layerFilter,\n      viewports,\n      onViewportActive,\n      pickingFBO,\n      deviceRect,\n      pass,\n      redrawReason,\n      pickZ\n    });\n\n    // Read from an already rendered picking buffer\n    // Returns an Uint8ClampedArray of picked pixels\n    const {x, y, width, height} = deviceRect;\n    const pickedColors = new (pickZ ? Float32Array : Uint8Array)(width * height * 4);\n    readPixelsToArray(pickingFBO, {\n      sourceX: x,\n      sourceY: y,\n      sourceWidth: width,\n      sourceHeight: height,\n      target: pickedColors\n    });\n\n    return pickedColors;\n  }\n\n  // Calculate a picking rect centered on deviceX and deviceY and clipped to device\n  // Returns null if pixel is outside of device\n  _getPickingRect({deviceX, deviceY, deviceRadius, deviceWidth, deviceHeight}) {\n    // Create a box of size `radius * 2 + 1` centered at [deviceX, deviceY]\n    const x = Math.max(0, deviceX - deviceRadius);\n    const y = Math.max(0, deviceY - deviceRadius);\n    const width = Math.min(deviceWidth, deviceX + deviceRadius + 1) - x;\n    const height = Math.min(deviceHeight, deviceY + deviceRadius + 1) - y;\n\n    // x, y out of bounds.\n    if (width <= 0 || height <= 0) {\n      return null;\n    }\n\n    return {x, y, width, height};\n  }\n}\n"],"file":"deck-picker.js"}