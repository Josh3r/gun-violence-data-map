{"version":3,"sources":["../../../../src/shaderlib/project/project-functions.js"],"names":["lngLatZToWorldPosition","lngLatZ","viewport","offsetMode","longitude","latitude","z","projectFlat","X","Y","distanceScales","getDistanceScales","Z","unitsPerMeter","normalizeParameters","opts","normalizedParams","Object","assign","coordinateSystem","coordinateOrigin","fromCoordinateSystem","fromCoordinateOrigin","COORDINATE_SYSTEM","DEFAULT","isGeospatial","LNGLAT","CARTESIAN","undefined","zoom","LNGLAT_AUTO_OFFSET_ZOOM_THRESHOLD","LNGLAT_OFFSETS","Math","fround","getWorldPosition","position","modelMatrix","x","y","vec4","transformMat4","METER_OFFSETS","projectPosition","params","worldPosition","originWorld","vec3","sub"],"mappings":"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","sourcesContent":["/**\n * Projection utils\n * TODO: move to Viewport class?\n */\nimport {COORDINATE_SYSTEM} from '../../lib/constants';\nimport {LNGLAT_AUTO_OFFSET_ZOOM_THRESHOLD} from './viewport-uniforms';\n\nimport * as vec4 from 'gl-matrix/vec4';\nimport * as vec3 from 'gl-matrix/vec3';\nimport {addMetersToLngLat} from '@math.gl/web-mercator';\n\n// In project.glsl, offset modes calculate z differently from LNG_LAT mode.\n// offset modes apply the y adjustment (unitsPerMeter2) when projecting z\n// LNG_LAT mode only use the linear scale.\nfunction lngLatZToWorldPosition(lngLatZ, viewport, offsetMode = false) {\n  const [longitude, latitude, z = 0] = lngLatZ;\n  const [X, Y] = viewport.projectFlat(lngLatZ);\n  const distanceScales = viewport.getDistanceScales(offsetMode && [longitude, latitude]);\n  const Z = z * distanceScales.unitsPerMeter[2];\n  return [X, Y, Z];\n}\n\nfunction normalizeParameters(opts) {\n  const normalizedParams = Object.assign({}, opts);\n\n  let {coordinateSystem} = opts;\n  const {viewport, coordinateOrigin, fromCoordinateSystem, fromCoordinateOrigin} = opts;\n\n  if (coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n    coordinateSystem = viewport.isGeospatial\n      ? COORDINATE_SYSTEM.LNGLAT\n      : COORDINATE_SYSTEM.CARTESIAN;\n  }\n\n  if (fromCoordinateSystem === undefined) {\n    normalizedParams.fromCoordinateSystem = coordinateSystem;\n  }\n  if (fromCoordinateOrigin === undefined) {\n    normalizedParams.fromCoordinateOrigin = coordinateOrigin;\n  }\n\n  if (\n    coordinateSystem === COORDINATE_SYSTEM.LNGLAT &&\n    viewport.zoom >= LNGLAT_AUTO_OFFSET_ZOOM_THRESHOLD\n  ) {\n    coordinateSystem = COORDINATE_SYSTEM.LNGLAT_OFFSETS;\n    normalizedParams.coordinateOrigin = [\n      Math.fround(viewport.longitude),\n      Math.fround(viewport.latitude)\n    ];\n  }\n  normalizedParams.coordinateSystem = coordinateSystem;\n\n  return normalizedParams;\n}\n\nexport function getWorldPosition(\n  position,\n  {viewport, modelMatrix, coordinateSystem, coordinateOrigin, offsetMode}\n) {\n  let [x, y, z] = position;\n\n  if (modelMatrix) {\n    [x, y, z] = vec4.transformMat4([], [x, y, z, 1.0], modelMatrix);\n  }\n\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT:\n      return lngLatZToWorldPosition([x, y, z], viewport, offsetMode);\n\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n      return lngLatZToWorldPosition(\n        [x + coordinateOrigin[0], y + coordinateOrigin[1], z + (coordinateOrigin[2] || 0)],\n        viewport,\n        offsetMode\n      );\n\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n      return lngLatZToWorldPosition(\n        addMetersToLngLat(coordinateOrigin, [x, y, z]),\n        viewport,\n        offsetMode\n      );\n\n    case COORDINATE_SYSTEM.CARTESIAN:\n    default:\n      return viewport.projectPosition([x, y, z]);\n  }\n}\n\n/**\n * Equivalent to project_position in project.glsl\n * projects a user supplied position to world position directly with or without\n * a reference coordinate system\n * @param {array} position - [x, y, z]\n * @param {object} params\n * @param {Viewport} params.viewport - the current viewport\n * @param {number} params.coordinateSystem - the reference coordinate system used\n *   align world position\n * @param {array} params.coordinateOrigin - the reference coordinate origin used\n *   to align world position\n * @param {Matrix4} [params.modelMatrix] - the model matrix of the supplied position\n * @param {number} [params.fromCoordinateSystem] - the coordinate system that the\n *   supplied position is in. Default to the same as `coordinateSystem`.\n * @param {array} [params.fromCoordinateOrigin] - the coordinate origin that the\n *   supplied position is in. Default to the same as `coordinateOrigin`.\n */\nexport function projectPosition(position, params) {\n  const {\n    viewport,\n    coordinateSystem,\n    coordinateOrigin,\n    // optional\n    modelMatrix,\n    fromCoordinateSystem,\n    fromCoordinateOrigin\n  } = normalizeParameters(params);\n\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n    case COORDINATE_SYSTEM.METER_OFFSETS: {\n      const worldPosition = getWorldPosition(position, {\n        viewport,\n        modelMatrix,\n        coordinateSystem: fromCoordinateSystem,\n        coordinateOrigin: fromCoordinateOrigin,\n        offsetMode: true\n      });\n      const originWorld = lngLatZToWorldPosition(coordinateOrigin, viewport, true);\n      vec3.sub(worldPosition, worldPosition, originWorld);\n\n      return worldPosition;\n    }\n\n    case COORDINATE_SYSTEM.LNGLAT:\n    case COORDINATE_SYSTEM.CARTESIAN:\n    default:\n      return getWorldPosition(position, {\n        viewport,\n        modelMatrix,\n        coordinateSystem: fromCoordinateSystem,\n        coordinateOrigin: fromCoordinateOrigin,\n        offsetMode: false\n      });\n  }\n}\n"],"file":"project-functions.js"}