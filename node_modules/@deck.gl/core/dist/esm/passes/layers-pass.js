import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import Pass from './pass';
import { clear, setParameters, withParameters, cssToDeviceRatio } from '@luma.gl/core';

var LayersPass = function (_Pass) {
  _inherits(LayersPass, _Pass);

  function LayersPass() {
    _classCallCheck(this, LayersPass);

    return _possibleConstructorReturn(this, _getPrototypeOf(LayersPass).apply(this, arguments));
  }

  _createClass(LayersPass, [{
    key: "render",
    value: function render(props) {
      var gl = this.gl;
      setParameters(gl, {
        framebuffer: props.target
      });
      return this._drawLayers(props);
    }
  }, {
    key: "_drawLayers",
    value: function _drawLayers(props) {
      var _this = this;

      var viewports = props.viewports,
          views = props.views,
          onViewportActive = props.onViewportActive,
          _props$clearCanvas = props.clearCanvas,
          clearCanvas = _props$clearCanvas === void 0 ? true : _props$clearCanvas;
      var gl = this.gl;

      if (clearCanvas) {
        clearGLCanvas(gl);
      }

      var renderStats = [];
      viewports.forEach(function (viewportOrDescriptor, i) {
        var viewport = viewportOrDescriptor.viewport || viewportOrDescriptor;
        var view = views && views[viewport.id];
        onViewportActive(viewport);
        props.viewport = viewport;
        props.view = view;

        var stats = _this._drawLayersInViewport(gl, props);

        renderStats.push(stats);
      });
      return renderStats;
    }
  }, {
    key: "_drawLayersInViewport",
    value: function _drawLayersInViewport(gl, _ref) {
      var _this2 = this;

      var layers = _ref.layers,
          layerFilter = _ref.layerFilter,
          viewport = _ref.viewport,
          view = _ref.view,
          _ref$pass = _ref.pass,
          pass = _ref$pass === void 0 ? 'unknown' : _ref$pass,
          effects = _ref.effects,
          moduleParameters = _ref.moduleParameters;
      var glViewport = getGLViewport(gl, {
        viewport: viewport
      });

      if (view && view.props.clear) {
        var clearOpts = view.props.clear === true ? {
          color: true,
          depth: true
        } : view.props.clear;
        withParameters(gl, {
          scissorTest: true,
          scissor: glViewport
        }, function () {
          return clear(gl, clearOpts);
        });
      }

      var renderStatus = {
        totalCount: layers.length,
        visibleCount: 0,
        compositeCount: 0,
        pickableCount: 0
      };
      setParameters(gl, {
        viewport: glViewport
      });
      layers.forEach(function (layer, layerIndex) {
        var shouldDrawLayer = _this2._shouldDrawLayer(layer, viewport, pass, layerFilter);

        if (shouldDrawLayer && layer.props.pickable) {
          renderStatus.pickableCount++;
        }

        if (layer.isComposite) {
          renderStatus.compositeCount++;
        }

        if (shouldDrawLayer) {
          renderStatus.visibleCount++;

          var _moduleParameters = _this2._getModuleParameters(layer, effects, pass, moduleParameters);

          var uniforms = Object.assign({}, layer.context.uniforms, {
            layerIndex: layerIndex
          });

          var layerParameters = _this2.getLayerParameters(layer, layerIndex);

          layer.drawLayer({
            moduleParameters: _moduleParameters,
            uniforms: uniforms,
            parameters: layerParameters
          });
        }
      });
      return renderStatus;
    }
  }, {
    key: "shouldDrawLayer",
    value: function shouldDrawLayer(layer) {
      return true;
    }
  }, {
    key: "getModuleParameters",
    value: function getModuleParameters(layer, effects) {
      return null;
    }
  }, {
    key: "getLayerParameters",
    value: function getLayerParameters(layer, layerIndex) {
      return layer.props.parameters;
    }
  }, {
    key: "_shouldDrawLayer",
    value: function _shouldDrawLayer(layer, viewport, pass, layerFilter) {
      var shouldDrawLayer = this.shouldDrawLayer(layer) && !layer.isComposite && layer.props.visible;

      if (shouldDrawLayer && layerFilter) {
        shouldDrawLayer = layerFilter({
          layer: layer,
          viewport: viewport,
          isPicking: pass.startsWith('picking'),
          renderPass: pass
        });
      }

      return shouldDrawLayer;
    }
  }, {
    key: "_getModuleParameters",
    value: function _getModuleParameters(layer, effects, pass, overrides) {
      var moduleParameters = Object.assign(Object.create(layer.props), {
        viewport: layer.context.viewport,
        mousePosition: layer.context.mousePosition,
        pickingActive: 0,
        devicePixelRatio: cssToDeviceRatio(this.gl)
      });

      if (effects) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = effects[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var effect = _step.value;
            Object.assign(moduleParameters, effect.getModuleParameters(layer));
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }

      return Object.assign(moduleParameters, this.getModuleParameters(layer, effects), overrides);
    }
  }]);

  return LayersPass;
}(Pass);

export { LayersPass as default };

function getGLViewport(gl, _ref2) {
  var viewport = _ref2.viewport;
  var height = gl.canvas ? gl.canvas.clientHeight || gl.canvas.height : 100;
  var dimensions = viewport;
  var pixelRatio = cssToDeviceRatio(gl);
  return [dimensions.x * pixelRatio, (height - dimensions.y - dimensions.height) * pixelRatio, dimensions.width * pixelRatio, dimensions.height * pixelRatio];
}

function clearGLCanvas(gl) {
  var width = gl.drawingBufferWidth;
  var height = gl.drawingBufferHeight;
  setParameters(gl, {
    viewport: [0, 0, width, height]
  });
  gl.clear(16384 | 256);
}
//# sourceMappingURL=layers-pass.js.map