{"version":3,"sources":["../../../../src/lib/attribute/attribute.js"],"names":["DataColumn","assert","createIterable","getAccessorFromBuffer","fillArray","range","normalizeTransitionSettings","Attribute","gl","opts","transition","noAlloc","update","accessor","transform","startIndices","Object","assign","settings","_autoUpdater","state","lastExternalBuffer","binaryValue","binaryAccessor","needsUpdate","needsRedraw","updateRanges","FULL","seal","_validateAttributeUpdaters","clearChangedFlags","id","concat","Boolean","layerSettings","supportsTransition","userSettings","Array","isArray","find","a","reason","dataRange","startRow","endRow","Infinity","add","EMPTY","setData","numInstances","Number","isFinite","copy","data","props","context","updated","call","value","constant","buffer","byteLength","startOffset","getVertexOffset","endOffset","length","size","_checkAttributeArray","clearNeedsUpdate","setNeedsRedraw","undefined","hasChanged","ArrayBuffer","isView","needsNormalize","stride","offset","nested","row","vertexIndex","shaderAttributeDefs","shaderAttributes","shaderAttributeName","attribute","accessorFunc","i","iterable","objectInfo","object","index","objectValue","numVertices","startIndex","item","_normalizeValue","set","target","source","start","count","hasUpdater","Error","valid","layout"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport DataColumn from './data-column';\nimport assert from '../../utils/assert';\nimport {createIterable, getAccessorFromBuffer} from '../../utils/iterable-utils';\nimport {fillArray} from '../../utils/flatten';\nimport * as range from '../../utils/range';\nimport {normalizeTransitionSettings} from './attribute-transition-utils';\n\nexport default class Attribute extends DataColumn {\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    const {\n      // deck.gl fields\n      transition = false,\n      noAlloc = false,\n      update = null,\n      accessor = null,\n      transform = null,\n      startIndices = null\n    } = opts;\n\n    Object.assign(this.settings, {\n      transition,\n      noAlloc,\n      update: update || (accessor && this._autoUpdater),\n      accessor,\n      transform\n    });\n\n    Object.assign(this.state, {\n      lastExternalBuffer: null,\n      binaryValue: null,\n      binaryAccessor: null,\n      needsUpdate: true,\n      needsRedraw: false,\n      updateRanges: range.FULL,\n      startIndices\n    });\n\n    Object.seal(this.settings);\n    Object.seal(this.state);\n\n    // Check all fields and generate helpful error messages\n    this._validateAttributeUpdaters();\n  }\n\n  get startIndices() {\n    return this.state.startIndices;\n  }\n\n  set startIndices(layout) {\n    this.state.startIndices = layout;\n  }\n\n  needsUpdate() {\n    return this.state.needsUpdate;\n  }\n\n  needsRedraw({clearChangedFlags = false} = {}) {\n    const needsRedraw = this.state.needsRedraw;\n    this.state.needsRedraw = needsRedraw && !clearChangedFlags;\n    return needsRedraw;\n  }\n\n  getUpdateTriggers() {\n    const {accessor} = this.settings;\n\n    // Backards compatibility: allow attribute name to be used as update trigger key\n    return [this.id].concat((typeof accessor !== 'function' && accessor) || []);\n  }\n\n  supportsTransition() {\n    return Boolean(this.settings.transition);\n  }\n\n  // Resolve transition settings object if transition is enabled, otherwise `null`\n  getTransitionSetting(opts) {\n    const {accessor} = this.settings;\n    // TODO: have the layer resolve these transition settings itself?\n    const layerSettings = this.settings.transition;\n    if (!this.supportsTransition()) {\n      return null;\n    }\n    // these are the transition settings passed in by the user\n    const userSettings = Array.isArray(accessor)\n      ? opts[accessor.find(a => opts[a])]\n      : opts[accessor];\n\n    // Shorthand: use duration instead of parameter object\n    return normalizeTransitionSettings(userSettings, layerSettings);\n  }\n\n  setNeedsUpdate(reason = this.id, dataRange) {\n    this.state.needsUpdate = this.state.needsUpdate || reason;\n    if (dataRange) {\n      const {startRow = 0, endRow = Infinity} = dataRange;\n      this.state.updateRanges = range.add(this.state.updateRanges, [startRow, endRow]);\n    } else {\n      this.state.updateRanges = range.FULL;\n    }\n  }\n\n  clearNeedsUpdate() {\n    this.state.needsUpdate = false;\n    this.state.updateRanges = range.EMPTY;\n  }\n\n  setNeedsRedraw(reason = this.id) {\n    this.state.needsRedraw = this.state.needsRedraw || reason;\n  }\n\n  update(opts) {\n    // backward compatibility\n    this.setData(opts);\n  }\n\n  allocate(numInstances) {\n    const {state, settings} = this;\n\n    if (settings.noAlloc) {\n      // Data is provided through a Buffer object.\n      return false;\n    }\n\n    if (settings.update) {\n      assert(Number.isFinite(numInstances));\n      super.allocate({\n        numInstances,\n        copy: state.updateRanges !== range.FULL\n      });\n      return true;\n    }\n\n    return false;\n  }\n\n  updateBuffer({numInstances, data, props, context}) {\n    if (!this.needsUpdate()) {\n      return false;\n    }\n\n    const {\n      state: {updateRanges},\n      settings: {update, noAlloc}\n    } = this;\n\n    let updated = true;\n    if (update) {\n      // Custom updater - typically for non-instanced layers\n      for (const [startRow, endRow] of updateRanges) {\n        update.call(context, this, {data, startRow, endRow, props, numInstances});\n      }\n      if (!this.value) {\n        // no value was assigned during update\n      } else if (this.constant || this.buffer.byteLength < this.value.byteLength) {\n        this.setData({\n          value: this.value,\n          constant: this.constant\n        });\n      } else {\n        for (const [startRow, endRow] of updateRanges) {\n          const startOffset = Number.isFinite(startRow) ? this.getVertexOffset(startRow) : 0;\n          const endOffset = Number.isFinite(endRow)\n            ? this.getVertexOffset(endRow)\n            : noAlloc || !Number.isFinite(numInstances)\n              ? this.value.length\n              : numInstances * this.size;\n\n          super.updateSubBuffer({startOffset, endOffset});\n        }\n      }\n      this._checkAttributeArray();\n    } else {\n      updated = false;\n    }\n\n    this.clearNeedsUpdate();\n    this.setNeedsRedraw();\n\n    return updated;\n  }\n\n  // Use generic value\n  // Returns true if successful\n  setConstantValue(value) {\n    if (value === undefined || typeof value === 'function') {\n      return false;\n    }\n\n    const hasChanged = this.setData({constant: true, value});\n\n    if (hasChanged) {\n      this.setNeedsRedraw();\n    }\n    this.clearNeedsUpdate();\n    return true;\n  }\n\n  // Use external buffer\n  // Returns true if successful\n  // eslint-disable-next-line max-statements\n  setExternalBuffer(buffer) {\n    const {state} = this;\n\n    if (!buffer) {\n      state.lastExternalBuffer = null;\n      return false;\n    }\n\n    this.clearNeedsUpdate();\n\n    if (state.lastExternalBuffer === buffer) {\n      return true;\n    }\n    state.lastExternalBuffer = buffer;\n    this.setNeedsRedraw();\n    this.setData(buffer);\n    return true;\n  }\n\n  // Binary value is a typed array packed from mapping the source data with the accessor\n  // If the returned value from the accessor is the same as the attribute value, set it directly\n  // Otherwise use the auto updater for transform/normalization\n  setBinaryValue(buffer, startIndices = null) {\n    const {state, settings} = this;\n\n    if (!buffer) {\n      state.binaryValue = null;\n      state.binaryAccessor = null;\n      return false;\n    }\n\n    if (settings.noAlloc) {\n      // Let the layer handle this\n      return false;\n    }\n\n    if (state.binaryValue === buffer) {\n      this.clearNeedsUpdate();\n      return true;\n    }\n    state.binaryValue = buffer;\n    this.setNeedsRedraw();\n\n    if (ArrayBuffer.isView(buffer)) {\n      buffer = {value: buffer};\n    }\n    assert(ArrayBuffer.isView(buffer.value), `invalid ${settings.accessor}`);\n    const needsUpdate = settings.transform || startIndices !== this.startIndices;\n\n    if (needsUpdate) {\n      const needsNormalize = buffer.size && buffer.size !== this.size;\n\n      state.binaryAccessor = getAccessorFromBuffer(buffer.value, {\n        size: buffer.size || this.size,\n        stride: buffer.stride,\n        offset: buffer.offset,\n        startIndices,\n        nested: needsNormalize\n      });\n      // Fall through to auto updater\n      return false;\n    }\n\n    this.clearNeedsUpdate();\n    this.setData(buffer);\n    return true;\n  }\n\n  getVertexOffset(row) {\n    const {startIndices} = this;\n    const vertexIndex = startIndices ? startIndices[row] : row;\n    return vertexIndex * this.size;\n  }\n\n  getShaderAttributes() {\n    const shaderAttributeDefs = this.settings.shaderAttributes || {[this.id]: null};\n    const shaderAttributes = {};\n\n    for (const shaderAttributeName in shaderAttributeDefs) {\n      Object.assign(\n        shaderAttributes,\n        super.getShaderAttributes(shaderAttributeName, shaderAttributeDefs[shaderAttributeName])\n      );\n    }\n\n    return shaderAttributes;\n  }\n\n  /* eslint-disable max-depth, max-statements */\n  _autoUpdater(attribute, {data, startRow, endRow, props, numInstances}) {\n    const {settings, state, value, size, startIndices} = attribute;\n\n    const {accessor, transform} = settings;\n    const accessorFunc =\n      state.binaryAccessor || (typeof accessor === 'function' ? accessor : props[accessor]);\n\n    assert(typeof accessorFunc === 'function', `accessor \"${accessor}\" is not a function`);\n\n    let i = attribute.getVertexOffset(startRow);\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n\n      let objectValue = accessorFunc(object, objectInfo);\n      if (transform) {\n        // transform callbacks could be bound to a particular layer instance.\n        // always point `this` to the current layer.\n        objectValue = transform.call(this, objectValue);\n      }\n\n      if (startIndices) {\n        const numVertices =\n          (startIndices[objectInfo.index + 1] || numInstances) - startIndices[objectInfo.index];\n        if (objectValue && Array.isArray(objectValue[0])) {\n          let startIndex = i;\n          for (const item of objectValue) {\n            attribute._normalizeValue(item, value, startIndex);\n            startIndex += size;\n          }\n        } else if (objectValue && objectValue.length > size) {\n          value.set(objectValue, i);\n        } else {\n          attribute._normalizeValue(objectValue, objectInfo.target, 0);\n          fillArray({\n            target: value,\n            source: objectInfo.target,\n            start: i,\n            count: numVertices\n          });\n        }\n        i += numVertices * size;\n      } else {\n        attribute._normalizeValue(objectValue, value, i);\n        i += size;\n      }\n    }\n    attribute.constant = false;\n  }\n  /* eslint-enable max-depth, max-statements */\n\n  // Validate deck.gl level fields\n  _validateAttributeUpdaters() {\n    const {settings} = this;\n\n    // Check that 'update' is a valid function\n    const hasUpdater = settings.noAlloc || typeof settings.update === 'function';\n    if (!hasUpdater) {\n      throw new Error(`Attribute ${this.id} missing update or accessor`);\n    }\n  }\n\n  _checkAttributeArray() {\n    const {value} = this;\n    if (value && value.length >= 4) {\n      const valid =\n        Number.isFinite(value[0]) &&\n        Number.isFinite(value[1]) &&\n        Number.isFinite(value[2]) &&\n        Number.isFinite(value[3]);\n      if (!valid) {\n        throw new Error(`Illegal attribute generated for ${this.id}`);\n      }\n    }\n  }\n}\n"],"file":"attribute.js"}