{"version":3,"sources":["../../../src/utils/flatten.js"],"names":["flatten","array","filter","map","x","result","Array","isArray","flattenArray","index","length","value","push","fillArray","target","source","start","count","total","copied","i","copyWithin"],"mappings":"AAgCA,OAAO,SAASA,OAAT,CAAiBC,KAAjB,EAA+E;AAAA,iFAAJ,EAAI;AAAA,yBAAtDC,MAAsD;AAAA,MAAtDA,MAAsD,4BAA7C;AAAA,WAAM,IAAN;AAAA,GAA6C;AAAA,sBAAjCC,GAAiC;AAAA,MAAjCA,GAAiC,yBAA3B,UAAAC,CAAC;AAAA,WAAIA,CAAJ;AAAA,GAA0B;AAAA,yBAAnBC,MAAmB;AAAA,MAAnBA,MAAmB,4BAAV,EAAU;;AAEpF,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcN,KAAd,CAAL,EAA2B;AACzB,WAAOC,MAAM,CAACD,KAAD,CAAN,GAAgB,CAACE,GAAG,CAACF,KAAD,CAAJ,CAAhB,GAA+B,EAAtC;AACD;;AAED,SAAOO,YAAY,CAACP,KAAD,EAAQC,MAAR,EAAgBC,GAAhB,EAAqBE,MAArB,CAAnB;AACD;;AAGD,SAASG,YAAT,CAAsBP,KAAtB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CE,MAA1C,EAAkD;AAChD,MAAII,KAAK,GAAG,CAAC,CAAb;;AACA,SAAO,EAAEA,KAAF,GAAUR,KAAK,CAACS,MAAvB,EAA+B;AAC7B,QAAMC,KAAK,GAAGV,KAAK,CAACQ,KAAD,CAAnB;;AACA,QAAIH,KAAK,CAACC,OAAN,CAAcI,KAAd,CAAJ,EAA0B;AACxBH,MAAAA,YAAY,CAACG,KAAD,EAAQT,MAAR,EAAgBC,GAAhB,EAAqBE,MAArB,CAAZ;AACD,KAFD,MAEO,IAAIH,MAAM,CAACS,KAAD,CAAV,EAAmB;AACxBN,MAAAA,MAAM,CAACO,IAAP,CAAYT,GAAG,CAACQ,KAAD,CAAf;AACD;AACF;;AACD,SAAON,MAAP;AACD;;AAGD,OAAO,SAASQ,SAAT,QAA2D;AAAA,MAAvCC,MAAuC,SAAvCA,MAAuC;AAAA,MAA/BC,MAA+B,SAA/BA,MAA+B;AAAA,0BAAvBC,KAAuB;AAAA,MAAvBA,KAAuB,4BAAf,CAAe;AAAA,0BAAZC,KAAY;AAAA,MAAZA,KAAY,4BAAJ,CAAI;AAChE,MAAMP,MAAM,GAAGK,MAAM,CAACL,MAAtB;AACA,MAAMQ,KAAK,GAAGD,KAAK,GAAGP,MAAtB;AACA,MAAIS,MAAM,GAAG,CAAb;;AACA,OAAK,IAAIC,CAAC,GAAGJ,KAAb,EAAoBG,MAAM,GAAGT,MAA7B,EAAqCS,MAAM,EAA3C,EAA+C;AAC7CL,IAAAA,MAAM,CAACM,CAAC,EAAF,CAAN,GAAcL,MAAM,CAACI,MAAD,CAApB;AACD;;AAED,SAAOA,MAAM,GAAGD,KAAhB,EAAuB;AAGrB,QAAIC,MAAM,GAAGD,KAAK,GAAGC,MAArB,EAA6B;AAC3BL,MAAAA,MAAM,CAACO,UAAP,CAAkBL,KAAK,GAAGG,MAA1B,EAAkCH,KAAlC,EAAyCA,KAAK,GAAGG,MAAjD;AACAA,MAAAA,MAAM,IAAI,CAAV;AACD,KAHD,MAGO;AACLL,MAAAA,MAAM,CAACO,UAAP,CAAkBL,KAAK,GAAGG,MAA1B,EAAkCH,KAAlC,EAAyCA,KAAK,GAAGE,KAAR,GAAgBC,MAAzD;AACAA,MAAAA,MAAM,GAAGD,KAAT;AACD;AACF;;AAED,SAAOJ,MAAP;AACD","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/**\n * Flattens a nested array into a single level array,\n * or a single value into an array with one value\n * @example flatten([[1, [2]], [3], 4]) => [1, 2, 3, 4]\n * @example flatten(1) => [1]\n * @param {Array} array The array to flatten.\n * @param {Function} filter= - Optional predicate called on each `value` to\n *   determine if it should be included (pushed onto) the resulting array.\n * @param {Function} map= - Optional transform applied to each array elements.\n * @param {Array} result=[] - Optional array to push value into\n * @return {Array} Returns the new flattened array (new array or `result` if provided)\n */\nexport function flatten(array, {filter = () => true, map = x => x, result = []} = {}) {\n  // Wrap single object in array\n  if (!Array.isArray(array)) {\n    return filter(array) ? [map(array)] : [];\n  }\n  // Deep flatten and filter the array\n  return flattenArray(array, filter, map, result);\n}\n\n// Deep flattens an array. Helper to `flatten`, see its parameters\nfunction flattenArray(array, filter, map, result) {\n  let index = -1;\n  while (++index < array.length) {\n    const value = array[index];\n    if (Array.isArray(value)) {\n      flattenArray(value, filter, map, result);\n    } else if (filter(value)) {\n      result.push(map(value));\n    }\n  }\n  return result;\n}\n\n// Uses copyWithin to significantly speed up typed array value filling\nexport function fillArray({target, source, start = 0, count = 1}) {\n  const length = source.length;\n  const total = count * length;\n  let copied = 0;\n  for (let i = start; copied < length; copied++) {\n    target[i++] = source[copied];\n  }\n\n  while (copied < total) {\n    // If we have copied less than half, copy everything we got\n    // else copy remaining in one operation\n    if (copied < total - copied) {\n      target.copyWithin(start + copied, start, start + copied);\n      copied *= 2;\n    } else {\n      target.copyWithin(start + copied, start, start + total - copied);\n      copied = total;\n    }\n  }\n\n  return target;\n}\n"],"file":"flatten.js"}