{"version":3,"sources":["../../../src/viewports/web-mercator-viewport.js"],"names":["Viewport","pixelsToWorld","getViewMatrix","addMetersToLngLat","getProjectionParameters","fitBounds","vec2","WebMercatorViewport","opts","latitude","longitude","zoom","pitch","bearing","nearZMultiplier","farZMultiplier","orthographic","width","height","altitude","scale","Math","pow","max","fov","aspect","focalDistance","near","far","viewMatrixUncentered","viewportOpts","Object","assign","viewMatrix","fovyRadians","freeze","lngLatZ","xyz","lngLat","pos","fromLocation","pixelUnprojectionMatrix","toLocation","projectFlat","translate","add","negate","newCenter","center","unprojectFlat","bounds","options","displayName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// View and Projection Matrix calculations for mapbox-js style\n// map view properties\nimport Viewport from './viewport';\n\nimport {\n  pixelsToWorld,\n  getViewMatrix,\n  addMetersToLngLat,\n  getProjectionParameters,\n  fitBounds\n} from '@math.gl/web-mercator';\n\n// TODO - import from math.gl\nimport * as vec2 from 'gl-matrix/vec2';\n\nexport default class WebMercatorViewport extends Viewport {\n  /**\n   * @classdesc\n   * Creates view/projection matrices from mercator params\n   * Note: The Viewport is immutable in the sense that it only has accessors.\n   * A new viewport instance should be created if any parameters have changed.\n   */\n  /* eslint-disable complexity, max-statements */\n  constructor(opts = {}) {\n    const {\n      latitude = 0,\n      longitude = 0,\n      zoom = 11,\n      pitch = 0,\n      bearing = 0,\n      nearZMultiplier = 0.1,\n      farZMultiplier = 1.01,\n      orthographic = false\n    } = opts;\n\n    let {width, height, altitude = 1.5} = opts;\n    const scale = Math.pow(2, zoom);\n\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    // Altitude - prevent division by 0\n    // TODO - just throw an Error instead?\n    altitude = Math.max(0.75, altitude);\n\n    const {fov, aspect, focalDistance, near, far} = getProjectionParameters({\n      width,\n      height,\n      pitch,\n      altitude,\n      nearZMultiplier,\n      farZMultiplier\n    });\n\n    // The uncentered matrix allows us two move the center addition to the\n    // shader (cheap) which gives a coordinate system that has its center in\n    // the layer's center position. This makes rotations and other modelMatrx\n    // transforms much more useful.\n    const viewMatrixUncentered = getViewMatrix({\n      height,\n      pitch,\n      bearing,\n      scale,\n      altitude\n    });\n\n    const viewportOpts = Object.assign({}, opts, {\n      // x, y,\n      width,\n      height,\n\n      // view matrix\n      viewMatrix: viewMatrixUncentered,\n      longitude,\n      latitude,\n      zoom,\n\n      // projection matrix parameters\n      orthographic,\n      fovyRadians: fov,\n      aspect,\n      // TODO Viewport is already carefully set up to \"focus\" on ground, so can't use focal distance\n      focalDistance: orthographic ? focalDistance : 1,\n      near,\n      far\n    });\n\n    super(viewportOpts);\n\n    // Save parameters\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n\n    this.orthographic = orthographic;\n\n    Object.freeze(this);\n  }\n  /* eslint-enable complexity, max-statements */\n\n  /**\n   * Add a meter delta to a base lnglat coordinate, returning a new lnglat array\n   *\n   * Note: Uses simple linear approximation around the viewport center\n   * Error increases with size of offset (roughly 1% per 100km)\n   *\n   * @param {[Number,Number]|[Number,Number,Number]) lngLatZ - base coordinate\n   * @param {[Number,Number]|[Number,Number,Number]) xyz - array of meter deltas\n   * @return {[Number,Number]|[Number,Number,Number]) array of [lng,lat,z] deltas\n   */\n  addMetersToLngLat(lngLatZ, xyz) {\n    return addMetersToLngLat(lngLatZ, xyz);\n  }\n\n  /**\n   * Get the map center that place a given [lng, lat] coordinate at screen\n   * point [x, y]\n   *\n   * @param {Array} lngLat - [lng,lat] coordinates\n   *   Specifies a point on the sphere.\n   * @param {Array} pos - [x,y] coordinates\n   *   Specifies a point on the screen.\n   * @return {Array} [lng,lat] new map center.\n   */\n  getMapCenterByLngLatPosition({lngLat, pos}) {\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = this.projectFlat(lngLat);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    return this.unprojectFlat(newCenter);\n  }\n\n  /**\n   * Returns a new viewport that fit around the given rectangle.\n   * Only supports non-perspective mode.\n   * @param {Array} bounds - [[lon, lat], [lon, lat]]\n   * @param {Number} [options.padding] - The amount of padding in pixels to add to the given bounds.\n   * @param {Array} [options.offset] - The center of the given bounds relative to the map's center,\n   *    [x, y] measured in pixels.\n   * @returns {WebMercatorViewport}\n   */\n  fitBounds(bounds, options = {}) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds(Object.assign({width, height, bounds}, options));\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n}\n\nWebMercatorViewport.displayName = 'WebMercatorViewport';\n"],"file":"web-mercator-viewport.js"}