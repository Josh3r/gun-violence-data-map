{"version":3,"sources":["../../../src/tile-3d-layer/tile-3d-layer.js"],"names":["COORDINATE_SYSTEM","CompositeLayer","PointCloudLayer","ScenegraphLayer","log","Tileset3D","_getIonTilesetMetadata","defaultProps","getPointColor","pointSize","data","_ionAssetId","_ionAccessToken","loadOptions","throttleRequests","onTilesetLoad","tileset3d","onTileLoad","tileHeader","onTileUnload","onTileError","tile","message","url","Tile3DLayer","initializeState","props","removed","state","layerMap","shouldUpdateState","changeFlags","somethingChanged","updateState","oldProps","_loadTileset","_loadTilesetFromIon","viewportChanged","_updateTileset","tilesetUrl","fetchOptions","ionMetadata","response","fetch","tilesetJson","json","getLoadOptions","onTileLoadFail","setState","ionAccessToken","ionAssetId","headers","timeline","viewport","context","frameNumber","update","_updateLayerMap","selectedTiles","tilesWithoutLayer","filter","fullUri","addTileToCache","layer","_create3DTileLayer","_selectLayers","layerMapValues","Object","values","value","selectedFrame","visible","clone","contentUnloaded","layers","map","content","type","_createPointCloudTileLayer","_create3DModelTileLayer","Error","gltf","instances","cartographicOrigin","modelMatrix","SubLayerClass","getSubLayerClass","_lighting","getSubLayerProps","id","scenegraph","coordinateSystem","METER_OFFSETS","coordinateOrigin","getTransformMatrix","instance","getPosition","attributes","pointCount","constantRGBA","positions","normals","colors","header","vertexCount","POSITION","NORMAL","COLOR_0","getColor","renderLayers","layerName"],"mappings":"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","sourcesContent":["/* global fetch */\n\nimport {COORDINATE_SYSTEM, CompositeLayer} from '@deck.gl/core';\nimport {PointCloudLayer} from '@deck.gl/layers';\nimport {ScenegraphLayer} from '@deck.gl/mesh-layers';\nimport {log} from '@deck.gl/core';\n\nimport {Tileset3D, _getIonTilesetMetadata} from '@loaders.gl/3d-tiles';\n\nconst defaultProps = {\n  getPointColor: [0, 0, 0],\n  pointSize: 1.0,\n\n  data: null,\n  _ionAssetId: null,\n  _ionAccessToken: null,\n  loadOptions: {throttleRequests: true},\n\n  onTilesetLoad: tileset3d => {},\n  onTileLoad: tileHeader => {},\n  onTileUnload: tileHeader => {},\n  onTileError: (tile, message, url) => {}\n};\n\nexport default class Tile3DLayer extends CompositeLayer {\n  initializeState() {\n    if ('onTileLoadFail' in this.props) {\n      log.removed('onTileLoadFail', 'onTileError')();\n    }\n    this.state = {\n      layerMap: {},\n      tileset3d: null\n    };\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    if (props.data && props.data !== oldProps.data) {\n      this._loadTileset(props.data);\n    } else if (\n      (props._ionAccessToken || props._ionAssetId) &&\n      (props._ionAccessToken !== oldProps._ionAccessToken ||\n        props._ionAssetId !== oldProps._ionAssetId)\n    ) {\n      this._loadTilesetFromIon(props._ionAccessToken, props._ionAssetId);\n    }\n\n    if (changeFlags.viewportChanged) {\n      const {tileset3d} = this.state;\n      this._updateTileset(tileset3d);\n    }\n  }\n\n  async _loadTileset(tilesetUrl, fetchOptions, ionMetadata) {\n    const response = await fetch(tilesetUrl, fetchOptions);\n    const tilesetJson = await response.json();\n\n    const loadOptions = this.getLoadOptions();\n\n    const tileset3d = new Tileset3D(tilesetJson, tilesetUrl, {\n      onTileLoad: tileHeader => {\n        this.props.onTileLoad(tileHeader);\n        this._updateTileset(tileset3d);\n      },\n      onTileUnload: this.props.onTileUnload,\n      onTileLoadFail: this.props.onTileError,\n      // TODO: explicit passing should not be needed, registerLoaders should suffice\n      fetchOptions,\n      ...ionMetadata,\n      ...loadOptions\n    });\n\n    this.setState({\n      tileset3d,\n      layerMap: {}\n    });\n\n    if (tileset3d) {\n      this._updateTileset(tileset3d);\n      this.props.onTilesetLoad(tileset3d);\n    }\n  }\n\n  async _loadTilesetFromIon(ionAccessToken, ionAssetId) {\n    const ionMetadata = await _getIonTilesetMetadata(ionAccessToken, ionAssetId);\n    const {url, headers} = ionMetadata;\n    await this._loadTileset(url, {headers}, ionMetadata);\n  }\n\n  _updateTileset(tileset3d) {\n    const {timeline, viewport} = this.context;\n    if (!timeline || !viewport || !tileset3d) {\n      return;\n    }\n\n    const frameNumber = tileset3d.update(viewport);\n    this._updateLayerMap(frameNumber);\n  }\n\n  // `Layer` instances is created and added to the map if it doesn't exist yet.\n  _updateLayerMap(frameNumber) {\n    const {tileset3d, layerMap} = this.state;\n\n    // create layers for new tiles\n    const {selectedTiles} = tileset3d;\n    const tilesWithoutLayer = selectedTiles.filter(tile => !layerMap[tile.fullUri]);\n\n    for (const tile of tilesWithoutLayer) {\n      // TODO - why do we call this here? Being \"selected\" should automatically add it to cache?\n      tileset3d.addTileToCache(tile);\n\n      layerMap[tile.fullUri] = {\n        layer: this._create3DTileLayer(tile),\n        tile\n      };\n    }\n\n    // update layer visibility\n    this._selectLayers(frameNumber);\n  }\n\n  // Grab only those layers who were selected this frame.\n  _selectLayers(frameNumber) {\n    const {layerMap} = this.state;\n    const layerMapValues = Object.values(layerMap);\n\n    for (const value of layerMapValues) {\n      const {tile} = value;\n      let {layer} = value;\n\n      if (tile.selectedFrame === frameNumber) {\n        if (layer && layer.props && !layer.props.visible) {\n          // Still has GPU resource but visibility is turned off so turn it back on so we can render it.\n          layer = layer.clone({visible: true});\n          layerMap[tile.fullUri].layer = layer;\n        }\n      } else if (tile.contentUnloaded) {\n        // Was cleaned up from tileset cache. We no longer need to track it.\n        delete layerMap[tile.fullUri];\n      } else if (layer && layer.props && layer.props.visible) {\n        // Still in tileset cache but doesn't need to render this frame. Keep the GPU resource bound but don't render it.\n        layer = layer.clone({visible: false});\n        layerMap[tile.fullUri].layer = layer;\n      }\n    }\n\n    this.setState({layers: Object.values(layerMap).map(layer => layer.layer)});\n  }\n\n  _create3DTileLayer(tileHeader) {\n    if (!tileHeader.content) {\n      return null;\n    }\n\n    switch (tileHeader.content.type) {\n      case 'pnts':\n        return this._createPointCloudTileLayer(tileHeader);\n      case 'i3dm':\n      case 'b3dm':\n        return this._create3DModelTileLayer(tileHeader);\n      default:\n        throw new Error(`Tile3DLayer: Failed to render layer of type ${tileHeader.content.type}`);\n    }\n  }\n\n  _create3DModelTileLayer(tileHeader) {\n    const {gltf, instances, cartographicOrigin, modelMatrix} = tileHeader.content;\n\n    const SubLayerClass = this.getSubLayerClass('scenegraph', ScenegraphLayer);\n\n    return new SubLayerClass(\n      {\n        _lighting: 'pbr'\n      },\n      this.getSubLayerProps({\n        id: 'scenegraph'\n      }),\n      {\n        id: `${this.id}-scenegraph-${tileHeader.fullUri}`,\n        // Fix for ScenegraphLayer.modelMatrix, under flag in deck 7.3 to avoid breaking existing code\n        data: instances || [{}],\n        scenegraph: gltf,\n\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n        coordinateOrigin: cartographicOrigin,\n        modelMatrix,\n        getTransformMatrix: instance => instance.modelMatrix,\n        getPosition: instance => [0, 0, 0]\n      }\n    );\n  }\n\n  _createPointCloudTileLayer(tileHeader) {\n    const {\n      attributes,\n      pointCount,\n      constantRGBA,\n      cartographicOrigin,\n      modelMatrix\n    } = tileHeader.content;\n    const {positions, normals, colors} = attributes;\n\n    if (!positions) {\n      return null;\n    }\n\n    const {pointSize, getPointColor} = this.props;\n    const SubLayerClass = this.getSubLayerClass('pointcloud', PointCloudLayer);\n\n    return new SubLayerClass(\n      {\n        pointSize\n      },\n      this.getSubLayerProps({\n        id: 'pointcloud'\n      }),\n      {\n        id: `${this.id}-pointcloud-${tileHeader.fullUri}`,\n        data: {\n          header: {\n            vertexCount: pointCount\n          },\n          attributes: {\n            POSITION: positions,\n            NORMAL: normals,\n            COLOR_0: colors\n          }\n        },\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n        coordinateOrigin: cartographicOrigin,\n        modelMatrix,\n\n        getColor: constantRGBA || getPointColor\n      }\n    );\n  }\n\n  renderLayers() {\n    return this.state.layers;\n  }\n}\n\nTile3DLayer.layerName = 'Tile3DLayer';\nTile3DLayer.defaultProps = defaultProps;\n"],"file":"tile-3d-layer.js"}