{"version":3,"sources":["../../../src/tile-layer/tile-layer.js"],"names":["log","CompositeLayer","GeoJsonLayer","TileCache","defaultProps","renderSubLayers","type","value","props","compare","getTileData","x","y","z","Promise","resolve","onViewportLoad","optional","onTileError","err","console","error","maxZoom","minZoom","maxCacheSize","TileLayer","initializeState","removed","state","tiles","isLoaded","shouldUpdateState","changeFlags","somethingChanged","updateState","oldProps","context","tileCache","updateTriggersChanged","all","finalize","maxSize","onTileLoad","_onTileLoad","bind","_onTileError","setState","propsChanged","forEach","tile","layer","viewport","viewportChanged","id","getLayerZoomLevel","update","currTiles","filter","allCurrTilesLoaded","every","_data","map","getPickingInfo","info","sourceLayer","Math","floor","zoom","Number","isFinite","ceil","renderLayers","visible","isVisible","Object","assign","data","clone","layerName"],"mappings":"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","sourcesContent":["import {log} from '@deck.gl/core';\nimport {CompositeLayer} from '@deck.gl/core';\nimport {GeoJsonLayer} from '@deck.gl/layers';\nimport TileCache from './utils/tile-cache';\n\nconst defaultProps = {\n  renderSubLayers: {type: 'function', value: props => new GeoJsonLayer(props), compare: false},\n  getTileData: {type: 'function', value: ({x, y, z}) => Promise.resolve(null), compare: false},\n  // TODO - change to onViewportLoad to align with Tile3DLayer\n  onViewportLoad: {type: 'function', optional: true, value: null, compare: false},\n  // eslint-disable-next-line\n  onTileError: {type: 'function', value: err => console.error(err), compare: false},\n  maxZoom: null,\n  minZoom: 0,\n  maxCacheSize: null\n};\n\nexport default class TileLayer extends CompositeLayer {\n  initializeState() {\n    if ('onViewportLoaded' in this.props) {\n      log.removed('onViewportLoaded', 'onViewportLoad')();\n    }\n\n    this.state = {\n      tiles: [],\n      isLoaded: false\n    };\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, context, changeFlags}) {\n    let {tileCache} = this.state;\n    if (\n      !tileCache ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData))\n    ) {\n      const {getTileData, maxZoom, minZoom, maxCacheSize} = props;\n      if (tileCache) {\n        tileCache.finalize();\n      }\n      tileCache = new TileCache({\n        getTileData,\n        maxSize: maxCacheSize,\n        maxZoom,\n        minZoom,\n        onTileLoad: this._onTileLoad.bind(this),\n        onTileError: this._onTileError.bind(this)\n      });\n      this.setState({tileCache});\n    } else if (changeFlags.propsChanged) {\n      // if any props changed, delete the cached layers\n      this.state.tileCache.tiles.forEach(tile => {\n        tile.layer = null;\n      });\n    }\n\n    const {viewport} = context;\n    if (changeFlags.viewportChanged && viewport.id !== 'DEFAULT-INITIAL-VIEWPORT') {\n      const z = this.getLayerZoomLevel();\n      tileCache.update(viewport);\n      // The tiles that should be displayed at this zoom level\n      const currTiles = tileCache.tiles.filter(tile => tile.z === z);\n      this.setState({isLoaded: false, tiles: currTiles});\n      this._onTileLoad();\n    }\n  }\n\n  _onTileLoad() {\n    const {onViewportLoad} = this.props;\n    const currTiles = this.state.tiles;\n    const allCurrTilesLoaded = currTiles.every(tile => tile.isLoaded);\n    if (this.state.isLoaded !== allCurrTilesLoaded) {\n      this.setState({isLoaded: allCurrTilesLoaded});\n      if (allCurrTilesLoaded && onViewportLoad) {\n        onViewportLoad(currTiles.filter(tile => tile._data).map(tile => tile._data));\n      }\n    }\n  }\n\n  _onTileError(error) {\n    this.props.onTileError(error);\n    // errorred tiles should not block rendering, are considered \"loaded\" with empty data\n    this._onTileLoad();\n  }\n\n  getPickingInfo({info, sourceLayer}) {\n    info.sourceLayer = sourceLayer;\n    info.tile = sourceLayer.props.tile;\n    return info;\n  }\n\n  getLayerZoomLevel() {\n    const z = Math.floor(this.context.viewport.zoom);\n    const {maxZoom, minZoom} = this.props;\n    if (Number.isFinite(maxZoom) && z > maxZoom) {\n      return Math.floor(maxZoom);\n    } else if (Number.isFinite(minZoom) && z < minZoom) {\n      return Math.ceil(minZoom);\n    }\n    return z;\n  }\n\n  renderLayers() {\n    const {renderSubLayers, visible} = this.props;\n    const z = this.getLayerZoomLevel();\n    return this.state.tileCache.tiles.map(tile => {\n      // For a tile to be visible:\n      // - parent layer must be visible\n      // - tile must be visible in the current viewport\n      // - if all tiles are loaded, only display the tiles from the current z level\n      const isVisible = visible && tile.isVisible && (!this.state.isLoaded || tile.z === z);\n      // cache the rendered layer in the tile\n      if (!tile.layer) {\n        tile.layer = renderSubLayers(\n          Object.assign({}, this.props, {\n            id: `${this.id}-${tile.x}-${tile.y}-${tile.z}`,\n            data: tile.data,\n            visible: isVisible,\n            tile\n          })\n        );\n      } else if (tile.layer.props.visible !== isVisible) {\n        tile.layer = tile.layer.clone({visible: isVisible});\n      }\n      return tile.layer;\n    });\n  }\n}\n\nTileLayer.layerName = 'TileLayer';\nTileLayer.defaultProps = defaultProps;\n"],"file":"tile-layer.js"}