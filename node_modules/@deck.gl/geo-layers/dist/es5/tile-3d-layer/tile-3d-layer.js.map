{"version":3,"sources":["../../../src/tile-3d-layer/tile-3d-layer.js"],"names":["defaultProps","getPointColor","pointSize","data","_ionAssetId","_ionAccessToken","loadOptions","throttleRequests","onTilesetLoad","tileset3d","onTileLoad","tileHeader","onTileUnload","onTileError","tile","message","url","Tile3DLayer","props","log","removed","state","layerMap","changeFlags","somethingChanged","oldProps","_loadTileset","_loadTilesetFromIon","viewportChanged","_updateTileset","tilesetUrl","fetchOptions","ionMetadata","fetch","response","json","tilesetJson","getLoadOptions","Tileset3D","onTileLoadFail","setState","ionAccessToken","ionAssetId","headers","context","timeline","viewport","frameNumber","update","_updateLayerMap","selectedTiles","tilesWithoutLayer","filter","fullUri","addTileToCache","layer","_create3DTileLayer","_selectLayers","layerMapValues","Object","values","value","selectedFrame","visible","clone","contentUnloaded","layers","map","content","type","_createPointCloudTileLayer","_create3DModelTileLayer","Error","gltf","instances","cartographicOrigin","modelMatrix","SubLayerClass","getSubLayerClass","ScenegraphLayer","_lighting","getSubLayerProps","id","scenegraph","coordinateSystem","COORDINATE_SYSTEM","METER_OFFSETS","coordinateOrigin","getTransformMatrix","instance","getPosition","attributes","pointCount","constantRGBA","positions","normals","colors","PointCloudLayer","header","vertexCount","POSITION","NORMAL","COLOR_0","getColor","CompositeLayer","layerName"],"mappings":"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","sourcesContent":["/* global fetch */\n\nimport {COORDINATE_SYSTEM, CompositeLayer} from '@deck.gl/core';\nimport {PointCloudLayer} from '@deck.gl/layers';\nimport {ScenegraphLayer} from '@deck.gl/mesh-layers';\nimport {log} from '@deck.gl/core';\n\nimport {Tileset3D, _getIonTilesetMetadata} from '@loaders.gl/3d-tiles';\n\nconst defaultProps = {\n  getPointColor: [0, 0, 0],\n  pointSize: 1.0,\n\n  data: null,\n  _ionAssetId: null,\n  _ionAccessToken: null,\n  loadOptions: {throttleRequests: true},\n\n  onTilesetLoad: tileset3d => {},\n  onTileLoad: tileHeader => {},\n  onTileUnload: tileHeader => {},\n  onTileError: (tile, message, url) => {}\n};\n\nexport default class Tile3DLayer extends CompositeLayer {\n  initializeState() {\n    if ('onTileLoadFail' in this.props) {\n      log.removed('onTileLoadFail', 'onTileError')();\n    }\n    this.state = {\n      layerMap: {},\n      tileset3d: null\n    };\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    if (props.data && props.data !== oldProps.data) {\n      this._loadTileset(props.data);\n    } else if (\n      (props._ionAccessToken || props._ionAssetId) &&\n      (props._ionAccessToken !== oldProps._ionAccessToken ||\n        props._ionAssetId !== oldProps._ionAssetId)\n    ) {\n      this._loadTilesetFromIon(props._ionAccessToken, props._ionAssetId);\n    }\n\n    if (changeFlags.viewportChanged) {\n      const {tileset3d} = this.state;\n      this._updateTileset(tileset3d);\n    }\n  }\n\n  async _loadTileset(tilesetUrl, fetchOptions, ionMetadata) {\n    const response = await fetch(tilesetUrl, fetchOptions);\n    const tilesetJson = await response.json();\n\n    const loadOptions = this.getLoadOptions();\n\n    const tileset3d = new Tileset3D(tilesetJson, tilesetUrl, {\n      onTileLoad: tileHeader => {\n        this.props.onTileLoad(tileHeader);\n        this._updateTileset(tileset3d);\n      },\n      onTileUnload: this.props.onTileUnload,\n      onTileLoadFail: this.props.onTileError,\n      // TODO: explicit passing should not be needed, registerLoaders should suffice\n      fetchOptions,\n      ...ionMetadata,\n      ...loadOptions\n    });\n\n    this.setState({\n      tileset3d,\n      layerMap: {}\n    });\n\n    if (tileset3d) {\n      this._updateTileset(tileset3d);\n      this.props.onTilesetLoad(tileset3d);\n    }\n  }\n\n  async _loadTilesetFromIon(ionAccessToken, ionAssetId) {\n    const ionMetadata = await _getIonTilesetMetadata(ionAccessToken, ionAssetId);\n    const {url, headers} = ionMetadata;\n    await this._loadTileset(url, {headers}, ionMetadata);\n  }\n\n  _updateTileset(tileset3d) {\n    const {timeline, viewport} = this.context;\n    if (!timeline || !viewport || !tileset3d) {\n      return;\n    }\n\n    const frameNumber = tileset3d.update(viewport);\n    this._updateLayerMap(frameNumber);\n  }\n\n  // `Layer` instances is created and added to the map if it doesn't exist yet.\n  _updateLayerMap(frameNumber) {\n    const {tileset3d, layerMap} = this.state;\n\n    // create layers for new tiles\n    const {selectedTiles} = tileset3d;\n    const tilesWithoutLayer = selectedTiles.filter(tile => !layerMap[tile.fullUri]);\n\n    for (const tile of tilesWithoutLayer) {\n      // TODO - why do we call this here? Being \"selected\" should automatically add it to cache?\n      tileset3d.addTileToCache(tile);\n\n      layerMap[tile.fullUri] = {\n        layer: this._create3DTileLayer(tile),\n        tile\n      };\n    }\n\n    // update layer visibility\n    this._selectLayers(frameNumber);\n  }\n\n  // Grab only those layers who were selected this frame.\n  _selectLayers(frameNumber) {\n    const {layerMap} = this.state;\n    const layerMapValues = Object.values(layerMap);\n\n    for (const value of layerMapValues) {\n      const {tile} = value;\n      let {layer} = value;\n\n      if (tile.selectedFrame === frameNumber) {\n        if (layer && layer.props && !layer.props.visible) {\n          // Still has GPU resource but visibility is turned off so turn it back on so we can render it.\n          layer = layer.clone({visible: true});\n          layerMap[tile.fullUri].layer = layer;\n        }\n      } else if (tile.contentUnloaded) {\n        // Was cleaned up from tileset cache. We no longer need to track it.\n        delete layerMap[tile.fullUri];\n      } else if (layer && layer.props && layer.props.visible) {\n        // Still in tileset cache but doesn't need to render this frame. Keep the GPU resource bound but don't render it.\n        layer = layer.clone({visible: false});\n        layerMap[tile.fullUri].layer = layer;\n      }\n    }\n\n    this.setState({layers: Object.values(layerMap).map(layer => layer.layer)});\n  }\n\n  _create3DTileLayer(tileHeader) {\n    if (!tileHeader.content) {\n      return null;\n    }\n\n    switch (tileHeader.content.type) {\n      case 'pnts':\n        return this._createPointCloudTileLayer(tileHeader);\n      case 'i3dm':\n      case 'b3dm':\n        return this._create3DModelTileLayer(tileHeader);\n      default:\n        throw new Error(`Tile3DLayer: Failed to render layer of type ${tileHeader.content.type}`);\n    }\n  }\n\n  _create3DModelTileLayer(tileHeader) {\n    const {gltf, instances, cartographicOrigin, modelMatrix} = tileHeader.content;\n\n    const SubLayerClass = this.getSubLayerClass('scenegraph', ScenegraphLayer);\n\n    return new SubLayerClass(\n      {\n        _lighting: 'pbr'\n      },\n      this.getSubLayerProps({\n        id: 'scenegraph'\n      }),\n      {\n        id: `${this.id}-scenegraph-${tileHeader.fullUri}`,\n        // Fix for ScenegraphLayer.modelMatrix, under flag in deck 7.3 to avoid breaking existing code\n        data: instances || [{}],\n        scenegraph: gltf,\n\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n        coordinateOrigin: cartographicOrigin,\n        modelMatrix,\n        getTransformMatrix: instance => instance.modelMatrix,\n        getPosition: instance => [0, 0, 0]\n      }\n    );\n  }\n\n  _createPointCloudTileLayer(tileHeader) {\n    const {\n      attributes,\n      pointCount,\n      constantRGBA,\n      cartographicOrigin,\n      modelMatrix\n    } = tileHeader.content;\n    const {positions, normals, colors} = attributes;\n\n    if (!positions) {\n      return null;\n    }\n\n    const {pointSize, getPointColor} = this.props;\n    const SubLayerClass = this.getSubLayerClass('pointcloud', PointCloudLayer);\n\n    return new SubLayerClass(\n      {\n        pointSize\n      },\n      this.getSubLayerProps({\n        id: 'pointcloud'\n      }),\n      {\n        id: `${this.id}-pointcloud-${tileHeader.fullUri}`,\n        data: {\n          header: {\n            vertexCount: pointCount\n          },\n          attributes: {\n            POSITION: positions,\n            NORMAL: normals,\n            COLOR_0: colors\n          }\n        },\n        coordinateSystem: COORDINATE_SYSTEM.METER_OFFSETS,\n        coordinateOrigin: cartographicOrigin,\n        modelMatrix,\n\n        getColor: constantRGBA || getPointColor\n      }\n    );\n  }\n\n  renderLayers() {\n    return this.state.layers;\n  }\n}\n\nTile3DLayer.layerName = 'Tile3DLayer';\nTile3DLayer.defaultProps = defaultProps;\n"],"file":"tile-3d-layer.js"}