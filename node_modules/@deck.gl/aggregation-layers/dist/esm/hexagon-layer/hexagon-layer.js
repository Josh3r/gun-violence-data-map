import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _get from "@babel/runtime/helpers/esm/get";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import { log } from '@deck.gl/core';
import { ColumnLayer } from '@deck.gl/layers';
import { defaultColorRange } from '../utils/color-utils';
import { pointToHexbin } from './hexagon-aggregator';
import CPUAggregator from '../utils/cpu-aggregator';
import AggregationLayer from '../aggregation-layer';

function nop() {}

var defaultProps = {
  colorDomain: null,
  colorRange: defaultColorRange,
  getColorValue: {
    type: 'accessor',
    value: null
  },
  getColorWeight: {
    type: 'accessor',
    value: function value(x) {
      return 1;
    }
  },
  colorAggregation: 'SUM',
  lowerPercentile: {
    type: 'number',
    value: 0,
    min: 0,
    max: 100
  },
  upperPercentile: {
    type: 'number',
    value: 100,
    min: 0,
    max: 100
  },
  colorScaleType: 'quantize',
  onSetColorDomain: nop,
  elevationDomain: null,
  elevationRange: [0, 1000],
  getElevationValue: {
    type: 'accessor',
    value: null
  },
  getElevationWeight: {
    type: 'accessor',
    value: function value(x) {
      return 1;
    }
  },
  elevationAggregation: 'SUM',
  elevationLowerPercentile: {
    type: 'number',
    value: 0,
    min: 0,
    max: 100
  },
  elevationUpperPercentile: {
    type: 'number',
    value: 100,
    min: 0,
    max: 100
  },
  elevationScale: {
    type: 'number',
    min: 0,
    value: 1
  },
  elevationScaleType: 'linear',
  onSetElevationDomain: nop,
  radius: {
    type: 'number',
    value: 1000,
    min: 1
  },
  coverage: {
    type: 'number',
    min: 0,
    max: 1,
    value: 1
  },
  extruded: false,
  hexagonAggregator: pointToHexbin,
  getPosition: {
    type: 'accessor',
    value: function value(x) {
      return x.position;
    }
  },
  material: true,
  _filterData: {
    type: 'function',
    value: null,
    optional: true
  }
};

var HexagonLayer = function (_AggregationLayer) {
  _inherits(HexagonLayer, _AggregationLayer);

  function HexagonLayer() {
    _classCallCheck(this, HexagonLayer);

    return _possibleConstructorReturn(this, _getPrototypeOf(HexagonLayer).apply(this, arguments));
  }

  _createClass(HexagonLayer, [{
    key: "initializeState",
    value: function initializeState() {
      var cpuAggregator = new CPUAggregator({
        getAggregator: function getAggregator(props) {
          return props.hexagonAggregator;
        },
        getCellSize: function getCellSize(props) {
          return props.radius;
        }
      });
      this.state = {
        cpuAggregator: cpuAggregator,
        aggregatorState: cpuAggregator.state
      };
      var attributeManager = this.getAttributeManager();
      attributeManager.add({
        positions: {
          size: 3,
          accessor: 'getPosition'
        }
      });
    }
  }, {
    key: "updateState",
    value: function updateState(opts) {
      _get(_getPrototypeOf(HexagonLayer.prototype), "updateState", this).call(this, opts);

      var cpuAggregator = this.state.cpuAggregator;
      var oldLayerData = cpuAggregator.state.layerData;
      this.setState({
        aggregatorState: cpuAggregator.updateState(opts, {
          viewport: this.context.viewport,
          attributes: this.getAttributes()
        })
      });

      if (oldLayerData !== cpuAggregator.state.layerData) {
        var hexagonVertices = cpuAggregator.state.layerData.hexagonVertices;
        this.updateRadiusAngle(hexagonVertices);
      }
    }
  }, {
    key: "updateRadiusAngle",
    value: function updateRadiusAngle(vertices) {
      var radius = this.props.radius;
      var angle = 90;

      if (Array.isArray(vertices)) {
        if (vertices.length < 6) {
          log.error('HexagonCellLayer: hexagonVertices needs to be an array of 6 points')();
        }

        var vertex0 = vertices[0];
        var vertex3 = vertices[3];
        var viewport = this.context.viewport;

        var _viewport$getDistance = viewport.getDistanceScales(),
            unitsPerMeter = _viewport$getDistance.unitsPerMeter;

        var spaceCoord0 = this.projectFlat(vertex0);
        var spaceCoord3 = this.projectFlat(vertex3);
        var dx = spaceCoord0[0] - spaceCoord3[0];
        var dy = spaceCoord0[1] - spaceCoord3[1];
        var dxy = Math.sqrt(dx * dx + dy * dy);
        angle = Math.acos(dx / dxy) * -Math.sign(dy) / Math.PI * 180 + 90;
        radius = dxy / 2 / unitsPerMeter[0];
      }

      this.setState({
        angle: angle,
        radius: radius
      });
    }
  }, {
    key: "getPickingInfo",
    value: function getPickingInfo(_ref) {
      var info = _ref.info;
      return this.state.cpuAggregator.getPickingInfo({
        info: info
      });
    }
  }, {
    key: "_onGetSublayerColor",
    value: function _onGetSublayerColor(cell) {
      return this.state.cpuAggregator.getAccessor('fillColor')(cell);
    }
  }, {
    key: "_onGetSublayerElevation",
    value: function _onGetSublayerElevation(cell) {
      return this.state.cpuAggregator.getAccessor('elevation')(cell);
    }
  }, {
    key: "_getSublayerUpdateTriggers",
    value: function _getSublayerUpdateTriggers() {
      return this.state.cpuAggregator.getUpdateTriggers(this.props);
    }
  }, {
    key: "renderLayers",
    value: function renderLayers() {
      var _this$props = this.props,
          elevationScale = _this$props.elevationScale,
          extruded = _this$props.extruded,
          coverage = _this$props.coverage,
          material = _this$props.material,
          transitions = _this$props.transitions;
      var _this$state = this.state,
          angle = _this$state.angle,
          radius = _this$state.radius,
          cpuAggregator = _this$state.cpuAggregator;
      var SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);

      var updateTriggers = this._getSublayerUpdateTriggers();

      return new SubLayerClass({
        radius: radius,
        diskResolution: 6,
        elevationScale: elevationScale,
        angle: angle,
        extruded: extruded,
        coverage: coverage,
        material: material,
        getFillColor: this._onGetSublayerColor.bind(this),
        getElevation: this._onGetSublayerElevation.bind(this),
        transitions: transitions && {
          getFillColor: transitions.getColorValue || transitions.getColorWeight,
          getElevation: transitions.getElevationValue || transitions.getElevationWeight
        }
      }, this.getSubLayerProps({
        id: 'hexagon-cell',
        updateTriggers: updateTriggers
      }), {
        data: cpuAggregator.state.layerData.data
      });
    }
  }]);

  return HexagonLayer;
}(AggregationLayer);

export { HexagonLayer as default };
HexagonLayer.layerName = 'HexagonLayer';
HexagonLayer.defaultProps = defaultProps;
//# sourceMappingURL=hexagon-layer.js.map