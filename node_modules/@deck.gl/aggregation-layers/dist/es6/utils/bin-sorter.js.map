{"version":3,"sources":["../../../src/utils/bin-sorter.js"],"names":["defaultGetValue","points","length","clamp","getQuantileDomain","getOrdinalDomain","MAX_32_BIT_FLOAT","defaultGetPoints","bin","defaultGetIndex","index","defaultProps","getValue","getPoints","getIndex","filterData","BinSorter","constructor","bins","props","aggregatedBins","getAggregatedBins","_updateMinMaxValues","binMap","getBinMap","hasFilter","binCount","binIndex","i","filteredPoints","filter","value","undefined","Number","isFinite","counts","_percentileToIndex","percentileRange","len","sortedBins","lower","upper","map","n","lowerIdx","Math","ceil","upperIdx","floor","maxCount","maxValue","minValue","totalCount","x","getValueRange","sort","a","b","Array","isArray","idxRange","getValueDomainByScale","scale","indexEdge","_getScaleDomain","scaleType","slice","d"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// getValue takes an array of points returns a value to sort the bins on.\n// by default it returns the number of points\n// this is where to pass in a function to color the bins by\n// avg/mean/max of specific value of the point\nconst defaultGetValue = points => points.length;\n\nimport {clamp, getQuantileDomain, getOrdinalDomain} from './scale-utils';\n\nconst MAX_32_BIT_FLOAT = 3.402823466e38;\n\n// access array of points in each bin\nconst defaultGetPoints = bin => bin.points;\n// access index of each bin\nconst defaultGetIndex = bin => bin.index;\n\nconst defaultProps = {\n  getValue: defaultGetValue,\n  getPoints: defaultGetPoints,\n  getIndex: defaultGetIndex,\n  filterData: null\n};\n\nexport default class BinSorter {\n  constructor(bins = [], props = defaultProps) {\n    this.aggregatedBins = this.getAggregatedBins(bins, props);\n    this._updateMinMaxValues();\n    this.binMap = this.getBinMap();\n  }\n\n  /**\n   * Get an array of object with aggregated values and index of bins\n   * Array object will be sorted by value optionally.\n   * @param {Array} bins\n   * @param {Function} getValue\n   * @return {Array} array of values and index lookup\n   */\n  getAggregatedBins(bins, props) {\n    const {\n      getValue = defaultGetValue,\n      getPoints = defaultGetPoints,\n      getIndex = defaultGetIndex,\n      filterData\n    } = props;\n\n    const hasFilter = typeof filterData === 'function';\n    const binCount = bins.length;\n    const aggregatedBins = [];\n    let index = 0;\n\n    for (let binIndex = 0; binIndex < binCount; binIndex++) {\n      const bin = bins[binIndex];\n      const points = getPoints(bin);\n      const i = getIndex(bin);\n\n      const filteredPoints = hasFilter ? points.filter(filterData) : points;\n\n      bin.filteredPoints = hasFilter ? filteredPoints : null;\n\n      const value = filteredPoints.length ? getValue(filteredPoints) : null;\n\n      if (value !== null && value !== undefined) {\n        // filter bins if value is null or undefined\n        aggregatedBins[index] = {\n          i: Number.isFinite(i) ? i : binIndex,\n          value,\n          counts: filteredPoints.length\n        };\n        index++;\n      }\n    }\n    return aggregatedBins;\n  }\n\n  _percentileToIndex(percentileRange) {\n    const len = this.sortedBins.length;\n    if (len < 2) {\n      return [0, 0];\n    }\n\n    const [lower, upper] = percentileRange.map(n => clamp(n, 0, 100));\n\n    const lowerIdx = Math.ceil((lower / 100) * (len - 1));\n    const upperIdx = Math.floor((upper / 100) * (len - 1));\n\n    return [lowerIdx, upperIdx];\n  }\n\n  /**\n   * Get a mapping from cell/hexagon index to sorted bin\n   * This is used to retrieve bin value for color calculation\n   * @return {Object} bin index to aggregatedBins\n   */\n  getBinMap() {\n    const binMap = {};\n    for (const bin of this.aggregatedBins) {\n      binMap[bin.i] = bin;\n    }\n    return binMap;\n  }\n\n  // Private\n\n  /**\n   * Get ths max count of all bins\n   * @return {Number | Boolean} max count\n   */\n  _updateMinMaxValues() {\n    let maxCount = 0;\n    let maxValue = 0;\n    let minValue = MAX_32_BIT_FLOAT;\n    let totalCount = 0;\n    for (const x of this.aggregatedBins) {\n      maxCount = maxCount > x.counts ? maxCount : x.counts;\n      maxValue = maxValue > x.value ? maxValue : x.value;\n      minValue = minValue < x.value ? minValue : x.value;\n      totalCount += x.counts;\n    }\n    this.maxCount = maxCount;\n    this.maxValue = maxValue;\n    this.minValue = minValue;\n    this.totalCount = totalCount;\n  }\n\n  /**\n   * Get range of values of all bins\n   * @param {Number[]} range\n   * @param {Number} range[0] - lower bound\n   * @param {Number} range[1] - upper bound\n   * @return {Array} array of new value range\n   */\n  getValueRange(percentileRange) {\n    if (!this.sortedBins) {\n      this.sortedBins = this.aggregatedBins.sort((a, b) => a.value - b.value);\n    }\n    if (!this.sortedBins.length) {\n      return [];\n    }\n    let lowerIdx = 0;\n    let upperIdx = this.sortedBins.length - 1;\n\n    if (Array.isArray(percentileRange)) {\n      const idxRange = this._percentileToIndex(percentileRange);\n      lowerIdx = idxRange[0];\n      upperIdx = idxRange[1];\n    }\n\n    return [this.sortedBins[lowerIdx].value, this.sortedBins[upperIdx].value];\n  }\n\n  getValueDomainByScale(scale, [lower = 0, upper = 100] = []) {\n    if (!this.sortedBins) {\n      this.sortedBins = this.aggregatedBins.sort((a, b) => a.value - b.value);\n    }\n    if (!this.sortedBins.length) {\n      return [];\n    }\n    const indexEdge = this._percentileToIndex([lower, upper]);\n\n    return this._getScaleDomain(scale, indexEdge);\n  }\n\n  _getScaleDomain(scaleType, [lowerIdx, upperIdx]) {\n    const bins = this.sortedBins;\n\n    switch (scaleType) {\n      case 'quantize':\n      case 'linear':\n        return [bins[lowerIdx].value, bins[upperIdx].value];\n\n      case 'quantile':\n        return getQuantileDomain(bins.slice(lowerIdx, upperIdx + 1), d => d.value);\n\n      case 'ordinal':\n        return getOrdinalDomain(bins, d => d.value);\n\n      default:\n        return [bins[lowerIdx].value, bins[upperIdx].value];\n    }\n  }\n}\n"],"file":"bin-sorter.js"}