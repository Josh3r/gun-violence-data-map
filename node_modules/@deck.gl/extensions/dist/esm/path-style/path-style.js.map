{"version":3,"sources":["../../../src/path-style/path-style.js"],"names":["LayerExtension","_mergeShaders","mergeShaders","dashShaders","defaultProps","getDashArray","type","value","dashJustified","PathStyleExtension","dash","layer","state","pathTesselator","extension","isEnabled","result","opts","context","attributeManager","getAttributeManager","enabled","add","instanceDashArrays","size","accessor","params","uniforms","dashAlignMode","props","model","setUniforms","extensionName"],"mappings":";;;;;AAoBA,SAAQA,cAAR,EAAwBC,aAAa,IAAIC,YAAzC,QAA4D,eAA5D;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,YAAY,EAAE;AAACC,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;AAA1B,GADK;AAEnBC,EAAAA,aAAa,EAAE;AAFI,CAArB;;IAKqBC,kB;;;AACnB,gCAAiC;AAAA,mFAAJ,EAAI;AAAA,yBAApBC,IAAoB;AAAA,QAApBA,IAAoB,0BAAb,KAAa;;AAAA;;AAAA,2FACzB;AAACA,MAAAA,IAAI,EAAJA;AAAD,KADyB;AAEhC;;;;8BAESC,K,EAAO;AACf,aAAOA,KAAK,CAACC,KAAN,CAAYC,cAAnB;AACD;;;+BAEUC,S,EAAW;AACpB,UAAI,CAACA,SAAS,CAACC,SAAV,CAAoB,IAApB,CAAL,EAAgC;AAC9B,eAAO,IAAP;AACD;;AAGD,UAAIC,MAAM,GAAG,EAAb;;AACA,UAAIF,SAAS,CAACG,IAAV,CAAeP,IAAnB,EAAyB;AACvBM,QAAAA,MAAM,GAAGd,YAAY,CAACc,MAAD,EAASb,WAAT,CAArB;AACD;;AAED,aAAOa,MAAP;AACD;;;oCAEeE,O,EAASJ,S,EAAW;AAClC,UAAMK,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;;AACA,UAAI,CAACD,gBAAD,IAAqB,CAACL,SAAS,CAACC,SAAV,CAAoB,IAApB,CAA1B,EAAqD;AAEnD;AACD;;AAEDD,MAAAA,SAAS,CAACO,OAAV,GAAoB,IAApB;;AAEA,UAAIP,SAAS,CAACG,IAAV,CAAeP,IAAnB,EAAyB;AACvBS,QAAAA,gBAAgB,CAACG,GAAjB,CAAqB;AACnBC,UAAAA,kBAAkB,EAAE;AAACC,YAAAA,IAAI,EAAE,CAAP;AAAUC,YAAAA,QAAQ,EAAE;AAApB;AADD,SAArB;AAGD;AACF;;;gCAEWC,M,EAAQZ,S,EAAW;AAC7B,UAAI,CAACA,SAAS,CAACC,SAAV,CAAoB,IAApB,CAAL,EAAgC;AAC9B;AACD;;AAED,UAAMY,QAAQ,GAAG,EAAjB;;AAEA,UAAIb,SAAS,CAACG,IAAV,CAAeP,IAAnB,EAAyB;AACvBiB,QAAAA,QAAQ,CAACC,aAAT,GAAyB,KAAKC,KAAL,CAAWrB,aAAX,GAA2B,CAA3B,GAA+B,CAAxD;AACD;;AAED,WAAKI,KAAL,CAAWkB,KAAX,CAAiBC,WAAjB,CAA6BJ,QAA7B;AACD;;;;EAnD6C3B,c;;SAA3BS,kB;AAsDrBA,kBAAkB,CAACuB,aAAnB,GAAmC,oBAAnC;AACAvB,kBAAkB,CAACL,YAAnB,GAAkCA,YAAlC","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LayerExtension, _mergeShaders as mergeShaders} from '@deck.gl/core';\nimport {dashShaders} from './shaders.glsl';\n\nconst defaultProps = {\n  getDashArray: {type: 'accessor', value: [0, 0]},\n  dashJustified: false\n};\n\nexport default class PathStyleExtension extends LayerExtension {\n  constructor({dash = false} = {}) {\n    super({dash});\n  }\n\n  isEnabled(layer) {\n    return layer.state.pathTesselator;\n  }\n\n  getShaders(extension) {\n    if (!extension.isEnabled(this)) {\n      return null;\n    }\n\n    // Merge shader injection\n    let result = {};\n    if (extension.opts.dash) {\n      result = mergeShaders(result, dashShaders);\n    }\n\n    return result;\n  }\n\n  initializeState(context, extension) {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager || !extension.isEnabled(this)) {\n      // This extension only works with the PathLayer\n      return;\n    }\n\n    extension.enabled = true;\n\n    if (extension.opts.dash) {\n      attributeManager.add({\n        instanceDashArrays: {size: 2, accessor: 'getDashArray'}\n      });\n    }\n  }\n\n  updateState(params, extension) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    const uniforms = {};\n\n    if (extension.opts.dash) {\n      uniforms.dashAlignMode = this.props.dashJustified ? 1 : 0;\n    }\n\n    this.state.model.setUniforms(uniforms);\n  }\n}\n\nPathStyleExtension.extensionName = 'PathStyleExtension';\nPathStyleExtension.defaultProps = defaultProps;\n"],"file":"path-style.js"}