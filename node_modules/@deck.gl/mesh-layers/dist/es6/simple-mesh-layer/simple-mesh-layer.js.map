{"version":3,"sources":["../../../src/simple-mesh-layer/simple-mesh-layer.js"],"names":["Layer","project32","phongLighting","picking","COORDINATE_SYSTEM","log","Model","Geometry","Texture2D","isWebGL2","MATRIX_ATTRIBUTES","shouldComposeModelMatrix","vs1","fs1","vs3","fs3","getTextureFromData","gl","data","opts","Object","assign","validateGeometryAttributes","attributes","assert","positions","POSITION","getGeometry","Error","DEFAULT_COLOR","defaultProps","mesh","value","type","async","texture","sizeScale","min","parameters","depthTest","depthFunc","wireframe","material","getPosition","x","position","getColor","getOrientation","getScale","getTranslation","getTransformMatrix","SimpleMeshLayer","getShaders","gl2","context","vs","fs","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","transition","fp64","use64bitPositions","size","accessor","instanceColors","props","colorFormat","length","normalized","defaultValue","instanceModelMatrix","setState","emptyTexture","Uint8Array","width","height","updateState","oldProps","changeFlags","extensionsChanged","state","model","delete","getModel","hasNormals","Boolean","NORMAL","normals","invalidateAll","setTexture","setDrawMode","finalizeState","draw","uniforms","viewport","coordinateSystem","composeModelMatrix","flatShade","id","geometry","isInstanced","setUniforms","sampler","hasTexture","image","layerName"],"mappings":"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","sourcesContent":["// Note: This file will either be moved back to deck.gl or reformatted to web-monorepo standards\n// Disabling lint temporarily to facilitate copying code in and out of this repo\n/* eslint-disable */\n\n// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, phongLighting, picking, COORDINATE_SYSTEM, log} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Texture2D, isWebGL2} from '@luma.gl/core';\n\nimport {MATRIX_ATTRIBUTES, shouldComposeModelMatrix} from '../utils/matrix';\n\n// NOTE(Tarek): Should eventually phase out the glsl1 versions.\nimport vs1 from './simple-mesh-layer-vertex.glsl1';\nimport fs1 from './simple-mesh-layer-fragment.glsl1';\nimport vs3 from './simple-mesh-layer-vertex.glsl';\nimport fs3 from './simple-mesh-layer-fragment.glsl';\n\n/*\n * Convert image data into texture\n * @returns {Texture2D} texture\n */\nfunction getTextureFromData(gl, data, opts) {\n  if (data instanceof Texture2D) {\n    return data;\n  }\n  return new Texture2D(gl, Object.assign({data}, opts));\n}\n\nfunction validateGeometryAttributes(attributes) {\n  log.assert(\n    attributes.positions || attributes.POSITION,\n    'SimpleMeshLayer requires \"postions\" or \"POSITION\" attribute in mesh property.'\n  );\n}\n\n/*\n * Convert mesh data into geometry\n * @returns {Geometry} geometry\n */\nfunction getGeometry(data) {\n  if (data.attributes) {\n    validateGeometryAttributes(data.attributes);\n    if (data instanceof Geometry) {\n      return data;\n    } else {\n      return new Geometry(data);\n    }\n  } else if (data.positions || data.POSITION) {\n    validateGeometryAttributes(data);\n    return new Geometry({\n      attributes: data\n    });\n  }\n  throw Error('Invalid mesh');\n}\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  mesh: {value: null, type: 'object', async: true},\n  texture: {type: 'object', value: null, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  // TODO - parameters should be merged, not completely overridden\n  parameters: {\n    depthTest: true,\n    depthFunc: GL.LEQUAL\n  },\n\n  // NOTE(Tarek): Quick and dirty wireframe. Just draws\n  // the same mesh with LINE_STRIPS. Won't follow edges\n  // of the original mesh.\n  wireframe: false,\n  // Optional material for 'lighting' shader module\n  material: true,\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  // [pitch, yaw, roll]\n  getOrientation: {type: 'accessor', value: [0, 0, 0]},\n  getScale: {type: 'accessor', value: [1, 1, 1]},\n  getTranslation: {type: 'accessor', value: [0, 0, 0]},\n  // 4x4 matrix\n  getTransformMatrix: {type: 'accessor', value: []}\n};\n\nexport default class SimpleMeshLayer extends Layer {\n  getShaders() {\n    const gl2 = isWebGL2(this.context.gl);\n    const vs = gl2 ? vs3 : vs1;\n    const fs = gl2 ? fs3 : fs1;\n\n    return super.getShaders({vs, fs, modules: [project32, phongLighting, picking]});\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    attributeManager.addInstanced({\n      instancePositions: {\n        transition: true,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        size: 3,\n        accessor: 'getPosition'\n      },\n      instanceColors: {\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        size: this.props.colorFormat.length,\n        normalized: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n\n    this.setState({\n      // Avoid luma.gl's missing uniform warning\n      // TODO - add feature to luma.gl to specify ignored uniforms?\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      if (props.mesh) {\n        this.setState({model: this.getModel(props.mesh)});\n\n        const attributes = props.mesh.attributes || props.mesh;\n        this.setState({\n          hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n        });\n      }\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (props.texture !== oldProps.texture) {\n      this.setTexture(props.texture);\n    }\n\n    if (this.state.model) {\n      this.state.model.setDrawMode(this.props.wireframe ? GL.LINE_STRIP : GL.TRIANGLES);\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    this.state.emptyTexture.delete();\n    if (this.state.texture) {\n      this.state.texture.delete();\n    }\n  }\n\n  draw({uniforms}) {\n    if (!this.state.model) {\n      return;\n    }\n\n    const {viewport} = this.context;\n    const {sizeScale, coordinateSystem} = this.props;\n\n    this.state.model.draw({\n      uniforms: Object.assign({}, uniforms, {\n        sizeScale,\n        composeModelMatrix: shouldComposeModelMatrix(viewport, coordinateSystem),\n        flatShade: !this.state.hasNormals\n      })\n    });\n  }\n\n  getModel(mesh) {\n    const model = new Model(\n      this.context.gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: getGeometry(mesh),\n        isInstanced: true\n      })\n    );\n\n    const {texture, emptyTexture} = this.state;\n    model.setUniforms({\n      sampler: texture || emptyTexture,\n      hasTexture: Boolean(texture)\n    });\n\n    return model;\n  }\n\n  setTexture(image) {\n    const {gl} = this.context;\n    const {emptyTexture, model} = this.state;\n\n    if (this.state.texture) {\n      this.state.texture.delete();\n    }\n\n    const texture = image ? getTextureFromData(gl, image) : null;\n    this.setState({texture});\n\n    if (model) {\n      // props.mesh may not be ready at this time.\n      // The sampler will be set when `getModel` is called\n      model.setUniforms({\n        sampler: texture || emptyTexture,\n        hasTexture: Boolean(texture)\n      });\n    }\n  }\n}\n\nSimpleMeshLayer.layerName = 'SimpleMeshLayer';\nSimpleMeshLayer.defaultProps = defaultProps;\n"],"file":"simple-mesh-layer.js"}