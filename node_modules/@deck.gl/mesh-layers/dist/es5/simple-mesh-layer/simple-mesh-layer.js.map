{"version":3,"sources":["../../../src/simple-mesh-layer/simple-mesh-layer.js"],"names":["getTextureFromData","gl","data","opts","Texture2D","Object","assign","validateGeometryAttributes","attributes","log","assert","positions","POSITION","getGeometry","Geometry","Error","DEFAULT_COLOR","defaultProps","mesh","value","type","async","texture","sizeScale","min","parameters","depthTest","depthFunc","wireframe","material","getPosition","x","position","getColor","getOrientation","getScale","getTranslation","getTransformMatrix","SimpleMeshLayer","gl2","context","vs","vs3","vs1","fs","fs3","fs1","modules","project32","phongLighting","picking","attributeManager","getAttributeManager","addInstanced","instancePositions","transition","fp64","use64bitPositions","size","accessor","instanceColors","props","colorFormat","length","normalized","defaultValue","instanceModelMatrix","MATRIX_ATTRIBUTES","setState","emptyTexture","Uint8Array","width","height","oldProps","changeFlags","extensionsChanged","state","model","getModel","hasNormals","Boolean","NORMAL","normals","invalidateAll","setTexture","setDrawMode","uniforms","viewport","coordinateSystem","draw","composeModelMatrix","flatShade","Model","getShaders","id","geometry","isInstanced","setUniforms","sampler","hasTexture","image","Layer","layerName"],"mappings":"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","sourcesContent":["// Note: This file will either be moved back to deck.gl or reformatted to web-monorepo standards\n// Disabling lint temporarily to facilitate copying code in and out of this repo\n/* eslint-disable */\n\n// Copyright (c) 2015 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, phongLighting, picking, COORDINATE_SYSTEM, log} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, Texture2D, isWebGL2} from '@luma.gl/core';\n\nimport {MATRIX_ATTRIBUTES, shouldComposeModelMatrix} from '../utils/matrix';\n\n// NOTE(Tarek): Should eventually phase out the glsl1 versions.\nimport vs1 from './simple-mesh-layer-vertex.glsl1';\nimport fs1 from './simple-mesh-layer-fragment.glsl1';\nimport vs3 from './simple-mesh-layer-vertex.glsl';\nimport fs3 from './simple-mesh-layer-fragment.glsl';\n\n/*\n * Convert image data into texture\n * @returns {Texture2D} texture\n */\nfunction getTextureFromData(gl, data, opts) {\n  if (data instanceof Texture2D) {\n    return data;\n  }\n  return new Texture2D(gl, Object.assign({data}, opts));\n}\n\nfunction validateGeometryAttributes(attributes) {\n  log.assert(\n    attributes.positions || attributes.POSITION,\n    'SimpleMeshLayer requires \"postions\" or \"POSITION\" attribute in mesh property.'\n  );\n}\n\n/*\n * Convert mesh data into geometry\n * @returns {Geometry} geometry\n */\nfunction getGeometry(data) {\n  if (data.attributes) {\n    validateGeometryAttributes(data.attributes);\n    if (data instanceof Geometry) {\n      return data;\n    } else {\n      return new Geometry(data);\n    }\n  } else if (data.positions || data.POSITION) {\n    validateGeometryAttributes(data);\n    return new Geometry({\n      attributes: data\n    });\n  }\n  throw Error('Invalid mesh');\n}\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  mesh: {value: null, type: 'object', async: true},\n  texture: {type: 'object', value: null, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  // TODO - parameters should be merged, not completely overridden\n  parameters: {\n    depthTest: true,\n    depthFunc: GL.LEQUAL\n  },\n\n  // NOTE(Tarek): Quick and dirty wireframe. Just draws\n  // the same mesh with LINE_STRIPS. Won't follow edges\n  // of the original mesh.\n  wireframe: false,\n  // Optional material for 'lighting' shader module\n  material: true,\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // yaw, pitch and roll are in degrees\n  // https://en.wikipedia.org/wiki/Euler_angles\n  // [pitch, yaw, roll]\n  getOrientation: {type: 'accessor', value: [0, 0, 0]},\n  getScale: {type: 'accessor', value: [1, 1, 1]},\n  getTranslation: {type: 'accessor', value: [0, 0, 0]},\n  // 4x4 matrix\n  getTransformMatrix: {type: 'accessor', value: []}\n};\n\nexport default class SimpleMeshLayer extends Layer {\n  getShaders() {\n    const gl2 = isWebGL2(this.context.gl);\n    const vs = gl2 ? vs3 : vs1;\n    const fs = gl2 ? fs3 : fs1;\n\n    return super.getShaders({vs, fs, modules: [project32, phongLighting, picking]});\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n\n    attributeManager.addInstanced({\n      instancePositions: {\n        transition: true,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        size: 3,\n        accessor: 'getPosition'\n      },\n      instanceColors: {\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        size: this.props.colorFormat.length,\n        normalized: true,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceModelMatrix: MATRIX_ATTRIBUTES\n    });\n\n    this.setState({\n      // Avoid luma.gl's missing uniform warning\n      // TODO - add feature to luma.gl to specify ignored uniforms?\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    if (props.mesh !== oldProps.mesh || changeFlags.extensionsChanged) {\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      if (props.mesh) {\n        this.setState({model: this.getModel(props.mesh)});\n\n        const attributes = props.mesh.attributes || props.mesh;\n        this.setState({\n          hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n        });\n      }\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (props.texture !== oldProps.texture) {\n      this.setTexture(props.texture);\n    }\n\n    if (this.state.model) {\n      this.state.model.setDrawMode(this.props.wireframe ? GL.LINE_STRIP : GL.TRIANGLES);\n    }\n  }\n\n  finalizeState() {\n    super.finalizeState();\n\n    this.state.emptyTexture.delete();\n    if (this.state.texture) {\n      this.state.texture.delete();\n    }\n  }\n\n  draw({uniforms}) {\n    if (!this.state.model) {\n      return;\n    }\n\n    const {viewport} = this.context;\n    const {sizeScale, coordinateSystem} = this.props;\n\n    this.state.model.draw({\n      uniforms: Object.assign({}, uniforms, {\n        sizeScale,\n        composeModelMatrix: shouldComposeModelMatrix(viewport, coordinateSystem),\n        flatShade: !this.state.hasNormals\n      })\n    });\n  }\n\n  getModel(mesh) {\n    const model = new Model(\n      this.context.gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: getGeometry(mesh),\n        isInstanced: true\n      })\n    );\n\n    const {texture, emptyTexture} = this.state;\n    model.setUniforms({\n      sampler: texture || emptyTexture,\n      hasTexture: Boolean(texture)\n    });\n\n    return model;\n  }\n\n  setTexture(image) {\n    const {gl} = this.context;\n    const {emptyTexture, model} = this.state;\n\n    if (this.state.texture) {\n      this.state.texture.delete();\n    }\n\n    const texture = image ? getTextureFromData(gl, image) : null;\n    this.setState({texture});\n\n    if (model) {\n      // props.mesh may not be ready at this time.\n      // The sampler will be set when `getModel` is called\n      model.setUniforms({\n        sampler: texture || emptyTexture,\n        hasTexture: Boolean(texture)\n      });\n    }\n  }\n}\n\nSimpleMeshLayer.layerName = 'SimpleMeshLayer';\nSimpleMeshLayer.defaultProps = defaultProps;\n"],"file":"simple-mesh-layer.js"}